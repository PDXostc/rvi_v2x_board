
JLR_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cfa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000088  00802000  00002cfa  00002d8e  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002a1  00802088  00802088  00002e18  2**4
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002e16  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000006a0  00000000  00000000  00002e48  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000b6b6  00000000  00000000  000034e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002ab8  00000000  00000000  0000eb9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000a397  00000000  00000000  00011656  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000010b0  00000000  00000000  0001b9f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00036b70  00000000  00000000  0001caa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000040d2  00000000  00000000  00053610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000680  00000000  00000000  000576e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00004380  00000000  00000000  00057d68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	28 c1       	rjmp	.+592    	; 0x256 <__bad_interrupt>
       6:	00 00       	nop
       8:	26 c1       	rjmp	.+588    	; 0x256 <__bad_interrupt>
       a:	00 00       	nop
       c:	24 c1       	rjmp	.+584    	; 0x256 <__bad_interrupt>
       e:	00 00       	nop
      10:	22 c1       	rjmp	.+580    	; 0x256 <__bad_interrupt>
      12:	00 00       	nop
      14:	20 c1       	rjmp	.+576    	; 0x256 <__bad_interrupt>
      16:	00 00       	nop
      18:	1e c1       	rjmp	.+572    	; 0x256 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1c c1       	rjmp	.+568    	; 0x256 <__bad_interrupt>
      1e:	00 00       	nop
      20:	1a c1       	rjmp	.+564    	; 0x256 <__bad_interrupt>
      22:	00 00       	nop
      24:	18 c1       	rjmp	.+560    	; 0x256 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__vector_10>
      2c:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__vector_11>
      30:	12 c1       	rjmp	.+548    	; 0x256 <__bad_interrupt>
      32:	00 00       	nop
      34:	10 c1       	rjmp	.+544    	; 0x256 <__bad_interrupt>
      36:	00 00       	nop
      38:	0e c1       	rjmp	.+540    	; 0x256 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c c1       	rjmp	.+536    	; 0x256 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0a c1       	rjmp	.+532    	; 0x256 <__bad_interrupt>
      42:	00 00       	nop
      44:	08 c1       	rjmp	.+528    	; 0x256 <__bad_interrupt>
      46:	00 00       	nop
      48:	06 c1       	rjmp	.+524    	; 0x256 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	04 c1       	rjmp	.+520    	; 0x256 <__bad_interrupt>
      4e:	00 00       	nop
      50:	02 c1       	rjmp	.+516    	; 0x256 <__bad_interrupt>
      52:	00 00       	nop
      54:	00 c1       	rjmp	.+512    	; 0x256 <__bad_interrupt>
      56:	00 00       	nop
      58:	fe c0       	rjmp	.+508    	; 0x256 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	fc c0       	rjmp	.+504    	; 0x256 <__bad_interrupt>
      5e:	00 00       	nop
      60:	fa c0       	rjmp	.+500    	; 0x256 <__bad_interrupt>
      62:	00 00       	nop
      64:	f8 c0       	rjmp	.+496    	; 0x256 <__bad_interrupt>
      66:	00 00       	nop
      68:	f6 c0       	rjmp	.+492    	; 0x256 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f4 c0       	rjmp	.+488    	; 0x256 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f2 c0       	rjmp	.+484    	; 0x256 <__bad_interrupt>
      72:	00 00       	nop
      74:	f0 c0       	rjmp	.+480    	; 0x256 <__bad_interrupt>
      76:	00 00       	nop
      78:	ee c0       	rjmp	.+476    	; 0x256 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ec c0       	rjmp	.+472    	; 0x256 <__bad_interrupt>
      7e:	00 00       	nop
      80:	ea c0       	rjmp	.+468    	; 0x256 <__bad_interrupt>
      82:	00 00       	nop
      84:	e8 c0       	rjmp	.+464    	; 0x256 <__bad_interrupt>
      86:	00 00       	nop
      88:	e6 c0       	rjmp	.+460    	; 0x256 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e4 c0       	rjmp	.+456    	; 0x256 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e2 c0       	rjmp	.+452    	; 0x256 <__bad_interrupt>
      92:	00 00       	nop
      94:	e0 c0       	rjmp	.+448    	; 0x256 <__bad_interrupt>
      96:	00 00       	nop
      98:	de c0       	rjmp	.+444    	; 0x256 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	dc c0       	rjmp	.+440    	; 0x256 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	da c0       	rjmp	.+436    	; 0x256 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d8 c0       	rjmp	.+432    	; 0x256 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d6 c0       	rjmp	.+428    	; 0x256 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d4 c0       	rjmp	.+424    	; 0x256 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d2 c0       	rjmp	.+420    	; 0x256 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d0 c0       	rjmp	.+416    	; 0x256 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ce c0       	rjmp	.+412    	; 0x256 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	cc c0       	rjmp	.+408    	; 0x256 <__bad_interrupt>
      be:	00 00       	nop
      c0:	ca c0       	rjmp	.+404    	; 0x256 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c8 c0       	rjmp	.+400    	; 0x256 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c6 c0       	rjmp	.+396    	; 0x256 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c4 c0       	rjmp	.+392    	; 0x256 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c2 c0       	rjmp	.+388    	; 0x256 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c0 c0       	rjmp	.+384    	; 0x256 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	be c0       	rjmp	.+380    	; 0x256 <__bad_interrupt>
      da:	00 00       	nop
      dc:	bc c0       	rjmp	.+376    	; 0x256 <__bad_interrupt>
      de:	00 00       	nop
      e0:	ba c0       	rjmp	.+372    	; 0x256 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b8 c0       	rjmp	.+368    	; 0x256 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 52 0f 	jmp	0x1ea4	; 0x1ea4 <__vector_58>
      ec:	0c 94 a1 0f 	jmp	0x1f42	; 0x1f42 <__vector_59>
      f0:	b2 c0       	rjmp	.+356    	; 0x256 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b0 c0       	rjmp	.+352    	; 0x256 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ae c0       	rjmp	.+348    	; 0x256 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ac c0       	rjmp	.+344    	; 0x256 <__bad_interrupt>
      fe:	00 00       	nop
     100:	aa c0       	rjmp	.+340    	; 0x256 <__bad_interrupt>
     102:	00 00       	nop
     104:	a8 c0       	rjmp	.+336    	; 0x256 <__bad_interrupt>
     106:	00 00       	nop
     108:	a6 c0       	rjmp	.+332    	; 0x256 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a4 c0       	rjmp	.+328    	; 0x256 <__bad_interrupt>
     10e:	00 00       	nop
     110:	a2 c0       	rjmp	.+324    	; 0x256 <__bad_interrupt>
     112:	00 00       	nop
     114:	a0 c0       	rjmp	.+320    	; 0x256 <__bad_interrupt>
     116:	00 00       	nop
     118:	9e c0       	rjmp	.+316    	; 0x256 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	9c c0       	rjmp	.+312    	; 0x256 <__bad_interrupt>
     11e:	00 00       	nop
     120:	9a c0       	rjmp	.+308    	; 0x256 <__bad_interrupt>
     122:	00 00       	nop
     124:	98 c0       	rjmp	.+304    	; 0x256 <__bad_interrupt>
     126:	00 00       	nop
     128:	96 c0       	rjmp	.+300    	; 0x256 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	94 c0       	rjmp	.+296    	; 0x256 <__bad_interrupt>
     12e:	00 00       	nop
     130:	92 c0       	rjmp	.+292    	; 0x256 <__bad_interrupt>
     132:	00 00       	nop
     134:	90 c0       	rjmp	.+288    	; 0x256 <__bad_interrupt>
     136:	00 00       	nop
     138:	8e c0       	rjmp	.+284    	; 0x256 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	8c c0       	rjmp	.+280    	; 0x256 <__bad_interrupt>
     13e:	00 00       	nop
     140:	8a c0       	rjmp	.+276    	; 0x256 <__bad_interrupt>
     142:	00 00       	nop
     144:	88 c0       	rjmp	.+272    	; 0x256 <__bad_interrupt>
     146:	00 00       	nop
     148:	86 c0       	rjmp	.+268    	; 0x256 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	84 c0       	rjmp	.+264    	; 0x256 <__bad_interrupt>
     14e:	00 00       	nop
     150:	82 c0       	rjmp	.+260    	; 0x256 <__bad_interrupt>
     152:	00 00       	nop
     154:	80 c0       	rjmp	.+256    	; 0x256 <__bad_interrupt>
     156:	00 00       	nop
     158:	7e c0       	rjmp	.+252    	; 0x256 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	7c c0       	rjmp	.+248    	; 0x256 <__bad_interrupt>
     15e:	00 00       	nop
     160:	7a c0       	rjmp	.+244    	; 0x256 <__bad_interrupt>
     162:	00 00       	nop
     164:	78 c0       	rjmp	.+240    	; 0x256 <__bad_interrupt>
     166:	00 00       	nop
     168:	76 c0       	rjmp	.+236    	; 0x256 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	74 c0       	rjmp	.+232    	; 0x256 <__bad_interrupt>
     16e:	00 00       	nop
     170:	72 c0       	rjmp	.+228    	; 0x256 <__bad_interrupt>
     172:	00 00       	nop
     174:	70 c0       	rjmp	.+224    	; 0x256 <__bad_interrupt>
     176:	00 00       	nop
     178:	6e c0       	rjmp	.+220    	; 0x256 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6c c0       	rjmp	.+216    	; 0x256 <__bad_interrupt>
     17e:	00 00       	nop
     180:	6a c0       	rjmp	.+212    	; 0x256 <__bad_interrupt>
     182:	00 00       	nop
     184:	68 c0       	rjmp	.+208    	; 0x256 <__bad_interrupt>
     186:	00 00       	nop
     188:	66 c0       	rjmp	.+204    	; 0x256 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	64 c0       	rjmp	.+200    	; 0x256 <__bad_interrupt>
     18e:	00 00       	nop
     190:	62 c0       	rjmp	.+196    	; 0x256 <__bad_interrupt>
     192:	00 00       	nop
     194:	60 c0       	rjmp	.+192    	; 0x256 <__bad_interrupt>
     196:	00 00       	nop
     198:	5e c0       	rjmp	.+188    	; 0x256 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5c c0       	rjmp	.+184    	; 0x256 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5a c0       	rjmp	.+180    	; 0x256 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	58 c0       	rjmp	.+176    	; 0x256 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	56 c0       	rjmp	.+172    	; 0x256 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	54 c0       	rjmp	.+168    	; 0x256 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	52 c0       	rjmp	.+164    	; 0x256 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	50 c0       	rjmp	.+160    	; 0x256 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	4e c0       	rjmp	.+156    	; 0x256 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	4c c0       	rjmp	.+152    	; 0x256 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	4a c0       	rjmp	.+148    	; 0x256 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	48 c0       	rjmp	.+144    	; 0x256 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	46 c0       	rjmp	.+140    	; 0x256 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	44 c0       	rjmp	.+136    	; 0x256 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	42 c0       	rjmp	.+132    	; 0x256 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	40 c0       	rjmp	.+128    	; 0x256 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	3e c0       	rjmp	.+124    	; 0x256 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3c c0       	rjmp	.+120    	; 0x256 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3a c0       	rjmp	.+116    	; 0x256 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	38 c0       	rjmp	.+112    	; 0x256 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	36 c0       	rjmp	.+108    	; 0x256 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	34 c0       	rjmp	.+104    	; 0x256 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	32 c0       	rjmp	.+100    	; 0x256 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 90 0d 	jmp	0x1b20	; 0x1b20 <__vector_125>
     1f8:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__vector_126>
     1fc:	a2 09       	sbc	r26, r2
     1fe:	90 09       	sbc	r25, r0
     200:	93 09       	sbc	r25, r3
     202:	96 09       	sbc	r25, r6
     204:	99 09       	sbc	r25, r9
     206:	9c 09       	sbc	r25, r12
     208:	9f 09       	sbc	r25, r15

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e3       	ldi	r29, 0x3F	; 63
     214:	de bf       	out	0x3e, r29	; 62
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0c bf       	out	0x3c, r16	; 60
     21a:	18 be       	out	0x38, r1	; 56
     21c:	19 be       	out	0x39, r1	; 57
     21e:	1a be       	out	0x3a, r1	; 58
     220:	1b be       	out	0x3b, r1	; 59

00000222 <__do_copy_data>:
     222:	10 e2       	ldi	r17, 0x20	; 32
     224:	a0 e0       	ldi	r26, 0x00	; 0
     226:	b0 e2       	ldi	r27, 0x20	; 32
     228:	ea ef       	ldi	r30, 0xFA	; 250
     22a:	fc e2       	ldi	r31, 0x2C	; 44
     22c:	00 e0       	ldi	r16, 0x00	; 0
     22e:	0b bf       	out	0x3b, r16	; 59
     230:	02 c0       	rjmp	.+4      	; 0x236 <__do_copy_data+0x14>
     232:	07 90       	elpm	r0, Z+
     234:	0d 92       	st	X+, r0
     236:	a8 38       	cpi	r26, 0x88	; 136
     238:	b1 07       	cpc	r27, r17
     23a:	d9 f7       	brne	.-10     	; 0x232 <__do_copy_data+0x10>
     23c:	1b be       	out	0x3b, r1	; 59

0000023e <__do_clear_bss>:
     23e:	23 e2       	ldi	r18, 0x23	; 35
     240:	a8 e8       	ldi	r26, 0x88	; 136
     242:	b0 e2       	ldi	r27, 0x20	; 32
     244:	01 c0       	rjmp	.+2      	; 0x248 <.do_clear_bss_start>

00000246 <.do_clear_bss_loop>:
     246:	1d 92       	st	X+, r1

00000248 <.do_clear_bss_start>:
     248:	a9 32       	cpi	r26, 0x29	; 41
     24a:	b2 07       	cpc	r27, r18
     24c:	e1 f7       	brne	.-8      	; 0x246 <.do_clear_bss_loop>
     24e:	0e 94 c1 14 	call	0x2982	; 0x2982 <main>
     252:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <_exit>

00000256 <__bad_interrupt>:
     256:	d4 ce       	rjmp	.-600    	; 0x0 <__vectors>

00000258 <ui_init>:
{

}

void ui_com_close(uint8_t port)
{
     258:	08 95       	ret

0000025a <ui_powerdown>:
     25a:	08 95       	ret

0000025c <ui_com_rx_start>:

}

void ui_com_rx_start(void)
{
     25c:	08 95       	ret

0000025e <ui_com_rx_stop>:

}

void ui_com_rx_stop(void)
{
     25e:	08 95       	ret

00000260 <ui_com_tx_start>:

}

void ui_com_tx_start(void)
{
     260:	08 95       	ret

00000262 <ui_com_tx_stop>:

}

void ui_com_tx_stop(void)
{
     262:	08 95       	ret

00000264 <ui_com_error>:

}

void ui_com_error(void)
{
     264:	08 95       	ret

00000266 <ui_com_overflow>:

}

void ui_com_overflow(void)
{
     266:	08 95       	ret

00000268 <udi_cdc_comm_enable>:
}

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}
     268:	10 92 9e 21 	sts	0x219E, r1
     26c:	10 92 aa 21 	sts	0x21AA, r1
     270:	10 92 ab 21 	sts	0x21AB, r1
     274:	81 ea       	ldi	r24, 0xA1	; 161
     276:	80 93 a0 21 	sts	0x21A0, r24
     27a:	80 e2       	ldi	r24, 0x20	; 32
     27c:	80 93 a1 21 	sts	0x21A1, r24
     280:	10 92 a2 21 	sts	0x21A2, r1
     284:	10 92 a3 21 	sts	0x21A3, r1
     288:	10 92 a4 21 	sts	0x21A4, r1
     28c:	10 92 a5 21 	sts	0x21A5, r1
     290:	82 e0       	ldi	r24, 0x02	; 2
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	80 93 a6 21 	sts	0x21A6, r24
     298:	90 93 a7 21 	sts	0x21A7, r25
     29c:	10 92 a8 21 	sts	0x21A8, r1
     2a0:	10 92 a9 21 	sts	0x21A9, r1
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	92 ec       	ldi	r25, 0xC2	; 194
     2a8:	a1 e0       	ldi	r26, 0x01	; 1
     2aa:	b0 e0       	ldi	r27, 0x00	; 0
     2ac:	80 93 ae 21 	sts	0x21AE, r24
     2b0:	90 93 af 21 	sts	0x21AF, r25
     2b4:	a0 93 b0 21 	sts	0x21B0, r26
     2b8:	b0 93 b1 21 	sts	0x21B1, r27
     2bc:	10 92 b2 21 	sts	0x21B2, r1
     2c0:	10 92 b3 21 	sts	0x21B3, r1
     2c4:	88 e0       	ldi	r24, 0x08	; 8
     2c6:	80 93 b4 21 	sts	0x21B4, r24
     2ca:	80 91 9e 21 	lds	r24, 0x219E
     2ce:	8f 5f       	subi	r24, 0xFF	; 255
     2d0:	80 93 9e 21 	sts	0x219E, r24
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	08 95       	ret

000002d8 <udi_cdc_comm_disable>:
     2d8:	80 91 9e 21 	lds	r24, 0x219E
     2dc:	81 50       	subi	r24, 0x01	; 1
     2de:	80 93 9e 21 	sts	0x219E, r24
     2e2:	08 95       	ret

000002e4 <udi_cdc_data_disable>:
     2e4:	80 91 9d 21 	lds	r24, 0x219D
     2e8:	81 50       	subi	r24, 0x01	; 1
     2ea:	80 93 9d 21 	sts	0x219D, r24
     2ee:	80 91 9d 21 	lds	r24, 0x219D
     2f2:	10 92 9c 21 	sts	0x219C, r1
     2f6:	08 95       	ret

000002f8 <udi_cdc_data_setup>:
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	08 95       	ret

000002fc <udi_cdc_getsetting>:
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	08 95       	ret

00000300 <udi_cdc_comm_setup>:
     300:	80 91 0f 23 	lds	r24, 0x230F
     304:	88 23       	and	r24, r24
     306:	dc f4       	brge	.+54     	; 0x33e <udi_cdc_comm_setup+0x3e>
     308:	80 76       	andi	r24, 0x60	; 96
     30a:	80 32       	cpi	r24, 0x20	; 32
     30c:	e9 f5       	brne	.+122    	; 0x388 <udi_cdc_comm_setup+0x88>
     30e:	80 91 10 23 	lds	r24, 0x2310
     312:	81 32       	cpi	r24, 0x21	; 33
     314:	d9 f5       	brne	.+118    	; 0x38c <udi_cdc_comm_setup+0x8c>
     316:	80 91 15 23 	lds	r24, 0x2315
     31a:	90 91 16 23 	lds	r25, 0x2316
     31e:	07 97       	sbiw	r24, 0x07	; 7
     320:	b9 f5       	brne	.+110    	; 0x390 <udi_cdc_comm_setup+0x90>
     322:	8e ea       	ldi	r24, 0xAE	; 174
     324:	91 e2       	ldi	r25, 0x21	; 33
     326:	80 93 17 23 	sts	0x2317, r24
     32a:	90 93 18 23 	sts	0x2318, r25
     32e:	87 e0       	ldi	r24, 0x07	; 7
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	80 93 19 23 	sts	0x2319, r24
     336:	90 93 1a 23 	sts	0x231A, r25
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	08 95       	ret
     33e:	80 76       	andi	r24, 0x60	; 96
     340:	80 32       	cpi	r24, 0x20	; 32
     342:	41 f5       	brne	.+80     	; 0x394 <udi_cdc_comm_setup+0x94>
     344:	80 91 10 23 	lds	r24, 0x2310
     348:	80 32       	cpi	r24, 0x20	; 32
     34a:	21 f0       	breq	.+8      	; 0x354 <udi_cdc_comm_setup+0x54>
     34c:	82 32       	cpi	r24, 0x22	; 34
     34e:	21 f5       	brne	.+72     	; 0x398 <udi_cdc_comm_setup+0x98>
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	08 95       	ret
     354:	80 91 15 23 	lds	r24, 0x2315
     358:	90 91 16 23 	lds	r25, 0x2316
     35c:	07 97       	sbiw	r24, 0x07	; 7
     35e:	f1 f4       	brne	.+60     	; 0x39c <udi_cdc_comm_setup+0x9c>
     360:	80 ed       	ldi	r24, 0xD0	; 208
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	80 93 1b 23 	sts	0x231B, r24
     368:	90 93 1c 23 	sts	0x231C, r25
     36c:	8e ea       	ldi	r24, 0xAE	; 174
     36e:	91 e2       	ldi	r25, 0x21	; 33
     370:	80 93 17 23 	sts	0x2317, r24
     374:	90 93 18 23 	sts	0x2318, r25
     378:	87 e0       	ldi	r24, 0x07	; 7
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	80 93 19 23 	sts	0x2319, r24
     380:	90 93 1a 23 	sts	0x231A, r25
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	08 95       	ret
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	08 95       	ret
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	08 95       	ret
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	08 95       	ret
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	08 95       	ret
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	08 95       	ret
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	08 95       	ret

000003a0 <udi_cdc_line_coding_received>:
     3a0:	08 95       	ret

000003a2 <udi_cdc_tx_send>:
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	80 91 8b 20 	lds	r24, 0x208B
     3b0:	81 11       	cpse	r24, r1
     3b2:	9c c0       	rjmp	.+312    	; 0x4ec <udi_cdc_tx_send+0x14a>
     3b4:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <udd_is_high_speed>
     3b8:	88 23       	and	r24, r24
     3ba:	51 f0       	breq	.+20     	; 0x3d0 <udi_cdc_tx_send+0x2e>
     3bc:	c0 91 8c 20 	lds	r28, 0x208C
     3c0:	d0 91 8d 20 	lds	r29, 0x208D
     3c4:	0e 94 df 0b 	call	0x17be	; 0x17be <udd_get_micro_frame_number>
     3c8:	c8 17       	cp	r28, r24
     3ca:	d9 07       	cpc	r29, r25
     3cc:	59 f4       	brne	.+22     	; 0x3e4 <udi_cdc_tx_send+0x42>
     3ce:	8e c0       	rjmp	.+284    	; 0x4ec <udi_cdc_tx_send+0x14a>
     3d0:	c0 91 8c 20 	lds	r28, 0x208C
     3d4:	d0 91 8d 20 	lds	r29, 0x208D
     3d8:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <udd_get_frame_number>
     3dc:	c8 17       	cp	r28, r24
     3de:	d9 07       	cpc	r29, r25
     3e0:	09 f4       	brne	.+2      	; 0x3e4 <udi_cdc_tx_send+0x42>
     3e2:	84 c0       	rjmp	.+264    	; 0x4ec <udi_cdc_tx_send+0x14a>
     3e4:	df b7       	in	r29, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	c0 91 8e 20 	lds	r28, 0x208E
     3ec:	ec 2f       	mov	r30, r28
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	ee 0f       	add	r30, r30
     3f2:	ff 1f       	adc	r31, r31
     3f4:	e1 57       	subi	r30, 0x71	; 113
     3f6:	ff 4d       	sbci	r31, 0xDF	; 223
     3f8:	80 81       	ld	r24, Z
     3fa:	91 81       	ldd	r25, Z+1	; 0x01
     3fc:	89 2b       	or	r24, r25
     3fe:	09 f5       	brne	.+66     	; 0x442 <udi_cdc_tx_send+0xa0>
     400:	80 91 88 20 	lds	r24, 0x2088
     404:	90 91 89 20 	lds	r25, 0x2089
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	80 93 88 20 	sts	0x2088, r24
     40e:	90 93 89 20 	sts	0x2089, r25
     412:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <udd_is_high_speed>
     416:	81 11       	cpse	r24, r1
     418:	07 c0       	rjmp	.+14     	; 0x428 <udi_cdc_tx_send+0x86>
     41a:	80 91 88 20 	lds	r24, 0x2088
     41e:	90 91 89 20 	lds	r25, 0x2089
     422:	84 36       	cpi	r24, 0x64	; 100
     424:	91 05       	cpc	r25, r1
     426:	58 f0       	brcs	.+22     	; 0x43e <udi_cdc_tx_send+0x9c>
     428:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <udd_is_high_speed>
     42c:	88 23       	and	r24, r24
     42e:	49 f0       	breq	.+18     	; 0x442 <udi_cdc_tx_send+0xa0>
     430:	80 91 88 20 	lds	r24, 0x2088
     434:	90 91 89 20 	lds	r25, 0x2089
     438:	80 32       	cpi	r24, 0x20	; 32
     43a:	93 40       	sbci	r25, 0x03	; 3
     43c:	10 f4       	brcc	.+4      	; 0x442 <udi_cdc_tx_send+0xa0>
     43e:	df bf       	out	0x3f, r29	; 63
     440:	55 c0       	rjmp	.+170    	; 0x4ec <udi_cdc_tx_send+0x14a>
     442:	10 92 88 20 	sts	0x2088, r1
     446:	10 92 89 20 	sts	0x2089, r1
     44a:	80 91 8a 20 	lds	r24, 0x208A
     44e:	81 11       	cpse	r24, r1
     450:	06 c0       	rjmp	.+12     	; 0x45e <udi_cdc_tx_send+0xbc>
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	c1 11       	cpse	r28, r1
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	80 93 8e 20 	sts	0x208E, r24
     45c:	04 c0       	rjmp	.+8      	; 0x466 <udi_cdc_tx_send+0xc4>
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	c1 11       	cpse	r28, r1
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	c8 2f       	mov	r28, r24
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	80 93 8b 20 	sts	0x208B, r24
     46c:	df bf       	out	0x3f, r29	; 63
     46e:	d0 e0       	ldi	r29, 0x00	; 0
     470:	fe 01       	movw	r30, r28
     472:	ee 0f       	add	r30, r30
     474:	ff 1f       	adc	r31, r31
     476:	e1 57       	subi	r30, 0x71	; 113
     478:	ff 4d       	sbci	r31, 0xDF	; 223
     47a:	ff 24       	eor	r15, r15
     47c:	f3 94       	inc	r15
     47e:	80 81       	ld	r24, Z
     480:	91 81       	ldd	r25, Z+1	; 0x01
     482:	80 34       	cpi	r24, 0x40	; 64
     484:	91 05       	cpc	r25, r1
     486:	09 f4       	brne	.+2      	; 0x48a <udi_cdc_tx_send+0xe8>
     488:	f1 2c       	mov	r15, r1
     48a:	ff 20       	and	r15, r15
     48c:	91 f0       	breq	.+36     	; 0x4b2 <udi_cdc_tx_send+0x110>
     48e:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <udd_is_high_speed>
     492:	88 23       	and	r24, r24
     494:	39 f0       	breq	.+14     	; 0x4a4 <udi_cdc_tx_send+0x102>
     496:	0e 94 df 0b 	call	0x17be	; 0x17be <udd_get_micro_frame_number>
     49a:	80 93 8c 20 	sts	0x208C, r24
     49e:	90 93 8d 20 	sts	0x208D, r25
     4a2:	0b c0       	rjmp	.+22     	; 0x4ba <udi_cdc_tx_send+0x118>
     4a4:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <udd_get_frame_number>
     4a8:	80 93 8c 20 	sts	0x208C, r24
     4ac:	90 93 8d 20 	sts	0x208D, r25
     4b0:	04 c0       	rjmp	.+8      	; 0x4ba <udi_cdc_tx_send+0x118>
     4b2:	10 92 8c 20 	sts	0x208C, r1
     4b6:	10 92 8d 20 	sts	0x208D, r1
     4ba:	fe 01       	movw	r30, r28
     4bc:	ee 0f       	add	r30, r30
     4be:	ff 1f       	adc	r31, r31
     4c0:	e1 57       	subi	r30, 0x71	; 113
     4c2:	ff 4d       	sbci	r31, 0xDF	; 223
     4c4:	20 81       	ld	r18, Z
     4c6:	31 81       	ldd	r19, Z+1	; 0x01
     4c8:	ae 01       	movw	r20, r28
     4ca:	00 24       	eor	r0, r0
     4cc:	56 95       	lsr	r21
     4ce:	47 95       	ror	r20
     4d0:	07 94       	ror	r0
     4d2:	56 95       	lsr	r21
     4d4:	47 95       	ror	r20
     4d6:	07 94       	ror	r0
     4d8:	54 2f       	mov	r21, r20
     4da:	40 2d       	mov	r20, r0
     4dc:	4c 56       	subi	r20, 0x6C	; 108
     4de:	5f 4d       	sbci	r21, 0xDF	; 223
     4e0:	0c e7       	ldi	r16, 0x7C	; 124
     4e2:	12 e0       	ldi	r17, 0x02	; 2
     4e4:	6f 2d       	mov	r22, r15
     4e6:	81 e8       	ldi	r24, 0x81	; 129
     4e8:	0e 94 91 0c 	call	0x1922	; 0x1922 <udd_ep_run>
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	ff 90       	pop	r15
     4f6:	08 95       	ret

000004f8 <udi_cdc_data_sent>:
     4f8:	81 11       	cpse	r24, r1
     4fa:	15 c0       	rjmp	.+42     	; 0x526 <udi_cdc_data_sent+0x2e>
     4fc:	20 91 8e 20 	lds	r18, 0x208E
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	22 23       	and	r18, r18
     506:	11 f0       	breq	.+4      	; 0x50c <udi_cdc_data_sent+0x14>
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	fc 01       	movw	r30, r24
     50e:	ee 0f       	add	r30, r30
     510:	ff 1f       	adc	r31, r31
     512:	e1 57       	subi	r30, 0x71	; 113
     514:	ff 4d       	sbci	r31, 0xDF	; 223
     516:	10 82       	st	Z, r1
     518:	11 82       	std	Z+1, r1	; 0x01
     51a:	10 92 8a 20 	sts	0x208A, r1
     51e:	10 92 8b 20 	sts	0x208B, r1
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	3e cf       	rjmp	.-388    	; 0x3a2 <udi_cdc_tx_send>
     526:	08 95       	ret

00000528 <udi_cdc_data_sof_notify>:
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	3b cf       	rjmp	.-394    	; 0x3a2 <udi_cdc_tx_send>
     52c:	08 95       	ret

0000052e <udi_cdc_ctrl_state_notify>:
     52e:	0f 93       	push	r16
     530:	1f 93       	push	r17
     532:	86 2f       	mov	r24, r22
     534:	90 91 ac 21 	lds	r25, 0x21AC
     538:	91 11       	cpse	r25, r1
     53a:	1e c0       	rjmp	.+60     	; 0x578 <udi_cdc_ctrl_state_notify+0x4a>
     53c:	40 91 aa 21 	lds	r20, 0x21AA
     540:	50 91 ab 21 	lds	r21, 0x21AB
     544:	20 91 a8 21 	lds	r18, 0x21A8
     548:	30 91 a9 21 	lds	r19, 0x21A9
     54c:	42 17       	cp	r20, r18
     54e:	53 07       	cpc	r21, r19
     550:	99 f0       	breq	.+38     	; 0x578 <udi_cdc_ctrl_state_notify+0x4a>
     552:	20 91 aa 21 	lds	r18, 0x21AA
     556:	30 91 ab 21 	lds	r19, 0x21AB
     55a:	20 93 a8 21 	sts	0x21A8, r18
     55e:	30 93 a9 21 	sts	0x21A9, r19
     562:	0f ed       	ldi	r16, 0xDF	; 223
     564:	12 e0       	ldi	r17, 0x02	; 2
     566:	2a e0       	ldi	r18, 0x0A	; 10
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	40 ea       	ldi	r20, 0xA0	; 160
     56c:	51 e2       	ldi	r21, 0x21	; 33
     56e:	60 e0       	ldi	r22, 0x00	; 0
     570:	0e 94 91 0c 	call	0x1922	; 0x1922 <udd_ep_run>
     574:	80 93 ac 21 	sts	0x21AC, r24
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	08 95       	ret

0000057e <udi_cdc_ctrl_state_change>:
     57e:	2f b7       	in	r18, 0x3f	; 63
     580:	f8 94       	cli
     582:	66 23       	and	r22, r22
     584:	59 f0       	breq	.+22     	; 0x59c <udi_cdc_ctrl_state_change+0x1e>
     586:	80 91 aa 21 	lds	r24, 0x21AA
     58a:	90 91 ab 21 	lds	r25, 0x21AB
     58e:	48 2b       	or	r20, r24
     590:	59 2b       	or	r21, r25
     592:	40 93 aa 21 	sts	0x21AA, r20
     596:	50 93 ab 21 	sts	0x21AB, r21
     59a:	0c c0       	rjmp	.+24     	; 0x5b4 <udi_cdc_ctrl_state_change+0x36>
     59c:	80 91 aa 21 	lds	r24, 0x21AA
     5a0:	90 91 ab 21 	lds	r25, 0x21AB
     5a4:	40 95       	com	r20
     5a6:	50 95       	com	r21
     5a8:	48 23       	and	r20, r24
     5aa:	59 23       	and	r21, r25
     5ac:	40 93 aa 21 	sts	0x21AA, r20
     5b0:	50 93 ab 21 	sts	0x21AB, r21
     5b4:	2f bf       	out	0x3f, r18	; 63
     5b6:	62 e8       	ldi	r22, 0x82	; 130
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	b9 cf       	rjmp	.-142    	; 0x52e <udi_cdc_ctrl_state_notify>
     5bc:	08 95       	ret

000005be <udi_cdc_serial_state_msg_sent>:
     5be:	10 92 ac 21 	sts	0x21AC, r1
     5c2:	80 91 aa 21 	lds	r24, 0x21AA
     5c6:	90 91 ab 21 	lds	r25, 0x21AB
     5ca:	83 78       	andi	r24, 0x83	; 131
     5cc:	80 93 aa 21 	sts	0x21AA, r24
     5d0:	90 93 ab 21 	sts	0x21AB, r25
     5d4:	e8 ea       	ldi	r30, 0xA8	; 168
     5d6:	f1 e2       	ldi	r31, 0x21	; 33
     5d8:	80 81       	ld	r24, Z
     5da:	91 81       	ldd	r25, Z+1	; 0x01
     5dc:	83 78       	andi	r24, 0x83	; 131
     5de:	80 83       	st	Z, r24
     5e0:	91 83       	std	Z+1, r25	; 0x01
     5e2:	64 2f       	mov	r22, r20
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	a3 cf       	rjmp	.-186    	; 0x52e <udi_cdc_ctrl_state_notify>
     5e8:	08 95       	ret

000005ea <udi_cdc_signal_framing_error>:
     5ea:	40 e1       	ldi	r20, 0x10	; 16
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	61 e0       	ldi	r22, 0x01	; 1
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	c5 cf       	rjmp	.-118    	; 0x57e <udi_cdc_ctrl_state_change>
     5f4:	08 95       	ret

000005f6 <udi_cdc_signal_overrun>:
     5f6:	40 e4       	ldi	r20, 0x40	; 64
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	61 e0       	ldi	r22, 0x01	; 1
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	bf cf       	rjmp	.-130    	; 0x57e <udi_cdc_ctrl_state_change>
     600:	08 95       	ret

00000602 <udi_cdc_multi_get_nb_received_data>:
     602:	4f b7       	in	r20, 0x3f	; 63
     604:	f8 94       	cli
     606:	20 91 15 21 	lds	r18, 0x2115
     60a:	30 91 16 21 	lds	r19, 0x2116
     60e:	e0 91 17 21 	lds	r30, 0x2117
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	ee 0f       	add	r30, r30
     616:	ff 1f       	adc	r31, r31
     618:	e8 5e       	subi	r30, 0xE8	; 232
     61a:	fe 4d       	sbci	r31, 0xDE	; 222
     61c:	80 81       	ld	r24, Z
     61e:	91 81       	ldd	r25, Z+1	; 0x01
     620:	82 1b       	sub	r24, r18
     622:	93 0b       	sbc	r25, r19
     624:	4f bf       	out	0x3f, r20	; 63
     626:	08 95       	ret

00000628 <udi_cdc_multi_is_rx_ready>:
     628:	ec df       	rcall	.-40     	; 0x602 <udi_cdc_multi_get_nb_received_data>
     62a:	21 e0       	ldi	r18, 0x01	; 1
     62c:	89 2b       	or	r24, r25
     62e:	09 f4       	brne	.+2      	; 0x632 <udi_cdc_multi_is_rx_ready+0xa>
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	82 2f       	mov	r24, r18
     634:	08 95       	ret

00000636 <udi_cdc_rx_start>:
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	4f b7       	in	r20, 0x3f	; 63
     640:	f8 94       	cli
     642:	50 91 17 21 	lds	r21, 0x2117
     646:	80 91 14 21 	lds	r24, 0x2114
     64a:	81 11       	cpse	r24, r1
     64c:	10 c0       	rjmp	.+32     	; 0x66e <udi_cdc_rx_start+0x38>
     64e:	20 91 15 21 	lds	r18, 0x2115
     652:	30 91 16 21 	lds	r19, 0x2116
     656:	c5 2f       	mov	r28, r21
     658:	d0 e0       	ldi	r29, 0x00	; 0
     65a:	fe 01       	movw	r30, r28
     65c:	ee 0f       	add	r30, r30
     65e:	ff 1f       	adc	r31, r31
     660:	e8 5e       	subi	r30, 0xE8	; 232
     662:	fe 4d       	sbci	r31, 0xDE	; 222
     664:	80 81       	ld	r24, Z
     666:	91 81       	ldd	r25, Z+1	; 0x01
     668:	28 17       	cp	r18, r24
     66a:	39 07       	cpc	r19, r25
     66c:	18 f4       	brcc	.+6      	; 0x674 <udi_cdc_rx_start+0x3e>
     66e:	4f bf       	out	0x3f, r20	; 63
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	23 c0       	rjmp	.+70     	; 0x6ba <udi_cdc_rx_start+0x84>
     674:	10 92 15 21 	sts	0x2115, r1
     678:	10 92 16 21 	sts	0x2116, r1
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	51 11       	cpse	r21, r1
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	80 93 17 21 	sts	0x2117, r24
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	80 93 14 21 	sts	0x2114, r24
     68c:	4f bf       	out	0x3f, r20	; 63
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	cb df       	rcall	.-106    	; 0x628 <udi_cdc_multi_is_rx_ready>
     692:	ae 01       	movw	r20, r28
     694:	00 24       	eor	r0, r0
     696:	56 95       	lsr	r21
     698:	47 95       	ror	r20
     69a:	07 94       	ror	r0
     69c:	56 95       	lsr	r21
     69e:	47 95       	ror	r20
     6a0:	07 94       	ror	r0
     6a2:	54 2f       	mov	r21, r20
     6a4:	40 2d       	mov	r20, r0
     6a6:	44 5e       	subi	r20, 0xE4	; 228
     6a8:	5e 4d       	sbci	r21, 0xDE	; 222
     6aa:	04 e9       	ldi	r16, 0x94	; 148
     6ac:	13 e0       	ldi	r17, 0x03	; 3
     6ae:	20 e4       	ldi	r18, 0x40	; 64
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	61 e0       	ldi	r22, 0x01	; 1
     6b4:	82 e0       	ldi	r24, 0x02	; 2
     6b6:	0e 94 91 0c 	call	0x1922	; 0x1922 <udd_ep_run>
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	1f 91       	pop	r17
     6c0:	0f 91       	pop	r16
     6c2:	08 95       	ret

000006c4 <udi_cdc_data_enable>:
     6c4:	10 92 9d 21 	sts	0x219D, r1
     6c8:	10 92 8b 20 	sts	0x208B, r1
     6cc:	10 92 8a 20 	sts	0x208A, r1
     6d0:	10 92 8e 20 	sts	0x208E, r1
     6d4:	10 92 8f 20 	sts	0x208F, r1
     6d8:	10 92 90 20 	sts	0x2090, r1
     6dc:	10 92 91 20 	sts	0x2091, r1
     6e0:	10 92 92 20 	sts	0x2092, r1
     6e4:	10 92 8c 20 	sts	0x208C, r1
     6e8:	10 92 8d 20 	sts	0x208D, r1
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	59 de       	rcall	.-846    	; 0x3a2 <udi_cdc_tx_send>
     6f0:	10 92 14 21 	sts	0x2114, r1
     6f4:	10 92 17 21 	sts	0x2117, r1
     6f8:	10 92 18 21 	sts	0x2118, r1
     6fc:	10 92 19 21 	sts	0x2119, r1
     700:	10 92 15 21 	sts	0x2115, r1
     704:	10 92 16 21 	sts	0x2116, r1
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	95 df       	rcall	.-214    	; 0x636 <udi_cdc_rx_start>
     70c:	88 23       	and	r24, r24
     70e:	59 f0       	breq	.+22     	; 0x726 <udi_cdc_data_enable+0x62>
     710:	90 91 9d 21 	lds	r25, 0x219D
     714:	9f 5f       	subi	r25, 0xFF	; 255
     716:	90 93 9d 21 	sts	0x219D, r25
     71a:	90 91 9d 21 	lds	r25, 0x219D
     71e:	91 30       	cpi	r25, 0x01	; 1
     720:	11 f4       	brne	.+4      	; 0x726 <udi_cdc_data_enable+0x62>
     722:	90 93 9c 21 	sts	0x219C, r25
     726:	08 95       	ret

00000728 <udi_cdc_data_received>:
     728:	0f 93       	push	r16
     72a:	1f 93       	push	r17
     72c:	94 2f       	mov	r25, r20
     72e:	81 11       	cpse	r24, r1
     730:	29 c0       	rjmp	.+82     	; 0x784 <udi_cdc_data_received+0x5c>
     732:	80 91 17 21 	lds	r24, 0x2117
     736:	e1 e0       	ldi	r30, 0x01	; 1
     738:	81 11       	cpse	r24, r1
     73a:	e0 e0       	ldi	r30, 0x00	; 0
     73c:	61 15       	cp	r22, r1
     73e:	71 05       	cpc	r23, r1
     740:	b1 f4       	brne	.+44     	; 0x76e <udi_cdc_data_received+0x46>
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	00 24       	eor	r0, r0
     746:	f6 95       	lsr	r31
     748:	e7 95       	ror	r30
     74a:	07 94       	ror	r0
     74c:	f6 95       	lsr	r31
     74e:	e7 95       	ror	r30
     750:	07 94       	ror	r0
     752:	fe 2f       	mov	r31, r30
     754:	e0 2d       	mov	r30, r0
     756:	af 01       	movw	r20, r30
     758:	44 5e       	subi	r20, 0xE4	; 228
     75a:	5e 4d       	sbci	r21, 0xDE	; 222
     75c:	04 e9       	ldi	r16, 0x94	; 148
     75e:	13 e0       	ldi	r17, 0x03	; 3
     760:	20 e4       	ldi	r18, 0x40	; 64
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	61 e0       	ldi	r22, 0x01	; 1
     766:	89 2f       	mov	r24, r25
     768:	0e 94 91 0c 	call	0x1922	; 0x1922 <udd_ep_run>
     76c:	0b c0       	rjmp	.+22     	; 0x784 <udi_cdc_data_received+0x5c>
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	ee 0f       	add	r30, r30
     772:	ff 1f       	adc	r31, r31
     774:	e8 5e       	subi	r30, 0xE8	; 232
     776:	fe 4d       	sbci	r31, 0xDE	; 222
     778:	60 83       	st	Z, r22
     77a:	71 83       	std	Z+1, r23	; 0x01
     77c:	10 92 14 21 	sts	0x2114, r1
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	59 df       	rcall	.-334    	; 0x636 <udi_cdc_rx_start>
     784:	1f 91       	pop	r17
     786:	0f 91       	pop	r16
     788:	08 95       	ret

0000078a <udi_cdc_is_rx_ready>:
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	4d cf       	rjmp	.-358    	; 0x628 <udi_cdc_multi_is_rx_ready>
     78e:	08 95       	ret

00000790 <udi_cdc_multi_getc>:
     790:	1f 93       	push	r17
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	11 e0       	ldi	r17, 0x01	; 1
     798:	80 91 b4 21 	lds	r24, 0x21B4
     79c:	89 30       	cpi	r24, 0x09	; 9
     79e:	09 f0       	breq	.+2      	; 0x7a2 <udi_cdc_multi_getc+0x12>
     7a0:	10 e0       	ldi	r17, 0x00	; 0
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	3f b7       	in	r19, 0x3f	; 63
     7a8:	f8 94       	cli
     7aa:	80 91 15 21 	lds	r24, 0x2115
     7ae:	90 91 16 21 	lds	r25, 0x2116
     7b2:	20 91 17 21 	lds	r18, 0x2117
     7b6:	3f bf       	out	0x3f, r19	; 63
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	f9 01       	movw	r30, r18
     7bc:	ee 0f       	add	r30, r30
     7be:	ff 1f       	adc	r31, r31
     7c0:	e8 5e       	subi	r30, 0xE8	; 232
     7c2:	fe 4d       	sbci	r31, 0xDE	; 222
     7c4:	40 81       	ld	r20, Z
     7c6:	51 81       	ldd	r21, Z+1	; 0x01
     7c8:	84 17       	cp	r24, r20
     7ca:	95 07       	cpc	r25, r21
     7cc:	30 f0       	brcs	.+12     	; 0x7da <udi_cdc_multi_getc+0x4a>
     7ce:	80 91 9c 21 	lds	r24, 0x219C
     7d2:	81 11       	cpse	r24, r1
     7d4:	e8 cf       	rjmp	.-48     	; 0x7a6 <udi_cdc_multi_getc+0x16>
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	20 c0       	rjmp	.+64     	; 0x81a <udi_cdc_multi_getc+0x8a>
     7da:	f9 01       	movw	r30, r18
     7dc:	00 24       	eor	r0, r0
     7de:	f6 95       	lsr	r31
     7e0:	e7 95       	ror	r30
     7e2:	07 94       	ror	r0
     7e4:	f6 95       	lsr	r31
     7e6:	e7 95       	ror	r30
     7e8:	07 94       	ror	r0
     7ea:	fe 2f       	mov	r31, r30
     7ec:	e0 2d       	mov	r30, r0
     7ee:	e8 0f       	add	r30, r24
     7f0:	f9 1f       	adc	r31, r25
     7f2:	e4 5e       	subi	r30, 0xE4	; 228
     7f4:	fe 4d       	sbci	r31, 0xDE	; 222
     7f6:	20 81       	ld	r18, Z
     7f8:	eb 01       	movw	r28, r22
     7fa:	c2 2b       	or	r28, r18
     7fc:	01 96       	adiw	r24, 0x01	; 1
     7fe:	80 93 15 21 	sts	0x2115, r24
     802:	90 93 16 21 	sts	0x2116, r25
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	16 df       	rcall	.-468    	; 0x636 <udi_cdc_rx_start>
     80a:	11 23       	and	r17, r17
     80c:	21 f0       	breq	.+8      	; 0x816 <udi_cdc_multi_getc+0x86>
     80e:	7c 2f       	mov	r23, r28
     810:	66 27       	eor	r22, r22
     812:	10 e0       	ldi	r17, 0x00	; 0
     814:	c8 cf       	rjmp	.-112    	; 0x7a6 <udi_cdc_multi_getc+0x16>
     816:	8c 2f       	mov	r24, r28
     818:	9d 2f       	mov	r25, r29
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	1f 91       	pop	r17
     820:	08 95       	ret

00000822 <udi_cdc_getc>:
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	b5 cf       	rjmp	.-150    	; 0x790 <udi_cdc_multi_getc>
     826:	08 95       	ret

00000828 <udi_cdc_multi_get_free_tx_buffer>:
     828:	9f b7       	in	r25, 0x3f	; 63
     82a:	f8 94       	cli
     82c:	80 91 8e 20 	lds	r24, 0x208E
     830:	e8 2f       	mov	r30, r24
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	ee 0f       	add	r30, r30
     836:	ff 1f       	adc	r31, r31
     838:	e1 57       	subi	r30, 0x71	; 113
     83a:	ff 4d       	sbci	r31, 0xDF	; 223
     83c:	20 81       	ld	r18, Z
     83e:	31 81       	ldd	r19, Z+1	; 0x01
     840:	20 34       	cpi	r18, 0x40	; 64
     842:	31 05       	cpc	r19, r1
     844:	89 f4       	brne	.+34     	; 0x868 <udi_cdc_multi_get_free_tx_buffer+0x40>
     846:	40 91 8b 20 	lds	r20, 0x208B
     84a:	41 11       	cpse	r20, r1
     84c:	0d c0       	rjmp	.+26     	; 0x868 <udi_cdc_multi_get_free_tx_buffer+0x40>
     84e:	40 91 8a 20 	lds	r20, 0x208A
     852:	41 11       	cpse	r20, r1
     854:	09 c0       	rjmp	.+18     	; 0x868 <udi_cdc_multi_get_free_tx_buffer+0x40>
     856:	21 e0       	ldi	r18, 0x01	; 1
     858:	20 93 8a 20 	sts	0x208A, r18
     85c:	81 11       	cpse	r24, r1
     85e:	20 e0       	ldi	r18, 0x00	; 0
     860:	20 93 8e 20 	sts	0x208E, r18
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	9f bf       	out	0x3f, r25	; 63
     86a:	80 e4       	ldi	r24, 0x40	; 64
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	82 1b       	sub	r24, r18
     870:	93 0b       	sbc	r25, r19
     872:	08 95       	ret

00000874 <udi_cdc_multi_is_tx_ready>:

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
     874:	d9 df       	rcall	.-78     	; 0x828 <udi_cdc_multi_get_free_tx_buffer>
     876:	21 e0       	ldi	r18, 0x01	; 1
     878:	89 2b       	or	r24, r25
     87a:	09 f4       	brne	.+2      	; 0x87e <udi_cdc_multi_is_tx_ready+0xa>
     87c:	20 e0       	ldi	r18, 0x00	; 0
}
     87e:	82 2f       	mov	r24, r18
     880:	08 95       	ret

00000882 <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	f7 cf       	rjmp	.-18     	; 0x874 <udi_cdc_multi_is_tx_ready>
}
     886:	08 95       	ret

00000888 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     888:	1f 93       	push	r17
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	16 2f       	mov	r17, r22
     890:	c7 2f       	mov	r28, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     892:	d1 e0       	ldi	r29, 0x01	; 1
     894:	80 91 b4 21 	lds	r24, 0x21B4
     898:	89 30       	cpi	r24, 0x09	; 9
     89a:	09 f0       	breq	.+2      	; 0x89e <udi_cdc_multi_putc+0x16>
     89c:	d0 e0       	ldi	r29, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	e9 df       	rcall	.-46     	; 0x874 <udi_cdc_multi_is_tx_ready>
     8a2:	81 11       	cpse	r24, r1
     8a4:	07 c0       	rjmp	.+14     	; 0x8b4 <udi_cdc_multi_putc+0x2c>
		if (!udi_cdc_data_running) {
     8a6:	80 91 9c 21 	lds	r24, 0x219C
     8aa:	81 11       	cpse	r24, r1
     8ac:	f8 cf       	rjmp	.-16     	; 0x89e <udi_cdc_multi_putc+0x16>
			return false;
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	2b c0       	rjmp	.+86     	; 0x90a <udi_cdc_multi_putc+0x82>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     8b4:	6f b7       	in	r22, 0x3f	; 63
	cpu_irq_disable();
     8b6:	f8 94       	cli
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     8b8:	20 91 8e 20 	lds	r18, 0x208E
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	f9 01       	movw	r30, r18
     8c0:	ee 0f       	add	r30, r30
     8c2:	ff 1f       	adc	r31, r31
     8c4:	e1 57       	subi	r30, 0x71	; 113
     8c6:	ff 4d       	sbci	r31, 0xDF	; 223
     8c8:	80 81       	ld	r24, Z
     8ca:	91 81       	ldd	r25, Z+1	; 0x01
     8cc:	ac 01       	movw	r20, r24
     8ce:	4f 5f       	subi	r20, 0xFF	; 255
     8d0:	5f 4f       	sbci	r21, 0xFF	; 255
     8d2:	40 83       	st	Z, r20
     8d4:	51 83       	std	Z+1, r21	; 0x01
     8d6:	f9 01       	movw	r30, r18
     8d8:	00 24       	eor	r0, r0
     8da:	f6 95       	lsr	r31
     8dc:	e7 95       	ror	r30
     8de:	07 94       	ror	r0
     8e0:	f6 95       	lsr	r31
     8e2:	e7 95       	ror	r30
     8e4:	07 94       	ror	r0
     8e6:	fe 2f       	mov	r31, r30
     8e8:	e0 2d       	mov	r30, r0
     8ea:	8e 0f       	add	r24, r30
     8ec:	9f 1f       	adc	r25, r31
     8ee:	fc 01       	movw	r30, r24
     8f0:	ec 56       	subi	r30, 0x6C	; 108
     8f2:	ff 4d       	sbci	r31, 0xDF	; 223
     8f4:	10 83       	st	Z, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8f6:	6f bf       	out	0x3f, r22	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
     8f8:	dd 23       	and	r29, r29
     8fa:	29 f0       	breq	.+10     	; 0x906 <udi_cdc_multi_putc+0x7e>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     8fc:	1c 2f       	mov	r17, r28
     8fe:	cc 0f       	add	r28, r28
     900:	cc 0b       	sbc	r28, r28
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
     902:	d0 e0       	ldi	r29, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
     904:	cc cf       	rjmp	.-104    	; 0x89e <udi_cdc_multi_putc+0x16>
	}
	return true;
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	90 e0       	ldi	r25, 0x00	; 0
}
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	1f 91       	pop	r17
     910:	08 95       	ret

00000912 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
     912:	bc 01       	movw	r22, r24
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	b8 cf       	rjmp	.-144    	; 0x888 <udi_cdc_multi_putc>
}
     918:	08 95       	ret

0000091a <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     91a:	e0 91 ba 21 	lds	r30, 0x21BA
     91e:	f0 91 bb 21 	lds	r31, 0x21BB
     922:	01 90       	ld	r0, Z+
     924:	f0 81       	ld	r31, Z
     926:	e0 2d       	mov	r30, r0
     928:	22 81       	ldd	r18, Z+2	; 0x02
     92a:	33 81       	ldd	r19, Z+3	; 0x03
     92c:	2e 0f       	add	r18, r30
     92e:	3f 1f       	adc	r19, r31
     930:	fc 01       	movw	r30, r24
     932:	40 81       	ld	r20, Z
     934:	e4 0f       	add	r30, r20
     936:	f1 1d       	adc	r31, r1
     938:	e2 17       	cp	r30, r18
     93a:	f3 07       	cpc	r31, r19
     93c:	a0 f4       	brcc	.+40     	; 0x966 <udc_next_desc_in_iface+0x4c>
     93e:	81 81       	ldd	r24, Z+1	; 0x01
     940:	84 30       	cpi	r24, 0x04	; 4
     942:	a1 f0       	breq	.+40     	; 0x96c <udc_next_desc_in_iface+0x52>
     944:	86 13       	cpse	r24, r22
     946:	06 c0       	rjmp	.+12     	; 0x954 <udc_next_desc_in_iface+0x3a>
     948:	14 c0       	rjmp	.+40     	; 0x972 <udc_next_desc_in_iface+0x58>
     94a:	81 81       	ldd	r24, Z+1	; 0x01
     94c:	84 30       	cpi	r24, 0x04	; 4
     94e:	a1 f0       	breq	.+40     	; 0x978 <udc_next_desc_in_iface+0x5e>
     950:	86 17       	cp	r24, r22
     952:	a9 f0       	breq	.+42     	; 0x97e <udc_next_desc_in_iface+0x64>
     954:	80 81       	ld	r24, Z
     956:	e8 0f       	add	r30, r24
     958:	f1 1d       	adc	r31, r1
     95a:	e2 17       	cp	r30, r18
     95c:	f3 07       	cpc	r31, r19
     95e:	a8 f3       	brcs	.-22     	; 0x94a <udc_next_desc_in_iface+0x30>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	08 95       	ret
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	08 95       	ret
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	08 95       	ret
     972:	8e 2f       	mov	r24, r30
     974:	9f 2f       	mov	r25, r31
     976:	08 95       	ret
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	08 95       	ret
     97e:	8e 2f       	mov	r24, r30
     980:	9f 2f       	mov	r25, r31
     982:	08 95       	ret

00000984 <udc_valid_address>:
     984:	80 91 11 23 	lds	r24, 0x2311
     988:	8f 77       	andi	r24, 0x7F	; 127
     98a:	0e c7       	rjmp	.+3612   	; 0x17a8 <udd_set_address>
     98c:	08 95       	ret

0000098e <udc_update_iface_desc>:
     98e:	90 91 bc 21 	lds	r25, 0x21BC
     992:	99 23       	and	r25, r25
     994:	81 f1       	breq	.+96     	; 0x9f6 <udc_update_iface_desc+0x68>
     996:	e0 91 ba 21 	lds	r30, 0x21BA
     99a:	f0 91 bb 21 	lds	r31, 0x21BB
     99e:	01 90       	ld	r0, Z+
     9a0:	f0 81       	ld	r31, Z
     9a2:	e0 2d       	mov	r30, r0
     9a4:	94 81       	ldd	r25, Z+4	; 0x04
     9a6:	89 17       	cp	r24, r25
     9a8:	40 f5       	brcc	.+80     	; 0x9fa <udc_update_iface_desc+0x6c>
     9aa:	e0 93 b8 21 	sts	0x21B8, r30
     9ae:	f0 93 b9 21 	sts	0x21B9, r31
     9b2:	22 81       	ldd	r18, Z+2	; 0x02
     9b4:	33 81       	ldd	r19, Z+3	; 0x03
     9b6:	2e 0f       	add	r18, r30
     9b8:	3f 1f       	adc	r19, r31
     9ba:	e2 17       	cp	r30, r18
     9bc:	f3 07       	cpc	r31, r19
     9be:	f8 f4       	brcc	.+62     	; 0x9fe <udc_update_iface_desc+0x70>
     9c0:	91 81       	ldd	r25, Z+1	; 0x01
     9c2:	94 30       	cpi	r25, 0x04	; 4
     9c4:	61 f4       	brne	.+24     	; 0x9de <udc_update_iface_desc+0x50>
     9c6:	92 81       	ldd	r25, Z+2	; 0x02
     9c8:	98 13       	cpse	r25, r24
     9ca:	09 c0       	rjmp	.+18     	; 0x9de <udc_update_iface_desc+0x50>
     9cc:	93 81       	ldd	r25, Z+3	; 0x03
     9ce:	96 13       	cpse	r25, r22
     9d0:	06 c0       	rjmp	.+12     	; 0x9de <udc_update_iface_desc+0x50>
     9d2:	e0 93 b8 21 	sts	0x21B8, r30
     9d6:	f0 93 b9 21 	sts	0x21B9, r31
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	08 95       	ret
     9de:	90 81       	ld	r25, Z
     9e0:	e9 0f       	add	r30, r25
     9e2:	f1 1d       	adc	r31, r1
     9e4:	e2 17       	cp	r30, r18
     9e6:	f3 07       	cpc	r31, r19
     9e8:	58 f3       	brcs	.-42     	; 0x9c0 <udc_update_iface_desc+0x32>
     9ea:	e0 93 b8 21 	sts	0x21B8, r30
     9ee:	f0 93 b9 21 	sts	0x21B9, r31
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	08 95       	ret
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	08 95       	ret
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	08 95       	ret
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	08 95       	ret

00000a02 <udc_iface_disable>:
     a02:	ff 92       	push	r15
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	c8 2f       	mov	r28, r24
     a0e:	60 e0       	ldi	r22, 0x00	; 0
     a10:	be df       	rcall	.-132    	; 0x98e <udc_update_iface_desc>
     a12:	f8 2e       	mov	r15, r24
     a14:	88 23       	and	r24, r24
     a16:	81 f1       	breq	.+96     	; 0xa78 <udc_iface_disable+0x76>
     a18:	a0 91 ba 21 	lds	r26, 0x21BA
     a1c:	b0 91 bb 21 	lds	r27, 0x21BB
     a20:	ec 2f       	mov	r30, r28
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	ee 0f       	add	r30, r30
     a26:	ff 1f       	adc	r31, r31
     a28:	12 96       	adiw	r26, 0x02	; 2
     a2a:	2d 91       	ld	r18, X+
     a2c:	3c 91       	ld	r19, X
     a2e:	13 97       	sbiw	r26, 0x03	; 3
     a30:	e2 0f       	add	r30, r18
     a32:	f3 1f       	adc	r31, r19
     a34:	00 81       	ld	r16, Z
     a36:	11 81       	ldd	r17, Z+1	; 0x01
     a38:	d8 01       	movw	r26, r16
     a3a:	16 96       	adiw	r26, 0x06	; 6
     a3c:	ed 91       	ld	r30, X+
     a3e:	fc 91       	ld	r31, X
     a40:	17 97       	sbiw	r26, 0x07	; 7
     a42:	19 95       	eicall
     a44:	68 2f       	mov	r22, r24
     a46:	8c 2f       	mov	r24, r28
     a48:	a2 df       	rcall	.-188    	; 0x98e <udc_update_iface_desc>
     a4a:	f8 2e       	mov	r15, r24
     a4c:	88 23       	and	r24, r24
     a4e:	a1 f0       	breq	.+40     	; 0xa78 <udc_iface_disable+0x76>
     a50:	c0 91 b8 21 	lds	r28, 0x21B8
     a54:	d0 91 b9 21 	lds	r29, 0x21B9
     a58:	65 e0       	ldi	r22, 0x05	; 5
     a5a:	ce 01       	movw	r24, r28
     a5c:	5e df       	rcall	.-324    	; 0x91a <udc_next_desc_in_iface>
     a5e:	ec 01       	movw	r28, r24
     a60:	00 97       	sbiw	r24, 0x00	; 0
     a62:	21 f0       	breq	.+8      	; 0xa6c <udc_iface_disable+0x6a>
     a64:	8a 81       	ldd	r24, Y+2	; 0x02
     a66:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <udd_ep_free>
     a6a:	f6 cf       	rjmp	.-20     	; 0xa58 <udc_iface_disable+0x56>
     a6c:	d8 01       	movw	r26, r16
     a6e:	12 96       	adiw	r26, 0x02	; 2
     a70:	ed 91       	ld	r30, X+
     a72:	fc 91       	ld	r31, X
     a74:	13 97       	sbiw	r26, 0x03	; 3
     a76:	19 95       	eicall
     a78:	8f 2d       	mov	r24, r15
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	1f 91       	pop	r17
     a80:	0f 91       	pop	r16
     a82:	ff 90       	pop	r15
     a84:	08 95       	ret

00000a86 <udc_iface_enable>:
     a86:	1f 93       	push	r17
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	18 2f       	mov	r17, r24
     a8e:	7f df       	rcall	.-258    	; 0x98e <udc_update_iface_desc>
     a90:	88 23       	and	r24, r24
     a92:	39 f1       	breq	.+78     	; 0xae2 <udc_iface_enable+0x5c>
     a94:	c0 91 b8 21 	lds	r28, 0x21B8
     a98:	d0 91 b9 21 	lds	r29, 0x21B9
     a9c:	65 e0       	ldi	r22, 0x05	; 5
     a9e:	ce 01       	movw	r24, r28
     aa0:	3c df       	rcall	.-392    	; 0x91a <udc_next_desc_in_iface>
     aa2:	ec 01       	movw	r28, r24
     aa4:	00 97       	sbiw	r24, 0x00	; 0
     aa6:	41 f0       	breq	.+16     	; 0xab8 <udc_iface_enable+0x32>
     aa8:	4c 81       	ldd	r20, Y+4	; 0x04
     aaa:	5d 81       	ldd	r21, Y+5	; 0x05
     aac:	6b 81       	ldd	r22, Y+3	; 0x03
     aae:	8a 81       	ldd	r24, Y+2	; 0x02
     ab0:	92 d6       	rcall	.+3364   	; 0x17d6 <udd_ep_alloc>
     ab2:	81 11       	cpse	r24, r1
     ab4:	f3 cf       	rjmp	.-26     	; 0xa9c <udc_iface_enable+0x16>
     ab6:	15 c0       	rjmp	.+42     	; 0xae2 <udc_iface_enable+0x5c>
     ab8:	a0 91 ba 21 	lds	r26, 0x21BA
     abc:	b0 91 bb 21 	lds	r27, 0x21BB
     ac0:	81 2f       	mov	r24, r17
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	88 0f       	add	r24, r24
     ac6:	99 1f       	adc	r25, r25
     ac8:	12 96       	adiw	r26, 0x02	; 2
     aca:	ed 91       	ld	r30, X+
     acc:	fc 91       	ld	r31, X
     ace:	13 97       	sbiw	r26, 0x03	; 3
     ad0:	e8 0f       	add	r30, r24
     ad2:	f9 1f       	adc	r31, r25
     ad4:	01 90       	ld	r0, Z+
     ad6:	f0 81       	ld	r31, Z
     ad8:	e0 2d       	mov	r30, r0
     ada:	01 90       	ld	r0, Z+
     adc:	f0 81       	ld	r31, Z
     ade:	e0 2d       	mov	r30, r0
     ae0:	19 95       	eicall
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	08 95       	ret

00000aea <udc_start>:
     aea:	f0 c5       	rjmp	.+3040   	; 0x16cc <udd_enable>
     aec:	08 95       	ret

00000aee <udc_reset>:
     aee:	cf 93       	push	r28
     af0:	80 91 bc 21 	lds	r24, 0x21BC
     af4:	88 23       	and	r24, r24
     af6:	c1 f0       	breq	.+48     	; 0xb28 <udc_reset+0x3a>
     af8:	e0 91 ba 21 	lds	r30, 0x21BA
     afc:	f0 91 bb 21 	lds	r31, 0x21BB
     b00:	01 90       	ld	r0, Z+
     b02:	f0 81       	ld	r31, Z
     b04:	e0 2d       	mov	r30, r0
     b06:	84 81       	ldd	r24, Z+4	; 0x04
     b08:	88 23       	and	r24, r24
     b0a:	71 f0       	breq	.+28     	; 0xb28 <udc_reset+0x3a>
     b0c:	c0 e0       	ldi	r28, 0x00	; 0
     b0e:	8c 2f       	mov	r24, r28
     b10:	78 df       	rcall	.-272    	; 0xa02 <udc_iface_disable>
     b12:	cf 5f       	subi	r28, 0xFF	; 255
     b14:	e0 91 ba 21 	lds	r30, 0x21BA
     b18:	f0 91 bb 21 	lds	r31, 0x21BB
     b1c:	01 90       	ld	r0, Z+
     b1e:	f0 81       	ld	r31, Z
     b20:	e0 2d       	mov	r30, r0
     b22:	84 81       	ldd	r24, Z+4	; 0x04
     b24:	c8 17       	cp	r28, r24
     b26:	98 f3       	brcs	.-26     	; 0xb0e <udc_reset+0x20>
     b28:	10 92 bc 21 	sts	0x21BC, r1
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	80 93 c0 21 	sts	0x21C0, r24
     b34:	90 93 c1 21 	sts	0x21C1, r25
     b38:	cf 91       	pop	r28
     b3a:	08 95       	ret

00000b3c <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     b3c:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     b3e:	80 91 bc 21 	lds	r24, 0x21BC
     b42:	88 23       	and	r24, r24
     b44:	41 f1       	breq	.+80     	; 0xb96 <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     b46:	e0 91 ba 21 	lds	r30, 0x21BA
     b4a:	f0 91 bb 21 	lds	r31, 0x21BB
     b4e:	a0 81       	ld	r26, Z
     b50:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     b52:	14 96       	adiw	r26, 0x04	; 4
     b54:	8c 91       	ld	r24, X
     b56:	88 23       	and	r24, r24
     b58:	f1 f0       	breq	.+60     	; 0xb96 <udc_sof_notify+0x5a>
     b5a:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     b5c:	8c 2f       	mov	r24, r28
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	02 80       	ldd	r0, Z+2	; 0x02
     b66:	f3 81       	ldd	r31, Z+3	; 0x03
     b68:	e0 2d       	mov	r30, r0
     b6a:	e8 0f       	add	r30, r24
     b6c:	f9 1f       	adc	r31, r25
     b6e:	01 90       	ld	r0, Z+
     b70:	f0 81       	ld	r31, Z
     b72:	e0 2d       	mov	r30, r0
     b74:	00 84       	ldd	r0, Z+8	; 0x08
     b76:	f1 85       	ldd	r31, Z+9	; 0x09
     b78:	e0 2d       	mov	r30, r0
     b7a:	30 97       	sbiw	r30, 0x00	; 0
     b7c:	09 f0       	breq	.+2      	; 0xb80 <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     b7e:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     b80:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     b82:	e0 91 ba 21 	lds	r30, 0x21BA
     b86:	f0 91 bb 21 	lds	r31, 0x21BB
     b8a:	a0 81       	ld	r26, Z
     b8c:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	8c 91       	ld	r24, X
     b92:	c8 17       	cp	r28, r24
     b94:	18 f3       	brcs	.-58     	; 0xb5c <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     b96:	cf 91       	pop	r28
     b98:	08 95       	ret

00000b9a <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     b9a:	ef 92       	push	r14
     b9c:	ff 92       	push	r15
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     ba6:	10 92 19 23 	sts	0x2319, r1
     baa:	10 92 1a 23 	sts	0x231A, r1
	udd_g_ctrlreq.callback = NULL;
     bae:	10 92 1b 23 	sts	0x231B, r1
     bb2:	10 92 1c 23 	sts	0x231C, r1
	udd_g_ctrlreq.over_under_run = NULL;
     bb6:	10 92 1d 23 	sts	0x231D, r1
     bba:	10 92 1e 23 	sts	0x231E, r1

	if (Udd_setup_is_in()) {
     bbe:	20 91 0f 23 	lds	r18, 0x230F
     bc2:	22 23       	and	r18, r18
     bc4:	0c f0       	brlt	.+2      	; 0xbc8 <udc_process_setup+0x2e>
     bc6:	65 c2       	rjmp	.+1226   	; 0x1092 <udc_process_setup+0x4f8>
		if (udd_g_ctrlreq.req.wLength == 0) {
     bc8:	80 91 15 23 	lds	r24, 0x2315
     bcc:	90 91 16 23 	lds	r25, 0x2316
     bd0:	00 97       	sbiw	r24, 0x00	; 0
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <udc_process_setup+0x3c>
     bd4:	63 c2       	rjmp	.+1222   	; 0x109c <udc_process_setup+0x502>
     bd6:	59 c2       	rjmp	.+1202   	; 0x108a <udc_process_setup+0x4f0>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     bd8:	2f 71       	andi	r18, 0x1F	; 31
     bda:	09 f0       	breq	.+2      	; 0xbde <udc_process_setup+0x44>
     bdc:	8b c0       	rjmp	.+278    	; 0xcf4 <udc_process_setup+0x15a>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     bde:	30 91 10 23 	lds	r19, 0x2310
     be2:	36 30       	cpi	r19, 0x06	; 6
     be4:	81 f0       	breq	.+32     	; 0xc06 <udc_process_setup+0x6c>
     be6:	38 30       	cpi	r19, 0x08	; 8
     be8:	09 f4       	brne	.+2      	; 0xbec <udc_process_setup+0x52>
     bea:	79 c0       	rjmp	.+242    	; 0xcde <udc_process_setup+0x144>
     bec:	31 11       	cpse	r19, r1
     bee:	82 c0       	rjmp	.+260    	; 0xcf4 <udc_process_setup+0x15a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     bf0:	02 97       	sbiw	r24, 0x02	; 2
     bf2:	39 f4       	brne	.+14     	; 0xc02 <udc_process_setup+0x68>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     bf4:	62 e0       	ldi	r22, 0x02	; 2
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	80 ec       	ldi	r24, 0xC0	; 192
     bfa:	91 e2       	ldi	r25, 0x21	; 33
     bfc:	e3 d5       	rcall	.+3014   	; 0x17c4 <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
     bfe:	01 e0       	ldi	r16, 0x01	; 1
     c00:	c7 c1       	rjmp	.+910    	; 0xf90 <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     c02:	00 e0       	ldi	r16, 0x00	; 0
     c04:	c5 c1       	rjmp	.+906    	; 0xf90 <udc_process_setup+0x3f6>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     c06:	20 91 11 23 	lds	r18, 0x2311
     c0a:	30 91 12 23 	lds	r19, 0x2312

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     c0e:	83 2f       	mov	r24, r19
     c10:	99 27       	eor	r25, r25
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	91 05       	cpc	r25, r1
     c16:	99 f0       	breq	.+38     	; 0xc3e <udc_process_setup+0xa4>
     c18:	1c f4       	brge	.+6      	; 0xc20 <udc_process_setup+0x86>
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	39 f0       	breq	.+14     	; 0xc2c <udc_process_setup+0x92>
     c1e:	55 c0       	rjmp	.+170    	; 0xcca <udc_process_setup+0x130>
     c20:	83 30       	cpi	r24, 0x03	; 3
     c22:	91 05       	cpc	r25, r1
     c24:	d1 f1       	breq	.+116    	; 0xc9a <udc_process_setup+0x100>
     c26:	0f 97       	sbiw	r24, 0x0f	; 15
     c28:	59 f1       	breq	.+86     	; 0xc80 <udc_process_setup+0xe6>
     c2a:	4f c0       	rjmp	.+158    	; 0xcca <udc_process_setup+0x130>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     c2c:	80 91 20 20 	lds	r24, 0x2020
     c30:	90 91 21 20 	lds	r25, 0x2021
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     c34:	dc 01       	movw	r26, r24
     c36:	6c 91       	ld	r22, X
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	c4 d5       	rcall	.+2952   	; 0x17c4 <udd_set_setup_payload>
     c3c:	35 c0       	rjmp	.+106    	; 0xca8 <udc_process_setup+0x10e>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     c3e:	e0 91 20 20 	lds	r30, 0x2020
     c42:	f0 91 21 20 	lds	r31, 0x2021
     c46:	81 89       	ldd	r24, Z+17	; 0x11
     c48:	28 17       	cp	r18, r24
     c4a:	08 f0       	brcs	.+2      	; 0xc4e <udc_process_setup+0xb4>
     c4c:	40 c0       	rjmp	.+128    	; 0xcce <udc_process_setup+0x134>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     c4e:	c9 01       	movw	r24, r18
     c50:	99 27       	eor	r25, r25
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	88 0f       	add	r24, r24
     c58:	99 1f       	adc	r25, r25
     c5a:	e0 91 22 20 	lds	r30, 0x2022
     c5e:	f0 91 23 20 	lds	r31, 0x2023
     c62:	e8 0f       	add	r30, r24
     c64:	f9 1f       	adc	r31, r25
     c66:	80 81       	ld	r24, Z
     c68:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     c6a:	fc 01       	movw	r30, r24
     c6c:	62 81       	ldd	r22, Z+2	; 0x02
     c6e:	73 81       	ldd	r23, Z+3	; 0x03
     c70:	a9 d5       	rcall	.+2898   	; 0x17c4 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     c72:	e0 91 17 23 	lds	r30, 0x2317
     c76:	f0 91 18 23 	lds	r31, 0x2318
     c7a:	82 e0       	ldi	r24, 0x02	; 2
     c7c:	81 83       	std	Z+1, r24	; 0x01
     c7e:	14 c0       	rjmp	.+40     	; 0xca8 <udc_process_setup+0x10e>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     c80:	80 91 24 20 	lds	r24, 0x2024
     c84:	90 91 25 20 	lds	r25, 0x2025
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	19 f1       	breq	.+70     	; 0xcd2 <udc_process_setup+0x138>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     c8c:	dc 01       	movw	r26, r24
     c8e:	12 96       	adiw	r26, 0x02	; 2
     c90:	6d 91       	ld	r22, X+
     c92:	7c 91       	ld	r23, X
     c94:	13 97       	sbiw	r26, 0x03	; 3
     c96:	96 d5       	rcall	.+2860   	; 0x17c4 <udd_set_setup_payload>
     c98:	07 c0       	rjmp	.+14     	; 0xca8 <udc_process_setup+0x10e>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     c9a:	21 11       	cpse	r18, r1
     c9c:	1c c0       	rjmp	.+56     	; 0xcd6 <udc_process_setup+0x13c>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     c9e:	64 e0       	ldi	r22, 0x04	; 4
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	84 e8       	ldi	r24, 0x84	; 132
     ca4:	90 e2       	ldi	r25, 0x20	; 32
     ca6:	8e d5       	rcall	.+2844   	; 0x17c4 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     ca8:	80 91 15 23 	lds	r24, 0x2315
     cac:	90 91 16 23 	lds	r25, 0x2316
     cb0:	20 91 19 23 	lds	r18, 0x2319
     cb4:	30 91 1a 23 	lds	r19, 0x231A
     cb8:	82 17       	cp	r24, r18
     cba:	93 07       	cpc	r25, r19
     cbc:	70 f4       	brcc	.+28     	; 0xcda <udc_process_setup+0x140>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     cbe:	80 93 19 23 	sts	0x2319, r24
     cc2:	90 93 1a 23 	sts	0x231A, r25
	}
	return true;
     cc6:	01 e0       	ldi	r16, 0x01	; 1
     cc8:	63 c1       	rjmp	.+710    	; 0xf90 <udc_process_setup+0x3f6>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     cca:	00 e0       	ldi	r16, 0x00	; 0
     ccc:	61 c1       	rjmp	.+706    	; 0xf90 <udc_process_setup+0x3f6>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
     cce:	00 e0       	ldi	r16, 0x00	; 0
     cd0:	5f c1       	rjmp	.+702    	; 0xf90 <udc_process_setup+0x3f6>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
     cd2:	00 e0       	ldi	r16, 0x00	; 0
     cd4:	5d c1       	rjmp	.+698    	; 0xf90 <udc_process_setup+0x3f6>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
     cd6:	00 e0       	ldi	r16, 0x00	; 0
     cd8:	5b c1       	rjmp	.+694    	; 0xf90 <udc_process_setup+0x3f6>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
     cda:	01 e0       	ldi	r16, 0x01	; 1
     cdc:	59 c1       	rjmp	.+690    	; 0xf90 <udc_process_setup+0x3f6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     cde:	01 97       	sbiw	r24, 0x01	; 1
     ce0:	39 f4       	brne	.+14     	; 0xcf0 <udc_process_setup+0x156>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     ce2:	61 e0       	ldi	r22, 0x01	; 1
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	8c eb       	ldi	r24, 0xBC	; 188
     ce8:	91 e2       	ldi	r25, 0x21	; 33
     cea:	6c d5       	rcall	.+2776   	; 0x17c4 <udd_set_setup_payload>
	return true;
     cec:	01 e0       	ldi	r16, 0x01	; 1
     cee:	50 c1       	rjmp	.+672    	; 0xf90 <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
     cf0:	00 e0       	ldi	r16, 0x00	; 0
     cf2:	4e c1       	rjmp	.+668    	; 0xf90 <udc_process_setup+0x3f6>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     cf4:	21 30       	cpi	r18, 0x01	; 1
     cf6:	09 f0       	breq	.+2      	; 0xcfa <udc_process_setup+0x160>
     cf8:	3f c0       	rjmp	.+126    	; 0xd78 <udc_process_setup+0x1de>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     cfa:	30 91 10 23 	lds	r19, 0x2310
     cfe:	3a 30       	cpi	r19, 0x0A	; 10
     d00:	d9 f5       	brne	.+118    	; 0xd78 <udc_process_setup+0x1de>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	99 f5       	brne	.+102    	; 0xd6c <udc_process_setup+0x1d2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     d06:	80 91 bc 21 	lds	r24, 0x21BC
     d0a:	88 23       	and	r24, r24
     d0c:	89 f1       	breq	.+98     	; 0xd70 <udc_process_setup+0x1d6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     d0e:	c0 91 13 23 	lds	r28, 0x2313
     d12:	d0 91 14 23 	lds	r29, 0x2314
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     d16:	e0 90 ba 21 	lds	r14, 0x21BA
     d1a:	f0 90 bb 21 	lds	r15, 0x21BB
     d1e:	d7 01       	movw	r26, r14
     d20:	ed 91       	ld	r30, X+
     d22:	fc 91       	ld	r31, X
     d24:	84 81       	ldd	r24, Z+4	; 0x04
     d26:	c8 17       	cp	r28, r24
     d28:	28 f5       	brcc	.+74     	; 0xd74 <udc_process_setup+0x1da>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	8c 2f       	mov	r24, r28
     d2e:	2f de       	rcall	.-930    	; 0x98e <udc_update_iface_desc>
     d30:	08 2f       	mov	r16, r24
     d32:	88 23       	and	r24, r24
     d34:	09 f4       	brne	.+2      	; 0xd38 <udc_process_setup+0x19e>
     d36:	2c c1       	rjmp	.+600    	; 0xf90 <udc_process_setup+0x3f6>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     d38:	ce 01       	movw	r24, r28
     d3a:	99 27       	eor	r25, r25
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	d7 01       	movw	r26, r14
     d42:	12 96       	adiw	r26, 0x02	; 2
     d44:	ed 91       	ld	r30, X+
     d46:	fc 91       	ld	r31, X
     d48:	13 97       	sbiw	r26, 0x03	; 3
     d4a:	e8 0f       	add	r30, r24
     d4c:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     d4e:	01 90       	ld	r0, Z+
     d50:	f0 81       	ld	r31, Z
     d52:	e0 2d       	mov	r30, r0
     d54:	06 80       	ldd	r0, Z+6	; 0x06
     d56:	f7 81       	ldd	r31, Z+7	; 0x07
     d58:	e0 2d       	mov	r30, r0
     d5a:	19 95       	eicall
     d5c:	80 93 be 21 	sts	0x21BE, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     d60:	61 e0       	ldi	r22, 0x01	; 1
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	8e eb       	ldi	r24, 0xBE	; 190
     d66:	91 e2       	ldi	r25, 0x21	; 33
     d68:	2d d5       	rcall	.+2650   	; 0x17c4 <udd_set_setup_payload>
     d6a:	12 c1       	rjmp	.+548    	; 0xf90 <udc_process_setup+0x3f6>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
     d6c:	00 e0       	ldi	r16, 0x00	; 0
     d6e:	10 c1       	rjmp	.+544    	; 0xf90 <udc_process_setup+0x3f6>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     d70:	00 e0       	ldi	r16, 0x00	; 0
     d72:	0e c1       	rjmp	.+540    	; 0xf90 <udc_process_setup+0x3f6>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     d74:	00 e0       	ldi	r16, 0x00	; 0
     d76:	0c c1       	rjmp	.+536    	; 0xf90 <udc_process_setup+0x3f6>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     d78:	22 30       	cpi	r18, 0x02	; 2
     d7a:	09 f0       	breq	.+2      	; 0xd7e <udc_process_setup+0x1e4>
     d7c:	0b c1       	rjmp	.+534    	; 0xf94 <udc_process_setup+0x3fa>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     d7e:	20 91 10 23 	lds	r18, 0x2310
     d82:	21 11       	cpse	r18, r1
     d84:	00 c1       	rjmp	.+512    	; 0xf86 <udc_process_setup+0x3ec>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     d86:	02 97       	sbiw	r24, 0x02	; 2
     d88:	79 f4       	brne	.+30     	; 0xda8 <udc_process_setup+0x20e>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     d8a:	80 91 13 23 	lds	r24, 0x2313
     d8e:	84 d5       	rcall	.+2824   	; 0x1898 <udd_ep_is_halted>
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	80 93 b6 21 	sts	0x21B6, r24
     d96:	90 93 b7 21 	sts	0x21B7, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     d9a:	62 e0       	ldi	r22, 0x02	; 2
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	86 eb       	ldi	r24, 0xB6	; 182
     da0:	91 e2       	ldi	r25, 0x21	; 33
     da2:	10 d5       	rcall	.+2592   	; 0x17c4 <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
     da4:	01 e0       	ldi	r16, 0x01	; 1
     da6:	f4 c0       	rjmp	.+488    	; 0xf90 <udc_process_setup+0x3f6>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
     da8:	00 e0       	ldi	r16, 0x00	; 0
     daa:	f2 c0       	rjmp	.+484    	; 0xf90 <udc_process_setup+0x3f6>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     dac:	2f 71       	andi	r18, 0x1F	; 31
     dae:	09 f0       	breq	.+2      	; 0xdb2 <udc_process_setup+0x218>
     db0:	90 c0       	rjmp	.+288    	; 0xed2 <udc_process_setup+0x338>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     db2:	80 91 10 23 	lds	r24, 0x2310
     db6:	83 30       	cpi	r24, 0x03	; 3
     db8:	09 f4       	brne	.+2      	; 0xdbc <udc_process_setup+0x222>
     dba:	e7 c0       	rjmp	.+462    	; 0xf8a <udc_process_setup+0x3f0>
     dbc:	18 f4       	brcc	.+6      	; 0xdc4 <udc_process_setup+0x22a>
     dbe:	81 30       	cpi	r24, 0x01	; 1
     dc0:	b1 f0       	breq	.+44     	; 0xdee <udc_process_setup+0x254>
     dc2:	87 c0       	rjmp	.+270    	; 0xed2 <udc_process_setup+0x338>
     dc4:	85 30       	cpi	r24, 0x05	; 5
     dc6:	19 f0       	breq	.+6      	; 0xdce <udc_process_setup+0x234>
     dc8:	89 30       	cpi	r24, 0x09	; 9
     dca:	61 f1       	breq	.+88     	; 0xe24 <udc_process_setup+0x28a>
     dcc:	82 c0       	rjmp	.+260    	; 0xed2 <udc_process_setup+0x338>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     dce:	80 91 15 23 	lds	r24, 0x2315
     dd2:	90 91 16 23 	lds	r25, 0x2316
     dd6:	89 2b       	or	r24, r25
     dd8:	41 f4       	brne	.+16     	; 0xdea <udc_process_setup+0x250>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     dda:	82 ec       	ldi	r24, 0xC2	; 194
     ddc:	94 e0       	ldi	r25, 0x04	; 4
     dde:	80 93 1b 23 	sts	0x231B, r24
     de2:	90 93 1c 23 	sts	0x231C, r25
	return true;
     de6:	01 e0       	ldi	r16, 0x01	; 1
     de8:	d3 c0       	rjmp	.+422    	; 0xf90 <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     dea:	00 e0       	ldi	r16, 0x00	; 0
     dec:	d1 c0       	rjmp	.+418    	; 0xf90 <udc_process_setup+0x3f6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     dee:	80 91 15 23 	lds	r24, 0x2315
     df2:	90 91 16 23 	lds	r25, 0x2316
     df6:	89 2b       	or	r24, r25
     df8:	89 f4       	brne	.+34     	; 0xe1c <udc_process_setup+0x282>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     dfa:	80 91 11 23 	lds	r24, 0x2311
     dfe:	90 91 12 23 	lds	r25, 0x2312
     e02:	01 97       	sbiw	r24, 0x01	; 1
     e04:	69 f4       	brne	.+26     	; 0xe20 <udc_process_setup+0x286>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     e06:	80 91 c0 21 	lds	r24, 0x21C0
     e0a:	90 91 c1 21 	lds	r25, 0x21C1
     e0e:	8d 7f       	andi	r24, 0xFD	; 253
     e10:	80 93 c0 21 	sts	0x21C0, r24
     e14:	90 93 c1 21 	sts	0x21C1, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
     e18:	01 e0       	ldi	r16, 0x01	; 1
     e1a:	ba c0       	rjmp	.+372    	; 0xf90 <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     e1c:	00 e0       	ldi	r16, 0x00	; 0
     e1e:	b8 c0       	rjmp	.+368    	; 0xf90 <udc_process_setup+0x3f6>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
     e20:	00 e0       	ldi	r16, 0x00	; 0
     e22:	b6 c0       	rjmp	.+364    	; 0xf90 <udc_process_setup+0x3f6>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     e24:	80 91 15 23 	lds	r24, 0x2315
     e28:	90 91 16 23 	lds	r25, 0x2316
     e2c:	89 2b       	or	r24, r25
     e2e:	09 f0       	breq	.+2      	; 0xe32 <udc_process_setup+0x298>
     e30:	46 c0       	rjmp	.+140    	; 0xebe <udc_process_setup+0x324>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     e32:	bd d4       	rcall	.+2426   	; 0x17ae <udd_getaddress>
     e34:	88 23       	and	r24, r24
     e36:	09 f4       	brne	.+2      	; 0xe3a <udc_process_setup+0x2a0>
     e38:	44 c0       	rjmp	.+136    	; 0xec2 <udc_process_setup+0x328>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     e3a:	20 91 11 23 	lds	r18, 0x2311
     e3e:	30 91 12 23 	lds	r19, 0x2312
     e42:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     e44:	e0 91 20 20 	lds	r30, 0x2020
     e48:	f0 91 21 20 	lds	r31, 0x2021
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     e4c:	81 89       	ldd	r24, Z+17	; 0x11
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	82 17       	cp	r24, r18
     e52:	93 07       	cpc	r25, r19
     e54:	c0 f1       	brcs	.+112    	; 0xec6 <udc_process_setup+0x32c>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     e56:	4b de       	rcall	.-874    	; 0xaee <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     e58:	80 91 11 23 	lds	r24, 0x2311
     e5c:	90 91 12 23 	lds	r25, 0x2312
     e60:	80 93 bc 21 	sts	0x21BC, r24
	if (udc_num_configuration == 0) {
     e64:	88 23       	and	r24, r24
     e66:	89 f1       	breq	.+98     	; 0xeca <udc_process_setup+0x330>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     e68:	99 27       	eor	r25, r25
     e6a:	81 50       	subi	r24, 0x01	; 1
     e6c:	90 4c       	sbci	r25, 0xC0	; 192
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	e0 91 22 20 	lds	r30, 0x2022
     e7a:	f0 91 23 20 	lds	r31, 0x2023
     e7e:	e8 0f       	add	r30, r24
     e80:	f9 1f       	adc	r31, r25
     e82:	e0 93 ba 21 	sts	0x21BA, r30
     e86:	f0 93 bb 21 	sts	0x21BB, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     e8a:	01 90       	ld	r0, Z+
     e8c:	f0 81       	ld	r31, Z
     e8e:	e0 2d       	mov	r30, r0
     e90:	84 81       	ldd	r24, Z+4	; 0x04
     e92:	88 23       	and	r24, r24
     e94:	e1 f0       	breq	.+56     	; 0xece <udc_process_setup+0x334>
     e96:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	8c 2f       	mov	r24, r28
     e9c:	f4 dd       	rcall	.-1048   	; 0xa86 <udc_iface_enable>
     e9e:	08 2f       	mov	r16, r24
     ea0:	88 23       	and	r24, r24
     ea2:	09 f4       	brne	.+2      	; 0xea6 <udc_process_setup+0x30c>
     ea4:	75 c0       	rjmp	.+234    	; 0xf90 <udc_process_setup+0x3f6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     ea6:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     ea8:	e0 91 ba 21 	lds	r30, 0x21BA
     eac:	f0 91 bb 21 	lds	r31, 0x21BB
     eb0:	01 90       	ld	r0, Z+
     eb2:	f0 81       	ld	r31, Z
     eb4:	e0 2d       	mov	r30, r0
     eb6:	84 81       	ldd	r24, Z+4	; 0x04
     eb8:	c8 17       	cp	r28, r24
     eba:	70 f3       	brcs	.-36     	; 0xe98 <udc_process_setup+0x2fe>
     ebc:	69 c0       	rjmp	.+210    	; 0xf90 <udc_process_setup+0x3f6>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     ebe:	00 e0       	ldi	r16, 0x00	; 0
     ec0:	67 c0       	rjmp	.+206    	; 0xf90 <udc_process_setup+0x3f6>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
     ec2:	00 e0       	ldi	r16, 0x00	; 0
     ec4:	65 c0       	rjmp	.+202    	; 0xf90 <udc_process_setup+0x3f6>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
     ec6:	00 e0       	ldi	r16, 0x00	; 0
     ec8:	63 c0       	rjmp	.+198    	; 0xf90 <udc_process_setup+0x3f6>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
     eca:	01 e0       	ldi	r16, 0x01	; 1
     ecc:	61 c0       	rjmp	.+194    	; 0xf90 <udc_process_setup+0x3f6>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     ece:	01 e0       	ldi	r16, 0x01	; 1
     ed0:	5f c0       	rjmp	.+190    	; 0xf90 <udc_process_setup+0x3f6>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     ed2:	21 30       	cpi	r18, 0x01	; 1
     ed4:	09 f5       	brne	.+66     	; 0xf18 <udc_process_setup+0x37e>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     ed6:	80 91 10 23 	lds	r24, 0x2310
     eda:	8b 30       	cpi	r24, 0x0B	; 11
     edc:	e9 f4       	brne	.+58     	; 0xf18 <udc_process_setup+0x37e>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     ede:	80 91 15 23 	lds	r24, 0x2315
     ee2:	90 91 16 23 	lds	r25, 0x2316
     ee6:	89 2b       	or	r24, r25
     ee8:	99 f4       	brne	.+38     	; 0xf10 <udc_process_setup+0x376>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     eea:	80 91 bc 21 	lds	r24, 0x21BC
     eee:	88 23       	and	r24, r24
     ef0:	89 f0       	breq	.+34     	; 0xf14 <udc_process_setup+0x37a>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     ef2:	c0 91 13 23 	lds	r28, 0x2313
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     ef6:	d0 91 11 23 	lds	r29, 0x2311

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     efa:	8c 2f       	mov	r24, r28
     efc:	82 dd       	rcall	.-1276   	; 0xa02 <udc_iface_disable>
     efe:	08 2f       	mov	r16, r24
     f00:	88 23       	and	r24, r24
     f02:	09 f4       	brne	.+2      	; 0xf06 <udc_process_setup+0x36c>
     f04:	45 c0       	rjmp	.+138    	; 0xf90 <udc_process_setup+0x3f6>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     f06:	6d 2f       	mov	r22, r29
     f08:	8c 2f       	mov	r24, r28
     f0a:	bd dd       	rcall	.-1158   	; 0xa86 <udc_iface_enable>
     f0c:	08 2f       	mov	r16, r24
     f0e:	40 c0       	rjmp	.+128    	; 0xf90 <udc_process_setup+0x3f6>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
     f10:	00 e0       	ldi	r16, 0x00	; 0
     f12:	3e c0       	rjmp	.+124    	; 0xf90 <udc_process_setup+0x3f6>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     f14:	00 e0       	ldi	r16, 0x00	; 0
     f16:	3c c0       	rjmp	.+120    	; 0xf90 <udc_process_setup+0x3f6>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     f18:	22 30       	cpi	r18, 0x02	; 2
     f1a:	09 f0       	breq	.+2      	; 0xf1e <udc_process_setup+0x384>
     f1c:	3b c0       	rjmp	.+118    	; 0xf94 <udc_process_setup+0x3fa>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     f1e:	80 91 10 23 	lds	r24, 0x2310
     f22:	81 30       	cpi	r24, 0x01	; 1
     f24:	19 f0       	breq	.+6      	; 0xf2c <udc_process_setup+0x392>
     f26:	83 30       	cpi	r24, 0x03	; 3
     f28:	b1 f0       	breq	.+44     	; 0xf56 <udc_process_setup+0x3bc>
     f2a:	31 c0       	rjmp	.+98     	; 0xf8e <udc_process_setup+0x3f4>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     f2c:	80 91 15 23 	lds	r24, 0x2315
     f30:	90 91 16 23 	lds	r25, 0x2316
     f34:	89 2b       	or	r24, r25
     f36:	59 f4       	brne	.+22     	; 0xf4e <udc_process_setup+0x3b4>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     f38:	80 91 11 23 	lds	r24, 0x2311
     f3c:	90 91 12 23 	lds	r25, 0x2312
     f40:	89 2b       	or	r24, r25
     f42:	39 f4       	brne	.+14     	; 0xf52 <udc_process_setup+0x3b8>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     f44:	80 91 13 23 	lds	r24, 0x2313
     f48:	c2 d4       	rcall	.+2436   	; 0x18ce <udd_ep_clear_halt>
     f4a:	08 2f       	mov	r16, r24
     f4c:	21 c0       	rjmp	.+66     	; 0xf90 <udc_process_setup+0x3f6>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     f4e:	00 e0       	ldi	r16, 0x00	; 0
     f50:	1f c0       	rjmp	.+62     	; 0xf90 <udc_process_setup+0x3f6>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     f52:	00 e0       	ldi	r16, 0x00	; 0
     f54:	1d c0       	rjmp	.+58     	; 0xf90 <udc_process_setup+0x3f6>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     f56:	80 91 15 23 	lds	r24, 0x2315
     f5a:	90 91 16 23 	lds	r25, 0x2316
     f5e:	89 2b       	or	r24, r25
     f60:	71 f4       	brne	.+28     	; 0xf7e <udc_process_setup+0x3e4>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     f62:	80 91 11 23 	lds	r24, 0x2311
     f66:	90 91 12 23 	lds	r25, 0x2312
     f6a:	89 2b       	or	r24, r25
     f6c:	51 f4       	brne	.+20     	; 0xf82 <udc_process_setup+0x3e8>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     f6e:	c3 e1       	ldi	r28, 0x13	; 19
     f70:	d3 e2       	ldi	r29, 0x23	; 35
     f72:	88 81       	ld	r24, Y
     f74:	5e d5       	rcall	.+2748   	; 0x1a32 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     f76:	88 81       	ld	r24, Y
     f78:	b2 d5       	rcall	.+2916   	; 0x1ade <udd_ep_set_halt>
     f7a:	08 2f       	mov	r16, r24
     f7c:	09 c0       	rjmp	.+18     	; 0xf90 <udc_process_setup+0x3f6>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     f7e:	00 e0       	ldi	r16, 0x00	; 0
     f80:	07 c0       	rjmp	.+14     	; 0xf90 <udc_process_setup+0x3f6>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     f82:	00 e0       	ldi	r16, 0x00	; 0
     f84:	05 c0       	rjmp	.+10     	; 0xf90 <udc_process_setup+0x3f6>
				break;
			}
		}
#endif
	}
	return false;
     f86:	00 e0       	ldi	r16, 0x00	; 0
     f88:	03 c0       	rjmp	.+6      	; 0xf90 <udc_process_setup+0x3f6>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
     f8a:	00 e0       	ldi	r16, 0x00	; 0
     f8c:	01 c0       	rjmp	.+2      	; 0xf90 <udc_process_setup+0x3f6>
				break;
			}
		}
#endif
	}
	return false;
     f8e:	00 e0       	ldi	r16, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
     f90:	01 11       	cpse	r16, r1
     f92:	89 c0       	rjmp	.+274    	; 0x10a6 <udc_process_setup+0x50c>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     f94:	80 91 0f 23 	lds	r24, 0x230F
     f98:	8f 71       	andi	r24, 0x1F	; 31
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	c1 f5       	brne	.+112    	; 0x100e <udc_process_setup+0x474>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     f9e:	80 91 bc 21 	lds	r24, 0x21BC
     fa2:	88 23       	and	r24, r24
     fa4:	a1 f1       	breq	.+104    	; 0x100e <udc_process_setup+0x474>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     fa6:	c0 91 13 23 	lds	r28, 0x2313
     faa:	d0 91 14 23 	lds	r29, 0x2314
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     fae:	00 91 ba 21 	lds	r16, 0x21BA
     fb2:	10 91 bb 21 	lds	r17, 0x21BB
     fb6:	d8 01       	movw	r26, r16
     fb8:	ed 91       	ld	r30, X+
     fba:	fc 91       	ld	r31, X
     fbc:	84 81       	ldd	r24, Z+4	; 0x04
     fbe:	c8 17       	cp	r28, r24
     fc0:	30 f5       	brcc	.+76     	; 0x100e <udc_process_setup+0x474>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	8c 2f       	mov	r24, r28
     fc6:	e3 dc       	rcall	.-1594   	; 0x98e <udc_update_iface_desc>
     fc8:	88 23       	and	r24, r24
     fca:	09 f1       	breq	.+66     	; 0x100e <udc_process_setup+0x474>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     fcc:	ce 01       	movw	r24, r28
     fce:	99 27       	eor	r25, r25
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	d8 01       	movw	r26, r16
     fd6:	12 96       	adiw	r26, 0x02	; 2
     fd8:	ed 91       	ld	r30, X+
     fda:	fc 91       	ld	r31, X
     fdc:	13 97       	sbiw	r26, 0x03	; 3
     fde:	e8 0f       	add	r30, r24
     fe0:	f9 1f       	adc	r31, r25
     fe2:	00 81       	ld	r16, Z
     fe4:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     fe6:	d8 01       	movw	r26, r16
     fe8:	16 96       	adiw	r26, 0x06	; 6
     fea:	ed 91       	ld	r30, X+
     fec:	fc 91       	ld	r31, X
     fee:	17 97       	sbiw	r26, 0x07	; 7
     ff0:	19 95       	eicall
     ff2:	68 2f       	mov	r22, r24
     ff4:	8c 2f       	mov	r24, r28
     ff6:	cb dc       	rcall	.-1642   	; 0x98e <udc_update_iface_desc>
     ff8:	88 23       	and	r24, r24
     ffa:	49 f0       	breq	.+18     	; 0x100e <udc_process_setup+0x474>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
     ffc:	d8 01       	movw	r26, r16
     ffe:	14 96       	adiw	r26, 0x04	; 4
    1000:	ed 91       	ld	r30, X+
    1002:	fc 91       	ld	r31, X
    1004:	15 97       	sbiw	r26, 0x05	; 5
    1006:	19 95       	eicall
    1008:	08 2f       	mov	r16, r24
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    100a:	81 11       	cpse	r24, r1
    100c:	4c c0       	rjmp	.+152    	; 0x10a6 <udc_process_setup+0x50c>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    100e:	80 91 0f 23 	lds	r24, 0x230F
    1012:	8f 71       	andi	r24, 0x1F	; 31
    1014:	82 30       	cpi	r24, 0x02	; 2
    1016:	d9 f5       	brne	.+118    	; 0x108e <udc_process_setup+0x4f4>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1018:	80 91 bc 21 	lds	r24, 0x21BC
    101c:	88 23       	and	r24, r24
    101e:	89 f1       	breq	.+98     	; 0x1082 <udc_process_setup+0x4e8>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1020:	e0 91 ba 21 	lds	r30, 0x21BA
    1024:	f0 91 bb 21 	lds	r31, 0x21BB
    1028:	a0 81       	ld	r26, Z
    102a:	b1 81       	ldd	r27, Z+1	; 0x01
    102c:	14 96       	adiw	r26, 0x04	; 4
    102e:	8c 91       	ld	r24, X
    1030:	88 23       	and	r24, r24
    1032:	49 f1       	breq	.+82     	; 0x1086 <udc_process_setup+0x4ec>
    1034:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1036:	21 2f       	mov	r18, r17
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	22 0f       	add	r18, r18
    103c:	33 1f       	adc	r19, r19
    103e:	02 80       	ldd	r0, Z+2	; 0x02
    1040:	f3 81       	ldd	r31, Z+3	; 0x03
    1042:	e0 2d       	mov	r30, r0
    1044:	e2 0f       	add	r30, r18
    1046:	f3 1f       	adc	r31, r19
    1048:	c0 81       	ld	r28, Z
    104a:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    104c:	ee 81       	ldd	r30, Y+6	; 0x06
    104e:	ff 81       	ldd	r31, Y+7	; 0x07
    1050:	19 95       	eicall
    1052:	68 2f       	mov	r22, r24
    1054:	81 2f       	mov	r24, r17
    1056:	9b dc       	rcall	.-1738   	; 0x98e <udc_update_iface_desc>
    1058:	08 2f       	mov	r16, r24
    105a:	88 23       	and	r24, r24
    105c:	21 f1       	breq	.+72     	; 0x10a6 <udc_process_setup+0x50c>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    105e:	ec 81       	ldd	r30, Y+4	; 0x04
    1060:	fd 81       	ldd	r31, Y+5	; 0x05
    1062:	19 95       	eicall
    1064:	08 2f       	mov	r16, r24
    1066:	81 11       	cpse	r24, r1
    1068:	1e c0       	rjmp	.+60     	; 0x10a6 <udc_process_setup+0x50c>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    106a:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    106c:	e0 91 ba 21 	lds	r30, 0x21BA
    1070:	f0 91 bb 21 	lds	r31, 0x21BB
    1074:	a0 81       	ld	r26, Z
    1076:	b1 81       	ldd	r27, Z+1	; 0x01
    1078:	14 96       	adiw	r26, 0x04	; 4
    107a:	8c 91       	ld	r24, X
    107c:	18 17       	cp	r17, r24
    107e:	d8 f2       	brcs	.-74     	; 0x1036 <udc_process_setup+0x49c>
    1080:	12 c0       	rjmp	.+36     	; 0x10a6 <udc_process_setup+0x50c>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1082:	00 e0       	ldi	r16, 0x00	; 0
    1084:	10 c0       	rjmp	.+32     	; 0x10a6 <udc_process_setup+0x50c>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1086:	00 e0       	ldi	r16, 0x00	; 0
    1088:	0e c0       	rjmp	.+28     	; 0x10a6 <udc_process_setup+0x50c>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    108a:	00 e0       	ldi	r16, 0x00	; 0
    108c:	0c c0       	rjmp	.+24     	; 0x10a6 <udc_process_setup+0x50c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    108e:	00 e0       	ldi	r16, 0x00	; 0
    1090:	0a c0       	rjmp	.+20     	; 0x10a6 <udc_process_setup+0x50c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1092:	82 2f       	mov	r24, r18
    1094:	80 76       	andi	r24, 0x60	; 96
    1096:	09 f0       	breq	.+2      	; 0x109a <udc_process_setup+0x500>
    1098:	7d cf       	rjmp	.-262    	; 0xf94 <udc_process_setup+0x3fa>
    109a:	88 ce       	rjmp	.-752    	; 0xdac <udc_process_setup+0x212>
    109c:	32 2f       	mov	r19, r18
    109e:	30 76       	andi	r19, 0x60	; 96
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <udc_process_setup+0x50a>
    10a2:	78 cf       	rjmp	.-272    	; 0xf94 <udc_process_setup+0x3fa>
    10a4:	99 cd       	rjmp	.-1230   	; 0xbd8 <udc_process_setup+0x3e>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    10a6:	80 2f       	mov	r24, r16
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	1f 91       	pop	r17
    10ae:	0f 91       	pop	r16
    10b0:	ff 90       	pop	r15
    10b2:	ef 90       	pop	r14
    10b4:	08 95       	ret

000010b6 <rtc_set_time>:
	if ((count_low == 0) && (RTC.INTFLAGS & RTC_OVFIF_bm))
		count_high++;
	cpu_irq_restore(flags);

	return ((uint32_t)count_high << 16) | count_low;
}
    10b6:	10 92 00 04 	sts	0x0400, r1
    10ba:	e0 e0       	ldi	r30, 0x00	; 0
    10bc:	f4 e0       	ldi	r31, 0x04	; 4
    10be:	21 81       	ldd	r18, Z+1	; 0x01
    10c0:	20 fd       	sbrc	r18, 0
    10c2:	fd cf       	rjmp	.-6      	; 0x10be <rtc_set_time+0x8>
    10c4:	e0 e0       	ldi	r30, 0x00	; 0
    10c6:	f4 e0       	ldi	r31, 0x04	; 4
    10c8:	60 87       	std	Z+8, r22	; 0x08
    10ca:	71 87       	std	Z+9, r23	; 0x09
    10cc:	80 93 07 23 	sts	0x2307, r24
    10d0:	90 93 08 23 	sts	0x2308, r25
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	80 83       	st	Z, r24
    10d8:	08 95       	ret

000010da <rtc_set_alarm>:
 * \param time Absolute time value. See also \ref rtc_min_alarm_time
 * \pre Needs interrupts disabled if used from several contexts
 */
void rtc_set_alarm(uint32_t time)
{
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    10da:	e0 e0       	ldi	r30, 0x00	; 0
    10dc:	f4 e0       	ldi	r31, 0x04	; 4
    10de:	21 e0       	ldi	r18, 0x01	; 1
    10e0:	22 83       	std	Z+2, r18	; 0x02
	RTC.COMP = time;
    10e2:	64 87       	std	Z+12, r22	; 0x0c
    10e4:	75 87       	std	Z+13, r23	; 0x0d
	rtc_data.alarm_low = time;
    10e6:	60 93 0b 23 	sts	0x230B, r22
    10ea:	70 93 0c 23 	sts	0x230C, r23
	rtc_data.alarm_high = time >> 16;
    10ee:	80 93 09 23 	sts	0x2309, r24
    10f2:	90 93 0a 23 	sts	0x230A, r25
 * \brief Check if RTC is busy synchronizing
 */
__always_inline bool rtc_is_busy(void);
__always_inline bool rtc_is_busy(void)
{
	return RTC.STATUS & RTC_SYNCBUSY_bm;
    10f6:	81 81       	ldd	r24, Z+1	; 0x01
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
	RTC.COMP = time;
	rtc_data.alarm_low = time;
	rtc_data.alarm_high = time >> 16;

	while (rtc_is_busy());
    10f8:	80 fd       	sbrc	r24, 0
    10fa:	fd cf       	rjmp	.-6      	; 0x10f6 <rtc_set_alarm+0x1c>

	RTC.INTFLAGS = RTC_COMPIF_bm;
    10fc:	e0 e0       	ldi	r30, 0x00	; 0
    10fe:	f4 e0       	ldi	r31, 0x04	; 4
    1100:	82 e0       	ldi	r24, 0x02	; 2
    1102:	83 83       	std	Z+3, r24	; 0x03
	RTC.INTCTRL = (uint8_t)RTC_COMPARE_INT_LEVEL
    1104:	85 e0       	ldi	r24, 0x05	; 5
    1106:	82 83       	std	Z+2, r24	; 0x02
    1108:	08 95       	ret

0000110a <rtc_set_callback>:
 *
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
    110a:	80 93 0d 23 	sts	0x230D, r24
    110e:	90 93 0e 23 	sts	0x230E, r25
    1112:	08 95       	ret

00001114 <rtc_init>:
 * \note The RTC clock source used by the RTC module should be set up before
 *       calling this function. 
 */
void rtc_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1114:	64 e0       	ldi	r22, 0x04	; 4
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	0e 94 4f 13 	call	0x269e	; 0x269e <sysclk_enable_module>
	RTC.PER = 0xffff;
    111c:	e0 e0       	ldi	r30, 0x00	; 0
    111e:	f4 e0       	ldi	r31, 0x04	; 4
    1120:	8f ef       	ldi	r24, 0xFF	; 255
    1122:	9f ef       	ldi	r25, 0xFF	; 255
    1124:	82 87       	std	Z+10, r24	; 0x0a
    1126:	93 87       	std	Z+11, r25	; 0x0b
	RTC.CNT = 0;
    1128:	10 86       	std	Z+8, r1	; 0x08
    112a:	11 86       	std	Z+9, r1	; 0x09

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    112c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    112e:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1130:	e4 e0       	ldi	r30, 0x04	; 4
    1132:	f3 e2       	ldi	r31, 0x23	; 35
    1134:	90 81       	ld	r25, Z
    1136:	9f 5f       	subi	r25, 0xFF	; 255
    1138:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    113a:	8f bf       	out	0x3f, r24	; 63
	/* Since overflow interrupt is needed all the time we limit sleep to
	 * power-save.
	 */
	sleepmgr_lock_mode(SLEEPMGR_PSAVE);
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    113c:	e0 e0       	ldi	r30, 0x00	; 0
    113e:	f4 e0       	ldi	r31, 0x04	; 4
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	82 83       	std	Z+2, r24	; 0x02
	RTC.CTRL = CONFIG_RTC_PRESCALER;
    1144:	80 83       	st	Z, r24
    1146:	08 95       	ret

00001148 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1148:	81 11       	cpse	r24, r1
    114a:	18 c0       	rjmp	.+48     	; 0x117c <udd_sleep_mode+0x34>
    114c:	90 91 00 23 	lds	r25, 0x2300
    1150:	99 23       	and	r25, r25
    1152:	89 f0       	breq	.+34     	; 0x1176 <udd_sleep_mode+0x2e>
    1154:	9f b7       	in	r25, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	e2 e0       	ldi	r30, 0x02	; 2
    115a:	f3 e2       	ldi	r31, 0x23	; 35
    115c:	20 81       	ld	r18, Z
    115e:	21 50       	subi	r18, 0x01	; 1
    1160:	20 83       	st	Z, r18
    1162:	9f bf       	out	0x3f, r25	; 63
    1164:	08 c0       	rjmp	.+16     	; 0x1176 <udd_sleep_mode+0x2e>
    1166:	9f b7       	in	r25, 0x3f	; 63
    1168:	f8 94       	cli
    116a:	e2 e0       	ldi	r30, 0x02	; 2
    116c:	f3 e2       	ldi	r31, 0x23	; 35
    116e:	20 81       	ld	r18, Z
    1170:	2f 5f       	subi	r18, 0xFF	; 255
    1172:	20 83       	st	Z, r18
    1174:	9f bf       	out	0x3f, r25	; 63
    1176:	80 93 00 23 	sts	0x2300, r24
    117a:	08 95       	ret
    117c:	90 91 00 23 	lds	r25, 0x2300
    1180:	99 23       	and	r25, r25
    1182:	89 f3       	breq	.-30     	; 0x1166 <udd_sleep_mode+0x1e>
    1184:	f8 cf       	rjmp	.-16     	; 0x1176 <udd_sleep_mode+0x2e>

00001186 <udd_ctrl_init>:
    1186:	0f 93       	push	r16
    1188:	e8 ec       	ldi	r30, 0xC8	; 200
    118a:	f4 e0       	ldi	r31, 0x04	; 4
    118c:	80 81       	ld	r24, Z
    118e:	8f 7d       	andi	r24, 0xDF	; 223
    1190:	80 83       	st	Z, r24
    1192:	80 81       	ld	r24, Z
    1194:	8f 7d       	andi	r24, 0xDF	; 223
    1196:	80 83       	st	Z, r24
    1198:	e8 ec       	ldi	r30, 0xC8	; 200
    119a:	f2 e2       	ldi	r31, 0x22	; 34
    119c:	02 e0       	ldi	r16, 0x02	; 2
    119e:	05 93       	las	Z, r16
    11a0:	10 92 ca 22 	sts	0x22CA, r1
    11a4:	10 92 cb 22 	sts	0x22CB, r1
    11a8:	00 e2       	ldi	r16, 0x20	; 32
    11aa:	06 93       	lac	Z, r16
    11ac:	00 e4       	ldi	r16, 0x40	; 64
    11ae:	06 93       	lac	Z, r16
    11b0:	e0 ec       	ldi	r30, 0xC0	; 192
    11b2:	f2 e2       	ldi	r31, 0x22	; 34
    11b4:	00 e2       	ldi	r16, 0x20	; 32
    11b6:	06 93       	lac	Z, r16
    11b8:	00 e4       	ldi	r16, 0x40	; 64
    11ba:	06 93       	lac	Z, r16
    11bc:	10 92 1b 23 	sts	0x231B, r1
    11c0:	10 92 1c 23 	sts	0x231C, r1
    11c4:	10 92 1d 23 	sts	0x231D, r1
    11c8:	10 92 1e 23 	sts	0x231E, r1
    11cc:	10 92 19 23 	sts	0x2319, r1
    11d0:	10 92 1a 23 	sts	0x231A, r1
    11d4:	10 92 ab 22 	sts	0x22AB, r1
    11d8:	0f 91       	pop	r16
    11da:	08 95       	ret

000011dc <udd_ctrl_stall_data>:
    11dc:	0f 93       	push	r16
    11de:	85 e0       	ldi	r24, 0x05	; 5
    11e0:	80 93 ab 22 	sts	0x22AB, r24
    11e4:	e9 ec       	ldi	r30, 0xC9	; 201
    11e6:	f2 e2       	ldi	r31, 0x22	; 34
    11e8:	04 e0       	ldi	r16, 0x04	; 4
    11ea:	05 93       	las	Z, r16
    11ec:	e1 ec       	ldi	r30, 0xC1	; 193
    11ee:	f2 e2       	ldi	r31, 0x22	; 34
    11f0:	04 e0       	ldi	r16, 0x04	; 4
    11f2:	05 93       	las	Z, r16
    11f4:	0f 91       	pop	r16
    11f6:	08 95       	ret

000011f8 <udd_ctrl_send_zlp_in>:
    11f8:	0f 93       	push	r16
    11fa:	83 e0       	ldi	r24, 0x03	; 3
    11fc:	80 93 ab 22 	sts	0x22AB, r24
    1200:	10 92 ca 22 	sts	0x22CA, r1
    1204:	10 92 cb 22 	sts	0x22CB, r1
    1208:	e8 ec       	ldi	r30, 0xC8	; 200
    120a:	f2 e2       	ldi	r31, 0x22	; 34
    120c:	02 e0       	ldi	r16, 0x02	; 2
    120e:	06 93       	lac	Z, r16
    1210:	0f 91       	pop	r16
    1212:	08 95       	ret

00001214 <udd_ctrl_endofrequest>:
    1214:	e0 91 1b 23 	lds	r30, 0x231B
    1218:	f0 91 1c 23 	lds	r31, 0x231C
    121c:	30 97       	sbiw	r30, 0x00	; 0
    121e:	09 f0       	breq	.+2      	; 0x1222 <udd_ctrl_endofrequest+0xe>
    1220:	19 95       	eicall
    1222:	08 95       	ret

00001224 <udd_ctrl_in_sent>:
    1224:	0f 93       	push	r16
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	80 91 ab 22 	lds	r24, 0x22AB
    122e:	83 30       	cpi	r24, 0x03	; 3
    1230:	19 f4       	brne	.+6      	; 0x1238 <udd_ctrl_in_sent+0x14>
    1232:	f0 df       	rcall	.-32     	; 0x1214 <udd_ctrl_endofrequest>
    1234:	a8 df       	rcall	.-176    	; 0x1186 <udd_ctrl_init>
    1236:	60 c0       	rjmp	.+192    	; 0x12f8 <udd_ctrl_in_sent+0xd4>
    1238:	80 91 a7 22 	lds	r24, 0x22A7
    123c:	90 91 a8 22 	lds	r25, 0x22A8
    1240:	c0 91 19 23 	lds	r28, 0x2319
    1244:	d0 91 1a 23 	lds	r29, 0x231A
    1248:	c8 1b       	sub	r28, r24
    124a:	d9 0b       	sbc	r29, r25
    124c:	71 f5       	brne	.+92     	; 0x12aa <udd_ctrl_in_sent+0x86>
    124e:	20 91 a9 22 	lds	r18, 0x22A9
    1252:	30 91 aa 22 	lds	r19, 0x22AA
    1256:	82 0f       	add	r24, r18
    1258:	93 1f       	adc	r25, r19
    125a:	80 93 a9 22 	sts	0x22A9, r24
    125e:	90 93 aa 22 	sts	0x22AA, r25
    1262:	20 91 15 23 	lds	r18, 0x2315
    1266:	30 91 16 23 	lds	r19, 0x2316
    126a:	82 17       	cp	r24, r18
    126c:	93 07       	cpc	r25, r19
    126e:	21 f0       	breq	.+8      	; 0x1278 <udd_ctrl_in_sent+0x54>
    1270:	80 91 c2 21 	lds	r24, 0x21C2
    1274:	88 23       	and	r24, r24
    1276:	41 f0       	breq	.+16     	; 0x1288 <udd_ctrl_in_sent+0x64>
    1278:	84 e0       	ldi	r24, 0x04	; 4
    127a:	80 93 ab 22 	sts	0x22AB, r24
    127e:	e0 ec       	ldi	r30, 0xC0	; 192
    1280:	f2 e2       	ldi	r31, 0x22	; 34
    1282:	02 e0       	ldi	r16, 0x02	; 2
    1284:	06 93       	lac	Z, r16
    1286:	38 c0       	rjmp	.+112    	; 0x12f8 <udd_ctrl_in_sent+0xd4>
    1288:	e0 91 1d 23 	lds	r30, 0x231D
    128c:	f0 91 1e 23 	lds	r31, 0x231E
    1290:	30 97       	sbiw	r30, 0x00	; 0
    1292:	99 f0       	breq	.+38     	; 0x12ba <udd_ctrl_in_sent+0x96>
    1294:	19 95       	eicall
    1296:	88 23       	and	r24, r24
    1298:	81 f0       	breq	.+32     	; 0x12ba <udd_ctrl_in_sent+0x96>
    129a:	10 92 a7 22 	sts	0x22A7, r1
    129e:	10 92 a8 22 	sts	0x22A8, r1
    12a2:	c0 91 19 23 	lds	r28, 0x2319
    12a6:	d0 91 1a 23 	lds	r29, 0x231A
    12aa:	c0 34       	cpi	r28, 0x40	; 64
    12ac:	d1 05       	cpc	r29, r1
    12ae:	28 f0       	brcs	.+10     	; 0x12ba <udd_ctrl_in_sent+0x96>
    12b0:	10 92 c2 21 	sts	0x21C2, r1
    12b4:	c0 e4       	ldi	r28, 0x40	; 64
    12b6:	d0 e0       	ldi	r29, 0x00	; 0
    12b8:	03 c0       	rjmp	.+6      	; 0x12c0 <udd_ctrl_in_sent+0x9c>
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	80 93 c2 21 	sts	0x21C2, r24
    12c0:	c0 93 ca 22 	sts	0x22CA, r28
    12c4:	d0 93 cb 22 	sts	0x22CB, r29
    12c8:	80 91 a7 22 	lds	r24, 0x22A7
    12cc:	90 91 a8 22 	lds	r25, 0x22A8
    12d0:	20 91 17 23 	lds	r18, 0x2317
    12d4:	30 91 18 23 	lds	r19, 0x2318
    12d8:	28 0f       	add	r18, r24
    12da:	39 1f       	adc	r19, r25
    12dc:	20 93 cc 22 	sts	0x22CC, r18
    12e0:	30 93 cd 22 	sts	0x22CD, r19
    12e4:	c8 0f       	add	r28, r24
    12e6:	d9 1f       	adc	r29, r25
    12e8:	c0 93 a7 22 	sts	0x22A7, r28
    12ec:	d0 93 a8 22 	sts	0x22A8, r29
    12f0:	e8 ec       	ldi	r30, 0xC8	; 200
    12f2:	f2 e2       	ldi	r31, 0x22	; 34
    12f4:	02 e0       	ldi	r16, 0x02	; 2
    12f6:	06 93       	lac	Z, r16
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	0f 91       	pop	r16
    12fe:	08 95       	ret

00001300 <udd_ep_get_size>:
    1300:	fc 01       	movw	r30, r24
    1302:	81 81       	ldd	r24, Z+1	; 0x01
    1304:	87 70       	andi	r24, 0x07	; 7
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	fc 01       	movw	r30, r24
    130a:	31 97       	sbiw	r30, 0x01	; 1
    130c:	e7 30       	cpi	r30, 0x07	; 7
    130e:	f1 05       	cpc	r31, r1
    1310:	20 f4       	brcc	.+8      	; 0x131a <udd_ep_get_size+0x1a>
    1312:	e2 50       	subi	r30, 0x02	; 2
    1314:	ff 4f       	sbci	r31, 0xFF	; 255
    1316:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__tablejump2__>
    131a:	88 e0       	ldi	r24, 0x08	; 8
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	08 95       	ret
    1320:	80 e2       	ldi	r24, 0x20	; 32
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	08 95       	ret
    1326:	80 e4       	ldi	r24, 0x40	; 64
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	08 95       	ret
    132c:	80 e8       	ldi	r24, 0x80	; 128
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	08 95       	ret
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	08 95       	ret
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	92 e0       	ldi	r25, 0x02	; 2
    133c:	08 95       	ret
    133e:	8f ef       	ldi	r24, 0xFF	; 255
    1340:	93 e0       	ldi	r25, 0x03	; 3
    1342:	08 95       	ret
    1344:	80 e1       	ldi	r24, 0x10	; 16
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	08 95       	ret

0000134a <udd_ep_get_job>:
    134a:	28 2f       	mov	r18, r24
    134c:	2f 70       	andi	r18, 0x0F	; 15
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	22 0f       	add	r18, r18
    1352:	33 1f       	adc	r19, r19
    1354:	99 27       	eor	r25, r25
    1356:	87 fd       	sbrc	r24, 7
    1358:	90 95       	com	r25
    135a:	88 27       	eor	r24, r24
    135c:	99 0f       	add	r25, r25
    135e:	88 1f       	adc	r24, r24
    1360:	99 27       	eor	r25, r25
    1362:	82 0f       	add	r24, r18
    1364:	93 1f       	adc	r25, r19
    1366:	02 97       	sbiw	r24, 0x02	; 2
    1368:	9c 01       	movw	r18, r24
    136a:	22 0f       	add	r18, r18
    136c:	33 1f       	adc	r19, r19
    136e:	22 0f       	add	r18, r18
    1370:	33 1f       	adc	r19, r19
    1372:	22 0f       	add	r18, r18
    1374:	33 1f       	adc	r19, r19
    1376:	82 0f       	add	r24, r18
    1378:	93 1f       	adc	r25, r19
    137a:	8d 5b       	subi	r24, 0xBD	; 189
    137c:	9d 4d       	sbci	r25, 0xDD	; 221
    137e:	08 95       	ret

00001380 <udd_ctrl_interrupt_tc_setup>:
    1380:	0f 93       	push	r16
    1382:	cf 93       	push	r28
    1384:	80 91 cc 04 	lds	r24, 0x04CC
    1388:	80 ff       	sbrs	r24, 0
    138a:	62 c0       	rjmp	.+196    	; 0x1450 <udd_ctrl_interrupt_tc_setup+0xd0>
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	80 93 cc 04 	sts	0x04CC, r24
    1392:	e0 ec       	ldi	r30, 0xC0	; 192
    1394:	f2 e2       	ldi	r31, 0x22	; 34
    1396:	00 e8       	ldi	r16, 0x80	; 128
    1398:	06 93       	lac	Z, r16
    139a:	e8 ec       	ldi	r30, 0xC8	; 200
    139c:	f2 e2       	ldi	r31, 0x22	; 34
    139e:	00 e8       	ldi	r16, 0x80	; 128
    13a0:	06 93       	lac	Z, r16
    13a2:	80 93 ca 04 	sts	0x04CA, r24
    13a6:	e0 ec       	ldi	r30, 0xC0	; 192
    13a8:	f2 e2       	ldi	r31, 0x22	; 34
    13aa:	00 e1       	ldi	r16, 0x10	; 16
    13ac:	06 93       	lac	Z, r16
    13ae:	80 91 ab 22 	lds	r24, 0x22AB
    13b2:	88 23       	and	r24, r24
    13b4:	29 f0       	breq	.+10     	; 0x13c0 <udd_ctrl_interrupt_tc_setup+0x40>
    13b6:	83 50       	subi	r24, 0x03	; 3
    13b8:	82 30       	cpi	r24, 0x02	; 2
    13ba:	08 f4       	brcc	.+2      	; 0x13be <udd_ctrl_interrupt_tc_setup+0x3e>
    13bc:	2b df       	rcall	.-426    	; 0x1214 <udd_ctrl_endofrequest>
    13be:	e3 de       	rcall	.-570    	; 0x1186 <udd_ctrl_init>
    13c0:	80 91 c2 22 	lds	r24, 0x22C2
    13c4:	90 91 c3 22 	lds	r25, 0x22C3
    13c8:	08 97       	sbiw	r24, 0x08	; 8
    13ca:	09 f0       	breq	.+2      	; 0x13ce <udd_ctrl_interrupt_tc_setup+0x4e>
    13cc:	43 c0       	rjmp	.+134    	; 0x1454 <udd_ctrl_interrupt_tc_setup+0xd4>
    13ce:	88 e0       	ldi	r24, 0x08	; 8
    13d0:	e7 e6       	ldi	r30, 0x67	; 103
    13d2:	f2 e2       	ldi	r31, 0x22	; 34
    13d4:	af e0       	ldi	r26, 0x0F	; 15
    13d6:	b3 e2       	ldi	r27, 0x23	; 35
    13d8:	01 90       	ld	r0, Z+
    13da:	0d 92       	st	X+, r0
    13dc:	8a 95       	dec	r24
    13de:	e1 f7       	brne	.-8      	; 0x13d8 <udd_ctrl_interrupt_tc_setup+0x58>
    13e0:	e8 ec       	ldi	r30, 0xC8	; 200
    13e2:	f4 e0       	ldi	r31, 0x04	; 4
    13e4:	80 81       	ld	r24, Z
    13e6:	80 62       	ori	r24, 0x20	; 32
    13e8:	80 83       	st	Z, r24
    13ea:	80 81       	ld	r24, Z
    13ec:	80 62       	ori	r24, 0x20	; 32
    13ee:	80 83       	st	Z, r24
    13f0:	d4 db       	rcall	.-2136   	; 0xb9a <udc_process_setup>
    13f2:	c8 2f       	mov	r28, r24
    13f4:	81 11       	cpse	r24, r1
    13f6:	03 c0       	rjmp	.+6      	; 0x13fe <udd_ctrl_interrupt_tc_setup+0x7e>
    13f8:	f1 de       	rcall	.-542    	; 0x11dc <udd_ctrl_stall_data>
    13fa:	c1 e0       	ldi	r28, 0x01	; 1
    13fc:	2c c0       	rjmp	.+88     	; 0x1456 <udd_ctrl_interrupt_tc_setup+0xd6>
    13fe:	80 91 0f 23 	lds	r24, 0x230F
    1402:	88 23       	and	r24, r24
    1404:	6c f4       	brge	.+26     	; 0x1420 <udd_ctrl_interrupt_tc_setup+0xa0>
    1406:	10 92 a9 22 	sts	0x22A9, r1
    140a:	10 92 aa 22 	sts	0x22AA, r1
    140e:	10 92 a7 22 	sts	0x22A7, r1
    1412:	10 92 a8 22 	sts	0x22A8, r1
    1416:	82 e0       	ldi	r24, 0x02	; 2
    1418:	80 93 ab 22 	sts	0x22AB, r24
    141c:	03 df       	rcall	.-506    	; 0x1224 <udd_ctrl_in_sent>
    141e:	1b c0       	rjmp	.+54     	; 0x1456 <udd_ctrl_interrupt_tc_setup+0xd6>
    1420:	20 91 15 23 	lds	r18, 0x2315
    1424:	30 91 16 23 	lds	r19, 0x2316
    1428:	23 2b       	or	r18, r19
    142a:	11 f4       	brne	.+4      	; 0x1430 <udd_ctrl_interrupt_tc_setup+0xb0>
    142c:	e5 de       	rcall	.-566    	; 0x11f8 <udd_ctrl_send_zlp_in>
    142e:	13 c0       	rjmp	.+38     	; 0x1456 <udd_ctrl_interrupt_tc_setup+0xd6>
    1430:	10 92 a9 22 	sts	0x22A9, r1
    1434:	10 92 aa 22 	sts	0x22AA, r1
    1438:	10 92 a7 22 	sts	0x22A7, r1
    143c:	10 92 a8 22 	sts	0x22A8, r1
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	80 93 ab 22 	sts	0x22AB, r24
    1446:	e0 ec       	ldi	r30, 0xC0	; 192
    1448:	f2 e2       	ldi	r31, 0x22	; 34
    144a:	02 e0       	ldi	r16, 0x02	; 2
    144c:	06 93       	lac	Z, r16
    144e:	03 c0       	rjmp	.+6      	; 0x1456 <udd_ctrl_interrupt_tc_setup+0xd6>
    1450:	c0 e0       	ldi	r28, 0x00	; 0
    1452:	01 c0       	rjmp	.+2      	; 0x1456 <udd_ctrl_interrupt_tc_setup+0xd6>
    1454:	c1 e0       	ldi	r28, 0x01	; 1
    1456:	8c 2f       	mov	r24, r28
    1458:	cf 91       	pop	r28
    145a:	0f 91       	pop	r16
    145c:	08 95       	ret

0000145e <udd_ep_trans_complet>:
    145e:	bf 92       	push	r11
    1460:	cf 92       	push	r12
    1462:	df 92       	push	r13
    1464:	ef 92       	push	r14
    1466:	ff 92       	push	r15
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	b8 2e       	mov	r11, r24
    1472:	6b df       	rcall	.-298    	; 0x134a <udd_ep_get_job>
    1474:	ec 01       	movw	r28, r24
    1476:	1b 2d       	mov	r17, r11
    1478:	11 1f       	adc	r17, r17
    147a:	11 27       	eor	r17, r17
    147c:	11 1f       	adc	r17, r17
    147e:	8b 2d       	mov	r24, r11
    1480:	8f 70       	andi	r24, 0x0F	; 15
    1482:	e8 2e       	mov	r14, r24
    1484:	f1 2c       	mov	r15, r1
    1486:	ee 0c       	add	r14, r14
    1488:	ff 1c       	adc	r15, r15
    148a:	e1 0e       	add	r14, r17
    148c:	f1 1c       	adc	r15, r1
    148e:	c7 01       	movw	r24, r14
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	9c 01       	movw	r18, r24
    149e:	20 54       	subi	r18, 0x40	; 64
    14a0:	3d 4d       	sbci	r19, 0xDD	; 221
    14a2:	79 01       	movw	r14, r18
    14a4:	c9 01       	movw	r24, r18
    14a6:	2c df       	rcall	.-424    	; 0x1300 <udd_ep_get_size>
    14a8:	6c 01       	movw	r12, r24
    14aa:	11 23       	and	r17, r17
    14ac:	09 f4       	brne	.+2      	; 0x14b0 <udd_ep_trans_complet+0x52>
    14ae:	5b c0       	rjmp	.+182    	; 0x1566 <udd_ep_trans_complet+0x108>
    14b0:	d7 01       	movw	r26, r14
    14b2:	16 96       	adiw	r26, 0x06	; 6
    14b4:	2d 91       	ld	r18, X+
    14b6:	3c 91       	ld	r19, X
    14b8:	17 97       	sbiw	r26, 0x07	; 7
    14ba:	8d 81       	ldd	r24, Y+5	; 0x05
    14bc:	9e 81       	ldd	r25, Y+6	; 0x06
    14be:	28 0f       	add	r18, r24
    14c0:	39 1f       	adc	r19, r25
    14c2:	2d 83       	std	Y+5, r18	; 0x05
    14c4:	3e 83       	std	Y+6, r19	; 0x06
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ca:	28 17       	cp	r18, r24
    14cc:	39 07       	cpc	r19, r25
    14ce:	c9 f1       	breq	.+114    	; 0x1542 <udd_ep_trans_complet+0xe4>
    14d0:	fc 01       	movw	r30, r24
    14d2:	e2 1b       	sub	r30, r18
    14d4:	f3 0b       	sbc	r31, r19
    14d6:	9f 01       	movw	r18, r30
    14d8:	21 15       	cp	r18, r1
    14da:	f4 e0       	ldi	r31, 0x04	; 4
    14dc:	3f 07       	cpc	r19, r31
    14de:	40 f0       	brcs	.+16     	; 0x14f0 <udd_ep_trans_complet+0x92>
    14e0:	2f ef       	ldi	r18, 0xFF	; 255
    14e2:	33 e0       	ldi	r19, 0x03	; 3
    14e4:	c9 01       	movw	r24, r18
    14e6:	b6 01       	movw	r22, r12
    14e8:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__udivmodhi4>
    14ec:	28 1b       	sub	r18, r24
    14ee:	39 0b       	sbc	r19, r25
    14f0:	88 81       	ld	r24, Y
    14f2:	81 ff       	sbrs	r24, 1
    14f4:	0a c0       	rjmp	.+20     	; 0x150a <udd_ep_trans_complet+0xac>
    14f6:	c9 01       	movw	r24, r18
    14f8:	b6 01       	movw	r22, r12
    14fa:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__udivmodhi4>
    14fe:	41 e0       	ldi	r20, 0x01	; 1
    1500:	89 2b       	or	r24, r25
    1502:	09 f0       	breq	.+2      	; 0x1506 <udd_ep_trans_complet+0xa8>
    1504:	40 e0       	ldi	r20, 0x00	; 0
    1506:	94 2f       	mov	r25, r20
    1508:	01 c0       	rjmp	.+2      	; 0x150c <udd_ep_trans_complet+0xae>
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	88 81       	ld	r24, Y
    150e:	90 fb       	bst	r25, 0
    1510:	81 f9       	bld	r24, 1
    1512:	88 83       	st	Y, r24
    1514:	d7 01       	movw	r26, r14
    1516:	16 96       	adiw	r26, 0x06	; 6
    1518:	1d 92       	st	X+, r1
    151a:	1c 92       	st	X, r1
    151c:	17 97       	sbiw	r26, 0x07	; 7
    151e:	12 96       	adiw	r26, 0x02	; 2
    1520:	2d 93       	st	X+, r18
    1522:	3c 93       	st	X, r19
    1524:	13 97       	sbiw	r26, 0x03	; 3
    1526:	29 81       	ldd	r18, Y+1	; 0x01
    1528:	3a 81       	ldd	r19, Y+2	; 0x02
    152a:	8d 81       	ldd	r24, Y+5	; 0x05
    152c:	9e 81       	ldd	r25, Y+6	; 0x06
    152e:	82 0f       	add	r24, r18
    1530:	93 1f       	adc	r25, r19
    1532:	14 96       	adiw	r26, 0x04	; 4
    1534:	8d 93       	st	X+, r24
    1536:	9c 93       	st	X, r25
    1538:	15 97       	sbiw	r26, 0x05	; 5
    153a:	f7 01       	movw	r30, r14
    153c:	02 e0       	ldi	r16, 0x02	; 2
    153e:	06 93       	lac	Z, r16
    1540:	98 c0       	rjmp	.+304    	; 0x1672 <udd_ep_trans_complet+0x214>
    1542:	88 81       	ld	r24, Y
    1544:	81 ff       	sbrs	r24, 1
    1546:	87 c0       	rjmp	.+270    	; 0x1656 <udd_ep_trans_complet+0x1f8>
    1548:	8d 7f       	andi	r24, 0xFD	; 253
    154a:	88 83       	st	Y, r24
    154c:	d7 01       	movw	r26, r14
    154e:	16 96       	adiw	r26, 0x06	; 6
    1550:	1d 92       	st	X+, r1
    1552:	1c 92       	st	X, r1
    1554:	17 97       	sbiw	r26, 0x07	; 7
    1556:	12 96       	adiw	r26, 0x02	; 2
    1558:	1d 92       	st	X+, r1
    155a:	1c 92       	st	X, r1
    155c:	13 97       	sbiw	r26, 0x03	; 3
    155e:	f7 01       	movw	r30, r14
    1560:	02 e0       	ldi	r16, 0x02	; 2
    1562:	06 93       	lac	Z, r16
    1564:	86 c0       	rjmp	.+268    	; 0x1672 <udd_ep_trans_complet+0x214>
    1566:	d7 01       	movw	r26, r14
    1568:	12 96       	adiw	r26, 0x02	; 2
    156a:	0d 91       	ld	r16, X+
    156c:	1c 91       	ld	r17, X
    156e:	13 97       	sbiw	r26, 0x03	; 3
    1570:	88 81       	ld	r24, Y
    1572:	82 ff       	sbrs	r24, 2
    1574:	15 c0       	rjmp	.+42     	; 0x15a0 <udd_ep_trans_complet+0x142>
    1576:	e9 81       	ldd	r30, Y+1	; 0x01
    1578:	fa 81       	ldd	r31, Y+2	; 0x02
    157a:	2d 81       	ldd	r18, Y+5	; 0x05
    157c:	3e 81       	ldd	r19, Y+6	; 0x06
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	b6 01       	movw	r22, r12
    1584:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__udivmodhi4>
    1588:	b0 e4       	ldi	r27, 0x40	; 64
    158a:	bb 9e       	mul	r11, r27
    158c:	b0 01       	movw	r22, r0
    158e:	11 24       	eor	r1, r1
    1590:	6d 57       	subi	r22, 0x7D	; 125
    1592:	7e 4d       	sbci	r23, 0xDE	; 222
    1594:	ac 01       	movw	r20, r24
    1596:	cf 01       	movw	r24, r30
    1598:	82 0f       	add	r24, r18
    159a:	93 1f       	adc	r25, r19
    159c:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <memcpy>
    15a0:	2d 81       	ldd	r18, Y+5	; 0x05
    15a2:	3e 81       	ldd	r19, Y+6	; 0x06
    15a4:	20 0f       	add	r18, r16
    15a6:	31 1f       	adc	r19, r17
    15a8:	2d 83       	std	Y+5, r18	; 0x05
    15aa:	3e 83       	std	Y+6, r19	; 0x06
    15ac:	eb 81       	ldd	r30, Y+3	; 0x03
    15ae:	fc 81       	ldd	r31, Y+4	; 0x04
    15b0:	e2 17       	cp	r30, r18
    15b2:	f3 07       	cpc	r31, r19
    15b4:	10 f4       	brcc	.+4      	; 0x15ba <udd_ep_trans_complet+0x15c>
    15b6:	ed 83       	std	Y+5, r30	; 0x05
    15b8:	fe 83       	std	Y+6, r31	; 0x06
    15ba:	d7 01       	movw	r26, r14
    15bc:	16 96       	adiw	r26, 0x06	; 6
    15be:	8d 91       	ld	r24, X+
    15c0:	9c 91       	ld	r25, X
    15c2:	17 97       	sbiw	r26, 0x07	; 7
    15c4:	80 17       	cp	r24, r16
    15c6:	91 07       	cpc	r25, r17
    15c8:	09 f0       	breq	.+2      	; 0x15cc <udd_ep_trans_complet+0x16e>
    15ca:	45 c0       	rjmp	.+138    	; 0x1656 <udd_ep_trans_complet+0x1f8>
    15cc:	8d 81       	ldd	r24, Y+5	; 0x05
    15ce:	9e 81       	ldd	r25, Y+6	; 0x06
    15d0:	e8 17       	cp	r30, r24
    15d2:	f9 07       	cpc	r31, r25
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <udd_ep_trans_complet+0x17a>
    15d6:	3f c0       	rjmp	.+126    	; 0x1656 <udd_ep_trans_complet+0x1f8>
    15d8:	e8 1b       	sub	r30, r24
    15da:	f9 0b       	sbc	r31, r25
    15dc:	e1 15       	cp	r30, r1
    15de:	b4 e0       	ldi	r27, 0x04	; 4
    15e0:	fb 07       	cpc	r31, r27
    15e2:	48 f0       	brcs	.+18     	; 0x15f6 <udd_ep_trans_complet+0x198>
    15e4:	ef ef       	ldi	r30, 0xFF	; 255
    15e6:	f3 e0       	ldi	r31, 0x03	; 3
    15e8:	cf 01       	movw	r24, r30
    15ea:	b6 01       	movw	r22, r12
    15ec:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__udivmodhi4>
    15f0:	e8 1b       	sub	r30, r24
    15f2:	f9 0b       	sbc	r31, r25
    15f4:	06 c0       	rjmp	.+12     	; 0x1602 <udd_ep_trans_complet+0x1a4>
    15f6:	cf 01       	movw	r24, r30
    15f8:	b6 01       	movw	r22, r12
    15fa:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__udivmodhi4>
    15fe:	e8 1b       	sub	r30, r24
    1600:	f9 0b       	sbc	r31, r25
    1602:	d7 01       	movw	r26, r14
    1604:	12 96       	adiw	r26, 0x02	; 2
    1606:	1d 92       	st	X+, r1
    1608:	1c 92       	st	X, r1
    160a:	13 97       	sbiw	r26, 0x03	; 3
    160c:	ec 15       	cp	r30, r12
    160e:	fd 05       	cpc	r31, r13
    1610:	78 f4       	brcc	.+30     	; 0x1630 <udd_ep_trans_complet+0x1d2>
    1612:	88 81       	ld	r24, Y
    1614:	84 60       	ori	r24, 0x04	; 4
    1616:	88 83       	st	Y, r24
    1618:	b0 e4       	ldi	r27, 0x40	; 64
    161a:	bb 9e       	mul	r11, r27
    161c:	c0 01       	movw	r24, r0
    161e:	11 24       	eor	r1, r1
    1620:	8d 57       	subi	r24, 0x7D	; 125
    1622:	9e 4d       	sbci	r25, 0xDE	; 222
    1624:	f7 01       	movw	r30, r14
    1626:	84 83       	std	Z+4, r24	; 0x04
    1628:	95 83       	std	Z+5, r25	; 0x05
    162a:	c6 82       	std	Z+6, r12	; 0x06
    162c:	d7 82       	std	Z+7, r13	; 0x07
    162e:	0f c0       	rjmp	.+30     	; 0x164e <udd_ep_trans_complet+0x1f0>
    1630:	29 81       	ldd	r18, Y+1	; 0x01
    1632:	3a 81       	ldd	r19, Y+2	; 0x02
    1634:	8d 81       	ldd	r24, Y+5	; 0x05
    1636:	9e 81       	ldd	r25, Y+6	; 0x06
    1638:	82 0f       	add	r24, r18
    163a:	93 1f       	adc	r25, r19
    163c:	d7 01       	movw	r26, r14
    163e:	14 96       	adiw	r26, 0x04	; 4
    1640:	8d 93       	st	X+, r24
    1642:	9c 93       	st	X, r25
    1644:	15 97       	sbiw	r26, 0x05	; 5
    1646:	16 96       	adiw	r26, 0x06	; 6
    1648:	ed 93       	st	X+, r30
    164a:	fc 93       	st	X, r31
    164c:	17 97       	sbiw	r26, 0x07	; 7
    164e:	f7 01       	movw	r30, r14
    1650:	02 e0       	ldi	r16, 0x02	; 2
    1652:	06 93       	lac	Z, r16
    1654:	0e c0       	rjmp	.+28     	; 0x1672 <udd_ep_trans_complet+0x214>
    1656:	88 81       	ld	r24, Y
    1658:	80 ff       	sbrs	r24, 0
    165a:	0b c0       	rjmp	.+22     	; 0x1672 <udd_ep_trans_complet+0x214>
    165c:	8e 7f       	andi	r24, 0xFE	; 254
    165e:	88 83       	st	Y, r24
    1660:	ef 81       	ldd	r30, Y+7	; 0x07
    1662:	f8 85       	ldd	r31, Y+8	; 0x08
    1664:	30 97       	sbiw	r30, 0x00	; 0
    1666:	29 f0       	breq	.+10     	; 0x1672 <udd_ep_trans_complet+0x214>
    1668:	6d 81       	ldd	r22, Y+5	; 0x05
    166a:	7e 81       	ldd	r23, Y+6	; 0x06
    166c:	4b 2d       	mov	r20, r11
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	19 95       	eicall
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	1f 91       	pop	r17
    1678:	0f 91       	pop	r16
    167a:	ff 90       	pop	r15
    167c:	ef 90       	pop	r14
    167e:	df 90       	pop	r13
    1680:	cf 90       	pop	r12
    1682:	bf 90       	pop	r11
    1684:	08 95       	ret

00001686 <udd_attach>:
    1686:	cf 93       	push	r28
    1688:	cf b7       	in	r28, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	5c dd       	rcall	.-1352   	; 0x1148 <udd_sleep_mode>
    1690:	ea ec       	ldi	r30, 0xCA	; 202
    1692:	f4 e0       	ldi	r31, 0x04	; 4
    1694:	80 e4       	ldi	r24, 0x40	; 64
    1696:	80 83       	st	Z, r24
    1698:	80 e2       	ldi	r24, 0x20	; 32
    169a:	80 83       	st	Z, r24
    169c:	e1 ec       	ldi	r30, 0xC1	; 193
    169e:	f4 e0       	ldi	r31, 0x04	; 4
    16a0:	80 81       	ld	r24, Z
    16a2:	81 60       	ori	r24, 0x01	; 1
    16a4:	80 83       	st	Z, r24
    16a6:	a9 ec       	ldi	r26, 0xC9	; 201
    16a8:	b4 e0       	ldi	r27, 0x04	; 4
    16aa:	8c 91       	ld	r24, X
    16ac:	82 60       	ori	r24, 0x02	; 2
    16ae:	8c 93       	st	X, r24
    16b0:	e8 ec       	ldi	r30, 0xC8	; 200
    16b2:	f4 e0       	ldi	r31, 0x04	; 4
    16b4:	80 81       	ld	r24, Z
    16b6:	80 64       	ori	r24, 0x40	; 64
    16b8:	80 83       	st	Z, r24
    16ba:	8c 91       	ld	r24, X
    16bc:	81 60       	ori	r24, 0x01	; 1
    16be:	8c 93       	st	X, r24
    16c0:	80 81       	ld	r24, Z
    16c2:	80 68       	ori	r24, 0x80	; 128
    16c4:	80 83       	st	Z, r24
    16c6:	cf bf       	out	0x3f, r28	; 63
    16c8:	cf 91       	pop	r28
    16ca:	08 95       	ret

000016cc <udd_enable>:
    16cc:	cf 93       	push	r28
    16ce:	80 e3       	ldi	r24, 0x30	; 48
    16d0:	f2 d7       	rcall	.+4068   	; 0x26b6 <sysclk_enable_usb>
    16d2:	e0 ec       	ldi	r30, 0xC0	; 192
    16d4:	f4 e0       	ldi	r31, 0x04	; 4
    16d6:	80 81       	ld	r24, Z
    16d8:	80 64       	ori	r24, 0x40	; 64
    16da:	80 83       	st	Z, r24
    16dc:	cf b7       	in	r28, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	10 92 c1 22 	sts	0x22C1, r1
    16e4:	10 92 c9 22 	sts	0x22C9, r1
    16e8:	10 92 d1 22 	sts	0x22D1, r1
    16ec:	10 92 d9 22 	sts	0x22D9, r1
    16f0:	10 92 e1 22 	sts	0x22E1, r1
    16f4:	10 92 e9 22 	sts	0x22E9, r1
    16f8:	e3 e4       	ldi	r30, 0x43	; 67
    16fa:	f2 e2       	ldi	r31, 0x22	; 34
    16fc:	80 81       	ld	r24, Z
    16fe:	8e 7f       	andi	r24, 0xFE	; 254
    1700:	80 83       	st	Z, r24
    1702:	ec e4       	ldi	r30, 0x4C	; 76
    1704:	f2 e2       	ldi	r31, 0x22	; 34
    1706:	80 81       	ld	r24, Z
    1708:	8e 7f       	andi	r24, 0xFE	; 254
    170a:	80 83       	st	Z, r24
    170c:	e5 e5       	ldi	r30, 0x55	; 85
    170e:	f2 e2       	ldi	r31, 0x22	; 34
    1710:	80 81       	ld	r24, Z
    1712:	8e 7f       	andi	r24, 0xFE	; 254
    1714:	80 83       	st	Z, r24
    1716:	ee e5       	ldi	r30, 0x5E	; 94
    1718:	f2 e2       	ldi	r31, 0x22	; 34
    171a:	80 81       	ld	r24, Z
    171c:	8e 7f       	andi	r24, 0xFE	; 254
    171e:	80 83       	st	Z, r24
    1720:	6a e1       	ldi	r22, 0x1A	; 26
    1722:	70 e0       	ldi	r23, 0x00	; 0
    1724:	82 e0       	ldi	r24, 0x02	; 2
    1726:	0e 94 28 14 	call	0x2850	; 0x2850 <nvm_read_byte>
    172a:	8f 3f       	cpi	r24, 0xFF	; 255
    172c:	19 f0       	breq	.+6      	; 0x1734 <udd_enable+0x68>
    172e:	80 93 fa 04 	sts	0x04FA, r24
    1732:	03 c0       	rjmp	.+6      	; 0x173a <udd_enable+0x6e>
    1734:	8f e1       	ldi	r24, 0x1F	; 31
    1736:	80 93 fa 04 	sts	0x04FA, r24
    173a:	6b e1       	ldi	r22, 0x1B	; 27
    173c:	70 e0       	ldi	r23, 0x00	; 0
    173e:	82 e0       	ldi	r24, 0x02	; 2
    1740:	0e 94 28 14 	call	0x2850	; 0x2850 <nvm_read_byte>
    1744:	8f 3f       	cpi	r24, 0xFF	; 255
    1746:	19 f0       	breq	.+6      	; 0x174e <udd_enable+0x82>
    1748:	80 93 fb 04 	sts	0x04FB, r24
    174c:	03 c0       	rjmp	.+6      	; 0x1754 <udd_enable+0x88>
    174e:	8f e1       	ldi	r24, 0x1F	; 31
    1750:	80 93 fb 04 	sts	0x04FB, r24
    1754:	e0 ec       	ldi	r30, 0xC0	; 192
    1756:	f4 e0       	ldi	r31, 0x04	; 4
    1758:	80 81       	ld	r24, Z
    175a:	82 60       	ori	r24, 0x02	; 2
    175c:	80 83       	st	Z, r24
    175e:	80 81       	ld	r24, Z
    1760:	80 68       	ori	r24, 0x80	; 128
    1762:	80 83       	st	Z, r24
    1764:	80 81       	ld	r24, Z
    1766:	80 61       	ori	r24, 0x10	; 16
    1768:	80 83       	st	Z, r24
    176a:	80 ec       	ldi	r24, 0xC0	; 192
    176c:	92 e2       	ldi	r25, 0x22	; 34
    176e:	86 83       	std	Z+6, r24	; 0x06
    1770:	97 83       	std	Z+7, r25	; 0x07
    1772:	80 81       	ld	r24, Z
    1774:	80 62       	ori	r24, 0x20	; 32
    1776:	80 83       	st	Z, r24
    1778:	8f ef       	ldi	r24, 0xFF	; 255
    177a:	80 93 c5 04 	sts	0x04C5, r24
    177e:	e8 ec       	ldi	r30, 0xC8	; 200
    1780:	f4 e0       	ldi	r31, 0x04	; 4
    1782:	80 81       	ld	r24, Z
    1784:	81 60       	ori	r24, 0x01	; 1
    1786:	80 83       	st	Z, r24
    1788:	10 92 00 23 	sts	0x2300, r1
    178c:	8f b7       	in	r24, 0x3f	; 63
    178e:	f8 94       	cli
    1790:	e6 e0       	ldi	r30, 0x06	; 6
    1792:	f3 e2       	ldi	r31, 0x23	; 35
    1794:	90 81       	ld	r25, Z
    1796:	9f 5f       	subi	r25, 0xFF	; 255
    1798:	90 83       	st	Z, r25
    179a:	8f bf       	out	0x3f, r24	; 63
    179c:	74 df       	rcall	.-280    	; 0x1686 <udd_attach>
    179e:	cf bf       	out	0x3f, r28	; 63
    17a0:	cf 91       	pop	r28
    17a2:	08 95       	ret

000017a4 <udd_is_high_speed>:
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	08 95       	ret

000017a8 <udd_set_address>:
    17a8:	80 93 c3 04 	sts	0x04C3, r24
    17ac:	08 95       	ret

000017ae <udd_getaddress>:
    17ae:	80 91 c3 04 	lds	r24, 0x04C3
    17b2:	08 95       	ret

000017b4 <udd_get_frame_number>:
    17b4:	80 91 f0 22 	lds	r24, 0x22F0
    17b8:	90 91 f1 22 	lds	r25, 0x22F1
    17bc:	08 95       	ret

000017be <udd_get_micro_frame_number>:
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	08 95       	ret

000017c4 <udd_set_setup_payload>:
    17c4:	80 93 17 23 	sts	0x2317, r24
    17c8:	90 93 18 23 	sts	0x2318, r25
    17cc:	60 93 19 23 	sts	0x2319, r22
    17d0:	70 93 1a 23 	sts	0x231A, r23
    17d4:	08 95       	ret

000017d6 <udd_ep_alloc>:
    17d6:	e8 2f       	mov	r30, r24
    17d8:	ef 70       	andi	r30, 0x0F	; 15
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	ee 0f       	add	r30, r30
    17de:	ff 1f       	adc	r31, r31
    17e0:	99 27       	eor	r25, r25
    17e2:	87 fd       	sbrc	r24, 7
    17e4:	90 95       	com	r25
    17e6:	88 27       	eor	r24, r24
    17e8:	99 0f       	add	r25, r25
    17ea:	88 1f       	adc	r24, r24
    17ec:	99 27       	eor	r25, r25
    17ee:	e8 0f       	add	r30, r24
    17f0:	f9 1f       	adc	r31, r25
    17f2:	ee 0f       	add	r30, r30
    17f4:	ff 1f       	adc	r31, r31
    17f6:	ee 0f       	add	r30, r30
    17f8:	ff 1f       	adc	r31, r31
    17fa:	ee 0f       	add	r30, r30
    17fc:	ff 1f       	adc	r31, r31
    17fe:	e0 54       	subi	r30, 0x40	; 64
    1800:	fd 4d       	sbci	r31, 0xDD	; 221
    1802:	81 81       	ldd	r24, Z+1	; 0x01
    1804:	80 7c       	andi	r24, 0xC0	; 192
    1806:	09 f0       	breq	.+2      	; 0x180a <udd_ep_alloc+0x34>
    1808:	43 c0       	rjmp	.+134    	; 0x1890 <udd_ep_alloc+0xba>
    180a:	63 70       	andi	r22, 0x03	; 3
    180c:	61 30       	cpi	r22, 0x01	; 1
    180e:	29 f0       	breq	.+10     	; 0x181a <udd_ep_alloc+0x44>
    1810:	10 f4       	brcc	.+4      	; 0x1816 <udd_ep_alloc+0x40>
    1812:	80 e4       	ldi	r24, 0x40	; 64
    1814:	03 c0       	rjmp	.+6      	; 0x181c <udd_ep_alloc+0x46>
    1816:	80 e8       	ldi	r24, 0x80	; 128
    1818:	01 c0       	rjmp	.+2      	; 0x181c <udd_ep_alloc+0x46>
    181a:	80 ec       	ldi	r24, 0xC0	; 192
    181c:	40 38       	cpi	r20, 0x80	; 128
    181e:	51 05       	cpc	r21, r1
    1820:	e1 f0       	breq	.+56     	; 0x185a <udd_ep_alloc+0x84>
    1822:	50 f4       	brcc	.+20     	; 0x1838 <udd_ep_alloc+0x62>
    1824:	40 32       	cpi	r20, 0x20	; 32
    1826:	51 05       	cpc	r21, r1
    1828:	a1 f0       	breq	.+40     	; 0x1852 <udd_ep_alloc+0x7c>
    182a:	40 34       	cpi	r20, 0x40	; 64
    182c:	51 05       	cpc	r21, r1
    182e:	99 f0       	breq	.+38     	; 0x1856 <udd_ep_alloc+0x80>
    1830:	40 31       	cpi	r20, 0x10	; 16
    1832:	51 05       	cpc	r21, r1
    1834:	61 f4       	brne	.+24     	; 0x184e <udd_ep_alloc+0x78>
    1836:	19 c0       	rjmp	.+50     	; 0x186a <udd_ep_alloc+0x94>
    1838:	41 15       	cp	r20, r1
    183a:	92 e0       	ldi	r25, 0x02	; 2
    183c:	59 07       	cpc	r21, r25
    183e:	89 f0       	breq	.+34     	; 0x1862 <udd_ep_alloc+0x8c>
    1840:	4f 3f       	cpi	r20, 0xFF	; 255
    1842:	93 e0       	ldi	r25, 0x03	; 3
    1844:	59 07       	cpc	r21, r25
    1846:	79 f0       	breq	.+30     	; 0x1866 <udd_ep_alloc+0x90>
    1848:	41 15       	cp	r20, r1
    184a:	51 40       	sbci	r21, 0x01	; 1
    184c:	41 f0       	breq	.+16     	; 0x185e <udd_ep_alloc+0x88>
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	0d c0       	rjmp	.+26     	; 0x186c <udd_ep_alloc+0x96>
    1852:	22 e0       	ldi	r18, 0x02	; 2
    1854:	0b c0       	rjmp	.+22     	; 0x186c <udd_ep_alloc+0x96>
    1856:	23 e0       	ldi	r18, 0x03	; 3
    1858:	09 c0       	rjmp	.+18     	; 0x186c <udd_ep_alloc+0x96>
    185a:	24 e0       	ldi	r18, 0x04	; 4
    185c:	07 c0       	rjmp	.+14     	; 0x186c <udd_ep_alloc+0x96>
    185e:	25 e0       	ldi	r18, 0x05	; 5
    1860:	05 c0       	rjmp	.+10     	; 0x186c <udd_ep_alloc+0x96>
    1862:	26 e0       	ldi	r18, 0x06	; 6
    1864:	03 c0       	rjmp	.+6      	; 0x186c <udd_ep_alloc+0x96>
    1866:	27 e0       	ldi	r18, 0x07	; 7
    1868:	01 c0       	rjmp	.+2      	; 0x186c <udd_ep_alloc+0x96>
    186a:	21 e0       	ldi	r18, 0x01	; 1
    186c:	11 82       	std	Z+1, r1	; 0x01
    186e:	96 e0       	ldi	r25, 0x06	; 6
    1870:	90 83       	st	Z, r25
    1872:	82 2b       	or	r24, r18
    1874:	81 83       	std	Z+1, r24	; 0x01
    1876:	81 81       	ldd	r24, Z+1	; 0x01
    1878:	80 7c       	andi	r24, 0xC0	; 192
    187a:	80 3c       	cpi	r24, 0xC0	; 192
    187c:	21 f4       	brne	.+8      	; 0x1886 <udd_ep_alloc+0xb0>
    187e:	81 81       	ldd	r24, Z+1	; 0x01
    1880:	87 70       	andi	r24, 0x07	; 7
    1882:	87 30       	cpi	r24, 0x07	; 7
    1884:	39 f0       	breq	.+14     	; 0x1894 <udd_ep_alloc+0xbe>
    1886:	81 81       	ldd	r24, Z+1	; 0x01
    1888:	80 62       	ori	r24, 0x20	; 32
    188a:	81 83       	std	Z+1, r24	; 0x01
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	08 95       	ret
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	08 95       	ret
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	08 95       	ret

00001898 <udd_ep_is_halted>:
    1898:	e8 2f       	mov	r30, r24
    189a:	ef 70       	andi	r30, 0x0F	; 15
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	ee 0f       	add	r30, r30
    18a0:	ff 1f       	adc	r31, r31
    18a2:	99 27       	eor	r25, r25
    18a4:	87 fd       	sbrc	r24, 7
    18a6:	90 95       	com	r25
    18a8:	88 27       	eor	r24, r24
    18aa:	99 0f       	add	r25, r25
    18ac:	88 1f       	adc	r24, r24
    18ae:	99 27       	eor	r25, r25
    18b0:	e8 0f       	add	r30, r24
    18b2:	f9 1f       	adc	r31, r25
    18b4:	ee 0f       	add	r30, r30
    18b6:	ff 1f       	adc	r31, r31
    18b8:	ee 0f       	add	r30, r30
    18ba:	ff 1f       	adc	r31, r31
    18bc:	ee 0f       	add	r30, r30
    18be:	ff 1f       	adc	r31, r31
    18c0:	e0 54       	subi	r30, 0x40	; 64
    18c2:	fd 4d       	sbci	r31, 0xDD	; 221
    18c4:	81 81       	ldd	r24, Z+1	; 0x01
    18c6:	82 fb       	bst	r24, 2
    18c8:	88 27       	eor	r24, r24
    18ca:	80 f9       	bld	r24, 0
    18cc:	08 95       	ret

000018ce <udd_ep_clear_halt>:
    18ce:	e8 2f       	mov	r30, r24
    18d0:	ef 70       	andi	r30, 0x0F	; 15
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	ee 0f       	add	r30, r30
    18d6:	ff 1f       	adc	r31, r31
    18d8:	28 2f       	mov	r18, r24
    18da:	33 27       	eor	r19, r19
    18dc:	27 fd       	sbrc	r18, 7
    18de:	30 95       	com	r19
    18e0:	22 27       	eor	r18, r18
    18e2:	33 0f       	add	r19, r19
    18e4:	22 1f       	adc	r18, r18
    18e6:	33 27       	eor	r19, r19
    18e8:	e2 0f       	add	r30, r18
    18ea:	f3 1f       	adc	r31, r19
    18ec:	ee 0f       	add	r30, r30
    18ee:	ff 1f       	adc	r31, r31
    18f0:	ee 0f       	add	r30, r30
    18f2:	ff 1f       	adc	r31, r31
    18f4:	ee 0f       	add	r30, r30
    18f6:	ff 1f       	adc	r31, r31
    18f8:	e0 54       	subi	r30, 0x40	; 64
    18fa:	fd 4d       	sbci	r31, 0xDD	; 221
    18fc:	91 81       	ldd	r25, Z+1	; 0x01
    18fe:	92 ff       	sbrs	r25, 2
    1900:	0e c0       	rjmp	.+28     	; 0x191e <udd_ep_clear_halt+0x50>
    1902:	91 81       	ldd	r25, Z+1	; 0x01
    1904:	9b 7f       	andi	r25, 0xFB	; 251
    1906:	91 83       	std	Z+1, r25	; 0x01
    1908:	20 dd       	rcall	.-1472   	; 0x134a <udd_ep_get_job>
    190a:	fc 01       	movw	r30, r24
    190c:	80 81       	ld	r24, Z
    190e:	80 ff       	sbrs	r24, 0
    1910:	06 c0       	rjmp	.+12     	; 0x191e <udd_ep_clear_halt+0x50>
    1912:	8e 7f       	andi	r24, 0xFE	; 254
    1914:	80 83       	st	Z, r24
    1916:	07 80       	ldd	r0, Z+7	; 0x07
    1918:	f0 85       	ldd	r31, Z+8	; 0x08
    191a:	e0 2d       	mov	r30, r0
    191c:	19 95       	eicall
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	08 95       	ret

00001922 <udd_ep_run>:
    1922:	7f 92       	push	r7
    1924:	8f 92       	push	r8
    1926:	9f 92       	push	r9
    1928:	af 92       	push	r10
    192a:	bf 92       	push	r11
    192c:	cf 92       	push	r12
    192e:	df 92       	push	r13
    1930:	ef 92       	push	r14
    1932:	ff 92       	push	r15
    1934:	0f 93       	push	r16
    1936:	1f 93       	push	r17
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	98 2e       	mov	r9, r24
    193e:	86 2e       	mov	r8, r22
    1940:	5a 01       	movw	r10, r20
    1942:	69 01       	movw	r12, r18
    1944:	02 dd       	rcall	.-1532   	; 0x134a <udd_ep_get_job>
    1946:	7c 01       	movw	r14, r24
    1948:	79 2c       	mov	r7, r9
    194a:	77 1c       	adc	r7, r7
    194c:	77 24       	eor	r7, r7
    194e:	77 1c       	adc	r7, r7
    1950:	c9 2d       	mov	r28, r9
    1952:	cf 70       	andi	r28, 0x0F	; 15
    1954:	d0 e0       	ldi	r29, 0x00	; 0
    1956:	cc 0f       	add	r28, r28
    1958:	dd 1f       	adc	r29, r29
    195a:	c7 0d       	add	r28, r7
    195c:	d1 1d       	adc	r29, r1
    195e:	cc 0f       	add	r28, r28
    1960:	dd 1f       	adc	r29, r29
    1962:	cc 0f       	add	r28, r28
    1964:	dd 1f       	adc	r29, r29
    1966:	cc 0f       	add	r28, r28
    1968:	dd 1f       	adc	r29, r29
    196a:	c0 54       	subi	r28, 0x40	; 64
    196c:	dd 4d       	sbci	r29, 0xDD	; 221
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	80 7c       	andi	r24, 0xC0	; 192
    1972:	09 f4       	brne	.+2      	; 0x1976 <udd_ep_run+0x54>
    1974:	4c c0       	rjmp	.+152    	; 0x1a0e <udd_ep_run+0xec>
    1976:	89 81       	ldd	r24, Y+1	; 0x01
    1978:	80 7c       	andi	r24, 0xC0	; 192
    197a:	80 3c       	cpi	r24, 0xC0	; 192
    197c:	19 f0       	breq	.+6      	; 0x1984 <udd_ep_run+0x62>
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	82 fd       	sbrc	r24, 2
    1982:	47 c0       	rjmp	.+142    	; 0x1a12 <udd_ep_run+0xf0>
    1984:	8f b7       	in	r24, 0x3f	; 63
    1986:	f8 94       	cli
    1988:	f7 01       	movw	r30, r14
    198a:	90 81       	ld	r25, Z
    198c:	90 ff       	sbrs	r25, 0
    198e:	03 c0       	rjmp	.+6      	; 0x1996 <udd_ep_run+0x74>
    1990:	8f bf       	out	0x3f, r24	; 63
    1992:	71 2c       	mov	r7, r1
    1994:	3f c0       	rjmp	.+126    	; 0x1a14 <udd_ep_run+0xf2>
    1996:	f7 01       	movw	r30, r14
    1998:	90 81       	ld	r25, Z
    199a:	91 60       	ori	r25, 0x01	; 1
    199c:	90 83       	st	Z, r25
    199e:	8f bf       	out	0x3f, r24	; 63
    19a0:	f7 01       	movw	r30, r14
    19a2:	a1 82       	std	Z+1, r10	; 0x01
    19a4:	b2 82       	std	Z+2, r11	; 0x02
    19a6:	c3 82       	std	Z+3, r12	; 0x03
    19a8:	d4 82       	std	Z+4, r13	; 0x04
    19aa:	15 82       	std	Z+5, r1	; 0x05
    19ac:	16 82       	std	Z+6, r1	; 0x06
    19ae:	07 83       	std	Z+7, r16	; 0x07
    19b0:	10 87       	std	Z+8, r17	; 0x08
    19b2:	81 10       	cpse	r8, r1
    19b4:	06 c0       	rjmp	.+12     	; 0x19c2 <udd_ep_run+0xa0>
    19b6:	91 e0       	ldi	r25, 0x01	; 1
    19b8:	c1 14       	cp	r12, r1
    19ba:	d1 04       	cpc	r13, r1
    19bc:	19 f0       	breq	.+6      	; 0x19c4 <udd_ep_run+0xa2>
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	01 c0       	rjmp	.+2      	; 0x19c4 <udd_ep_run+0xa2>
    19c2:	91 e0       	ldi	r25, 0x01	; 1
    19c4:	f7 01       	movw	r30, r14
    19c6:	80 81       	ld	r24, Z
    19c8:	90 fb       	bst	r25, 0
    19ca:	81 f9       	bld	r24, 1
    19cc:	8b 7f       	andi	r24, 0xFB	; 251
    19ce:	80 83       	st	Z, r24
    19d0:	77 20       	and	r7, r7
    19d2:	19 f0       	breq	.+6      	; 0x19da <udd_ep_run+0xb8>
    19d4:	1e 82       	std	Y+6, r1	; 0x06
    19d6:	1f 82       	std	Y+7, r1	; 0x07
    19d8:	15 c0       	rjmp	.+42     	; 0x1a04 <udd_ep_run+0xe2>
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	80 7c       	andi	r24, 0xC0	; 192
    19de:	80 3c       	cpi	r24, 0xC0	; 192
    19e0:	69 f4       	brne	.+26     	; 0x19fc <udd_ep_run+0xda>
    19e2:	ce 01       	movw	r24, r28
    19e4:	8d dc       	rcall	.-1766   	; 0x1300 <udd_ep_get_size>
    19e6:	bc 01       	movw	r22, r24
    19e8:	c6 01       	movw	r24, r12
    19ea:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__udivmodhi4>
    19ee:	89 2b       	or	r24, r25
    19f0:	29 f0       	breq	.+10     	; 0x19fc <udd_ep_run+0xda>
    19f2:	f7 01       	movw	r30, r14
    19f4:	80 81       	ld	r24, Z
    19f6:	8e 7f       	andi	r24, 0xFE	; 254
    19f8:	80 83       	st	Z, r24
    19fa:	0c c0       	rjmp	.+24     	; 0x1a14 <udd_ep_run+0xf2>
    19fc:	1a 82       	std	Y+2, r1	; 0x02
    19fe:	1b 82       	std	Y+3, r1	; 0x03
    1a00:	1e 82       	std	Y+6, r1	; 0x06
    1a02:	1f 82       	std	Y+7, r1	; 0x07
    1a04:	89 2d       	mov	r24, r9
    1a06:	2b dd       	rcall	.-1450   	; 0x145e <udd_ep_trans_complet>
    1a08:	77 24       	eor	r7, r7
    1a0a:	73 94       	inc	r7
    1a0c:	03 c0       	rjmp	.+6      	; 0x1a14 <udd_ep_run+0xf2>
    1a0e:	71 2c       	mov	r7, r1
    1a10:	01 c0       	rjmp	.+2      	; 0x1a14 <udd_ep_run+0xf2>
    1a12:	71 2c       	mov	r7, r1
    1a14:	87 2d       	mov	r24, r7
    1a16:	df 91       	pop	r29
    1a18:	cf 91       	pop	r28
    1a1a:	1f 91       	pop	r17
    1a1c:	0f 91       	pop	r16
    1a1e:	ff 90       	pop	r15
    1a20:	ef 90       	pop	r14
    1a22:	df 90       	pop	r13
    1a24:	cf 90       	pop	r12
    1a26:	bf 90       	pop	r11
    1a28:	af 90       	pop	r10
    1a2a:	9f 90       	pop	r9
    1a2c:	8f 90       	pop	r8
    1a2e:	7f 90       	pop	r7
    1a30:	08 95       	ret

00001a32 <udd_ep_abort>:
    1a32:	ff 92       	push	r15
    1a34:	0f 93       	push	r16
    1a36:	1f 93       	push	r17
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	18 2f       	mov	r17, r24
    1a3e:	f8 2e       	mov	r15, r24
    1a40:	ff 1c       	adc	r15, r15
    1a42:	ff 24       	eor	r15, r15
    1a44:	ff 1c       	adc	r15, r15
    1a46:	c8 2f       	mov	r28, r24
    1a48:	cf 70       	andi	r28, 0x0F	; 15
    1a4a:	d0 e0       	ldi	r29, 0x00	; 0
    1a4c:	cc 0f       	add	r28, r28
    1a4e:	dd 1f       	adc	r29, r29
    1a50:	cf 0d       	add	r28, r15
    1a52:	d1 1d       	adc	r29, r1
    1a54:	cc 0f       	add	r28, r28
    1a56:	dd 1f       	adc	r29, r29
    1a58:	cc 0f       	add	r28, r28
    1a5a:	dd 1f       	adc	r29, r29
    1a5c:	cc 0f       	add	r28, r28
    1a5e:	dd 1f       	adc	r29, r29
    1a60:	c0 54       	subi	r28, 0x40	; 64
    1a62:	dd 4d       	sbci	r29, 0xDD	; 221
    1a64:	72 dc       	rcall	.-1820   	; 0x134a <udd_ep_get_job>
    1a66:	dc 01       	movw	r26, r24
    1a68:	fe 01       	movw	r30, r28
    1a6a:	02 e0       	ldi	r16, 0x02	; 2
    1a6c:	05 93       	las	Z, r16
    1a6e:	8c 91       	ld	r24, X
    1a70:	80 ff       	sbrs	r24, 0
    1a72:	12 c0       	rjmp	.+36     	; 0x1a98 <udd_ep_abort+0x66>
    1a74:	8e 7f       	andi	r24, 0xFE	; 254
    1a76:	8c 93       	st	X, r24
    1a78:	17 96       	adiw	r26, 0x07	; 7
    1a7a:	ed 91       	ld	r30, X+
    1a7c:	fc 91       	ld	r31, X
    1a7e:	18 97       	sbiw	r26, 0x08	; 8
    1a80:	30 97       	sbiw	r30, 0x00	; 0
    1a82:	51 f0       	breq	.+20     	; 0x1a98 <udd_ep_abort+0x66>
    1a84:	ff 20       	and	r15, r15
    1a86:	19 f0       	breq	.+6      	; 0x1a8e <udd_ep_abort+0x5c>
    1a88:	6e 81       	ldd	r22, Y+6	; 0x06
    1a8a:	7f 81       	ldd	r23, Y+7	; 0x07
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <udd_ep_abort+0x60>
    1a8e:	6a 81       	ldd	r22, Y+2	; 0x02
    1a90:	7b 81       	ldd	r23, Y+3	; 0x03
    1a92:	41 2f       	mov	r20, r17
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	19 95       	eicall
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	1f 91       	pop	r17
    1a9e:	0f 91       	pop	r16
    1aa0:	ff 90       	pop	r15
    1aa2:	08 95       	ret

00001aa4 <udd_ep_free>:
    1aa4:	cf 93       	push	r28
    1aa6:	c8 2f       	mov	r28, r24
    1aa8:	c4 df       	rcall	.-120    	; 0x1a32 <udd_ep_abort>
    1aaa:	ec 2f       	mov	r30, r28
    1aac:	ef 70       	andi	r30, 0x0F	; 15
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	ee 0f       	add	r30, r30
    1ab2:	ff 1f       	adc	r31, r31
    1ab4:	8c 2f       	mov	r24, r28
    1ab6:	99 27       	eor	r25, r25
    1ab8:	87 fd       	sbrc	r24, 7
    1aba:	90 95       	com	r25
    1abc:	88 27       	eor	r24, r24
    1abe:	99 0f       	add	r25, r25
    1ac0:	88 1f       	adc	r24, r24
    1ac2:	99 27       	eor	r25, r25
    1ac4:	e8 0f       	add	r30, r24
    1ac6:	f9 1f       	adc	r31, r25
    1ac8:	ee 0f       	add	r30, r30
    1aca:	ff 1f       	adc	r31, r31
    1acc:	ee 0f       	add	r30, r30
    1ace:	ff 1f       	adc	r31, r31
    1ad0:	ee 0f       	add	r30, r30
    1ad2:	ff 1f       	adc	r31, r31
    1ad4:	e0 54       	subi	r30, 0x40	; 64
    1ad6:	fd 4d       	sbci	r31, 0xDD	; 221
    1ad8:	11 82       	std	Z+1, r1	; 0x01
    1ada:	cf 91       	pop	r28
    1adc:	08 95       	ret

00001ade <udd_ep_set_halt>:
    1ade:	0f 93       	push	r16
    1ae0:	e8 2f       	mov	r30, r24
    1ae2:	ef 70       	andi	r30, 0x0F	; 15
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	ee 0f       	add	r30, r30
    1ae8:	ff 1f       	adc	r31, r31
    1aea:	28 2f       	mov	r18, r24
    1aec:	33 27       	eor	r19, r19
    1aee:	27 fd       	sbrc	r18, 7
    1af0:	30 95       	com	r19
    1af2:	22 27       	eor	r18, r18
    1af4:	33 0f       	add	r19, r19
    1af6:	22 1f       	adc	r18, r18
    1af8:	33 27       	eor	r19, r19
    1afa:	e2 0f       	add	r30, r18
    1afc:	f3 1f       	adc	r31, r19
    1afe:	ee 0f       	add	r30, r30
    1b00:	ff 1f       	adc	r31, r31
    1b02:	ee 0f       	add	r30, r30
    1b04:	ff 1f       	adc	r31, r31
    1b06:	ee 0f       	add	r30, r30
    1b08:	ff 1f       	adc	r31, r31
    1b0a:	e0 54       	subi	r30, 0x40	; 64
    1b0c:	fd 4d       	sbci	r31, 0xDD	; 221
    1b0e:	91 81       	ldd	r25, Z+1	; 0x01
    1b10:	94 60       	ori	r25, 0x04	; 4
    1b12:	91 83       	std	Z+1, r25	; 0x01
    1b14:	01 e0       	ldi	r16, 0x01	; 1
    1b16:	06 93       	lac	Z, r16
    1b18:	8c df       	rcall	.-232    	; 0x1a32 <udd_ep_abort>
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	0f 91       	pop	r16
    1b1e:	08 95       	ret

00001b20 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    1b20:	1f 92       	push	r1
    1b22:	0f 92       	push	r0
    1b24:	0f b6       	in	r0, 0x3f	; 63
    1b26:	0f 92       	push	r0
    1b28:	11 24       	eor	r1, r1
    1b2a:	08 b6       	in	r0, 0x38	; 56
    1b2c:	0f 92       	push	r0
    1b2e:	18 be       	out	0x38, r1	; 56
    1b30:	09 b6       	in	r0, 0x39	; 57
    1b32:	0f 92       	push	r0
    1b34:	19 be       	out	0x39, r1	; 57
    1b36:	0b b6       	in	r0, 0x3b	; 59
    1b38:	0f 92       	push	r0
    1b3a:	1b be       	out	0x3b, r1	; 59
    1b3c:	0f 93       	push	r16
    1b3e:	2f 93       	push	r18
    1b40:	3f 93       	push	r19
    1b42:	4f 93       	push	r20
    1b44:	5f 93       	push	r21
    1b46:	6f 93       	push	r22
    1b48:	7f 93       	push	r23
    1b4a:	8f 93       	push	r24
    1b4c:	9f 93       	push	r25
    1b4e:	af 93       	push	r26
    1b50:	bf 93       	push	r27
    1b52:	ef 93       	push	r30
    1b54:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    1b56:	80 91 cb 04 	lds	r24, 0x04CB
    1b5a:	88 23       	and	r24, r24
    1b5c:	34 f4       	brge	.+12     	; 0x1b6a <__vector_125+0x4a>
		udd_ack_start_of_frame_event();
    1b5e:	80 e8       	ldi	r24, 0x80	; 128
    1b60:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    1b64:	0e 94 9e 05 	call	0xb3c	; 0xb3c <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1b68:	88 c0       	rjmp	.+272    	; 0x1c7a <__vector_125+0x15a>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    1b6a:	80 91 cb 04 	lds	r24, 0x04CB
    1b6e:	82 ff       	sbrs	r24, 2
    1b70:	20 c0       	rjmp	.+64     	; 0x1bb2 <__vector_125+0x92>
		udd_ack_underflow_event();
    1b72:	84 e0       	ldi	r24, 0x04	; 4
    1b74:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    1b78:	80 91 c8 22 	lds	r24, 0x22C8
    1b7c:	86 ff       	sbrs	r24, 6
    1b7e:	7d c0       	rjmp	.+250    	; 0x1c7a <__vector_125+0x15a>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1b80:	80 91 cc 04 	lds	r24, 0x04CC
    1b84:	81 fd       	sbrc	r24, 1
    1b86:	79 c0       	rjmp	.+242    	; 0x1c7a <__vector_125+0x15a>
    1b88:	fb db       	rcall	.-2058   	; 0x1380 <udd_ctrl_interrupt_tc_setup>
    1b8a:	81 11       	cpse	r24, r1
    1b8c:	76 c0       	rjmp	.+236    	; 0x1c7a <__vector_125+0x15a>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1b8e:	80 91 ab 22 	lds	r24, 0x22AB
    1b92:	81 30       	cpi	r24, 0x01	; 1
    1b94:	11 f4       	brne	.+4      	; 0x1b9a <__vector_125+0x7a>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    1b96:	30 db       	rcall	.-2464   	; 0x11f8 <udd_ctrl_send_zlp_in>
    1b98:	70 c0       	rjmp	.+224    	; 0x1c7a <__vector_125+0x15a>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1b9a:	84 30       	cpi	r24, 0x04	; 4
    1b9c:	09 f0       	breq	.+2      	; 0x1ba0 <__vector_125+0x80>
    1b9e:	6d c0       	rjmp	.+218    	; 0x1c7a <__vector_125+0x15a>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    1ba0:	e9 ec       	ldi	r30, 0xC9	; 201
    1ba2:	f2 e2       	ldi	r31, 0x22	; 34
    1ba4:	04 e0       	ldi	r16, 0x04	; 4
    1ba6:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1ba8:	e1 ec       	ldi	r30, 0xC1	; 193
    1baa:	f2 e2       	ldi	r31, 0x22	; 34
    1bac:	04 e0       	ldi	r16, 0x04	; 4
    1bae:	05 93       	las	Z, r16
    1bb0:	64 c0       	rjmp	.+200    	; 0x1c7a <__vector_125+0x15a>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    1bb2:	80 91 cb 04 	lds	r24, 0x04CB
    1bb6:	81 ff       	sbrs	r24, 1
    1bb8:	5b c0       	rjmp	.+182    	; 0x1c70 <__vector_125+0x150>
		udd_ack_overflow_event();
    1bba:	82 e0       	ldi	r24, 0x02	; 2
    1bbc:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    1bc0:	80 91 c0 22 	lds	r24, 0x22C0
    1bc4:	86 ff       	sbrs	r24, 6
    1bc6:	59 c0       	rjmp	.+178    	; 0x1c7a <__vector_125+0x15a>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1bc8:	80 91 cc 04 	lds	r24, 0x04CC
    1bcc:	81 fd       	sbrc	r24, 1
    1bce:	55 c0       	rjmp	.+170    	; 0x1c7a <__vector_125+0x15a>
    1bd0:	d7 db       	rcall	.-2130   	; 0x1380 <udd_ctrl_interrupt_tc_setup>
    1bd2:	81 11       	cpse	r24, r1
    1bd4:	52 c0       	rjmp	.+164    	; 0x1c7a <__vector_125+0x15a>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1bd6:	80 91 ab 22 	lds	r24, 0x22AB
    1bda:	82 30       	cpi	r24, 0x02	; 2
    1bdc:	41 f4       	brne	.+16     	; 0x1bee <__vector_125+0xce>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1bde:	84 e0       	ldi	r24, 0x04	; 4
    1be0:	80 93 ab 22 	sts	0x22AB, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    1be4:	e0 ec       	ldi	r30, 0xC0	; 192
    1be6:	f2 e2       	ldi	r31, 0x22	; 34
    1be8:	02 e0       	ldi	r16, 0x02	; 2
    1bea:	06 93       	lac	Z, r16
    1bec:	46 c0       	rjmp	.+140    	; 0x1c7a <__vector_125+0x15a>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1bee:	83 30       	cpi	r24, 0x03	; 3
    1bf0:	09 f0       	breq	.+2      	; 0x1bf4 <__vector_125+0xd4>
    1bf2:	43 c0       	rjmp	.+134    	; 0x1c7a <__vector_125+0x15a>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    1bf4:	e9 ec       	ldi	r30, 0xC9	; 201
    1bf6:	f2 e2       	ldi	r31, 0x22	; 34
    1bf8:	04 e0       	ldi	r16, 0x04	; 4
    1bfa:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1bfc:	e1 ec       	ldi	r30, 0xC1	; 193
    1bfe:	f2 e2       	ldi	r31, 0x22	; 34
    1c00:	04 e0       	ldi	r16, 0x04	; 4
    1c02:	05 93       	las	Z, r16
    1c04:	3a c0       	rjmp	.+116    	; 0x1c7a <__vector_125+0x15a>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    1c06:	80 e1       	ldi	r24, 0x10	; 16
    1c08:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	11 df       	rcall	.-478    	; 0x1a32 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    1c10:	81 e8       	ldi	r24, 0x81	; 129
    1c12:	0f df       	rcall	.-482    	; 0x1a32 <udd_ep_abort>
		}
#endif
		udc_reset();
    1c14:	0e 94 77 05 	call	0xaee	; 0xaee <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    1c18:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1c1c:	e1 ec       	ldi	r30, 0xC1	; 193
    1c1e:	f2 e2       	ldi	r31, 0x22	; 34
    1c20:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    1c22:	96 e0       	ldi	r25, 0x06	; 6
    1c24:	90 93 c0 22 	sts	0x22C0, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1c28:	83 e4       	ldi	r24, 0x43	; 67
    1c2a:	80 83       	st	Z, r24
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1c2c:	e9 ec       	ldi	r30, 0xC9	; 201
    1c2e:	f2 e2       	ldi	r31, 0x22	; 34
    1c30:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    1c32:	90 93 c8 22 	sts	0x22C8, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1c36:	80 83       	st	Z, r24
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    1c38:	87 e6       	ldi	r24, 0x67	; 103
    1c3a:	92 e2       	ldi	r25, 0x22	; 34
    1c3c:	80 93 c4 22 	sts	0x22C4, r24
    1c40:	90 93 c5 22 	sts	0x22C5, r25
		// Reset endpoint control management
		udd_ctrl_init();
    1c44:	a0 da       	rcall	.-2752   	; 0x1186 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    1c46:	19 c0       	rjmp	.+50     	; 0x1c7a <__vector_125+0x15a>
	}

	if (udd_is_suspend_event()) {
    1c48:	80 91 cb 04 	lds	r24, 0x04CB
    1c4c:	86 ff       	sbrs	r24, 6
    1c4e:	06 c0       	rjmp	.+12     	; 0x1c5c <__vector_125+0x13c>
		udd_ack_suspend_event();
    1c50:	80 e4       	ldi	r24, 0x40	; 64
    1c52:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	77 da       	rcall	.-2834   	; 0x1148 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1c5a:	0f c0       	rjmp	.+30     	; 0x1c7a <__vector_125+0x15a>
	}

	if (udd_is_resume_event()) {
    1c5c:	80 91 cb 04 	lds	r24, 0x04CB
    1c60:	85 ff       	sbrs	r24, 5
    1c62:	0b c0       	rjmp	.+22     	; 0x1c7a <__vector_125+0x15a>
		udd_ack_resume_event();
    1c64:	80 e2       	ldi	r24, 0x20	; 32
    1c66:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	6d da       	rcall	.-2854   	; 0x1148 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1c6e:	05 c0       	rjmp	.+10     	; 0x1c7a <__vector_125+0x15a>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    1c70:	80 91 cb 04 	lds	r24, 0x04CB
    1c74:	84 ff       	sbrs	r24, 4
    1c76:	e8 cf       	rjmp	.-48     	; 0x1c48 <__vector_125+0x128>
    1c78:	c6 cf       	rjmp	.-116    	; 0x1c06 <__vector_125+0xe6>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    1c7a:	ff 91       	pop	r31
    1c7c:	ef 91       	pop	r30
    1c7e:	bf 91       	pop	r27
    1c80:	af 91       	pop	r26
    1c82:	9f 91       	pop	r25
    1c84:	8f 91       	pop	r24
    1c86:	7f 91       	pop	r23
    1c88:	6f 91       	pop	r22
    1c8a:	5f 91       	pop	r21
    1c8c:	4f 91       	pop	r20
    1c8e:	3f 91       	pop	r19
    1c90:	2f 91       	pop	r18
    1c92:	0f 91       	pop	r16
    1c94:	0f 90       	pop	r0
    1c96:	0b be       	out	0x3b, r0	; 59
    1c98:	0f 90       	pop	r0
    1c9a:	09 be       	out	0x39, r0	; 57
    1c9c:	0f 90       	pop	r0
    1c9e:	08 be       	out	0x38, r0	; 56
    1ca0:	0f 90       	pop	r0
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	0f 90       	pop	r0
    1ca6:	1f 90       	pop	r1
    1ca8:	18 95       	reti

00001caa <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    1caa:	1f 92       	push	r1
    1cac:	0f 92       	push	r0
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	0f 92       	push	r0
    1cb2:	11 24       	eor	r1, r1
    1cb4:	08 b6       	in	r0, 0x38	; 56
    1cb6:	0f 92       	push	r0
    1cb8:	18 be       	out	0x38, r1	; 56
    1cba:	09 b6       	in	r0, 0x39	; 57
    1cbc:	0f 92       	push	r0
    1cbe:	19 be       	out	0x39, r1	; 57
    1cc0:	0a b6       	in	r0, 0x3a	; 58
    1cc2:	0f 92       	push	r0
    1cc4:	1a be       	out	0x3a, r1	; 58
    1cc6:	0b b6       	in	r0, 0x3b	; 59
    1cc8:	0f 92       	push	r0
    1cca:	1b be       	out	0x3b, r1	; 59
    1ccc:	0f 93       	push	r16
    1cce:	1f 93       	push	r17
    1cd0:	2f 93       	push	r18
    1cd2:	3f 93       	push	r19
    1cd4:	4f 93       	push	r20
    1cd6:	5f 93       	push	r21
    1cd8:	6f 93       	push	r22
    1cda:	7f 93       	push	r23
    1cdc:	8f 93       	push	r24
    1cde:	9f 93       	push	r25
    1ce0:	af 93       	push	r26
    1ce2:	bf 93       	push	r27
    1ce4:	cf 93       	push	r28
    1ce6:	df 93       	push	r29
    1ce8:	ef 93       	push	r30
    1cea:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    1cec:	80 91 cc 04 	lds	r24, 0x04CC
    1cf0:	81 fd       	sbrc	r24, 1
    1cf2:	03 c0       	rjmp	.+6      	; 0x1cfa <__vector_126+0x50>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    1cf4:	45 db       	rcall	.-2422   	; 0x1380 <udd_ctrl_interrupt_tc_setup>
    1cf6:	81 11       	cpse	r24, r1
    1cf8:	b8 c0       	rjmp	.+368    	; 0x1e6a <__vector_126+0x1c0>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    1cfa:	82 e0       	ldi	r24, 0x02	; 2
    1cfc:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    1d00:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    1d04:	81 95       	neg	r24
    1d06:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    1d08:	e0 ec       	ldi	r30, 0xC0	; 192
    1d0a:	f2 e2       	ldi	r31, 0x22	; 34
    1d0c:	e8 1b       	sub	r30, r24
    1d0e:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    1d10:	20 81       	ld	r18, Z
    1d12:	31 81       	ldd	r19, Z+1	; 0x01
    1d14:	20 5c       	subi	r18, 0xC0	; 192
    1d16:	32 42       	sbci	r19, 0x22	; 34
    1d18:	36 95       	lsr	r19
    1d1a:	27 95       	ror	r18
    1d1c:	36 95       	lsr	r19
    1d1e:	27 95       	ror	r18
    1d20:	36 95       	lsr	r19
    1d22:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    1d24:	82 2f       	mov	r24, r18
    1d26:	86 95       	lsr	r24
    1d28:	20 ff       	sbrs	r18, 0
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <__vector_126+0x86>
    1d2c:	90 e8       	ldi	r25, 0x80	; 128
    1d2e:	01 c0       	rjmp	.+2      	; 0x1d32 <__vector_126+0x88>
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1d34:	e8 2f       	mov	r30, r24
    1d36:	ef 70       	andi	r30, 0x0F	; 15
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	ee 0f       	add	r30, r30
    1d3c:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    1d3e:	28 2f       	mov	r18, r24
    1d40:	33 27       	eor	r19, r19
    1d42:	27 fd       	sbrc	r18, 7
    1d44:	30 95       	com	r19
    1d46:	22 27       	eor	r18, r18
    1d48:	33 0f       	add	r19, r19
    1d4a:	22 1f       	adc	r18, r18
    1d4c:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1d4e:	e2 0f       	add	r30, r18
    1d50:	f3 1f       	adc	r31, r19
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    1d52:	ee 0f       	add	r30, r30
    1d54:	ff 1f       	adc	r31, r31
    1d56:	ee 0f       	add	r30, r30
    1d58:	ff 1f       	adc	r31, r31
    1d5a:	ee 0f       	add	r30, r30
    1d5c:	ff 1f       	adc	r31, r31
    1d5e:	e0 54       	subi	r30, 0x40	; 64
    1d60:	fd 4d       	sbci	r31, 0xDD	; 221
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    1d62:	90 81       	ld	r25, Z
    1d64:	95 ff       	sbrs	r25, 5
    1d66:	81 c0       	rjmp	.+258    	; 0x1e6a <__vector_126+0x1c0>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    1d68:	00 e2       	ldi	r16, 0x20	; 32
    1d6a:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    1d6c:	81 11       	cpse	r24, r1
    1d6e:	78 c0       	rjmp	.+240    	; 0x1e60 <__vector_126+0x1b6>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1d70:	80 91 ab 22 	lds	r24, 0x22AB
    1d74:	84 30       	cpi	r24, 0x04	; 4
    1d76:	19 f4       	brne	.+6      	; 0x1d7e <__vector_126+0xd4>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    1d78:	4d da       	rcall	.-2918   	; 0x1214 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    1d7a:	05 da       	rcall	.-3062   	; 0x1186 <udd_ctrl_init>
    1d7c:	76 c0       	rjmp	.+236    	; 0x1e6a <__vector_126+0x1c0>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    1d7e:	c0 91 c2 22 	lds	r28, 0x22C2
    1d82:	d0 91 c3 22 	lds	r29, 0x22C3

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    1d86:	80 91 19 23 	lds	r24, 0x2319
    1d8a:	90 91 1a 23 	lds	r25, 0x231A
    1d8e:	00 91 a7 22 	lds	r16, 0x22A7
    1d92:	10 91 a8 22 	lds	r17, 0x22A8
    1d96:	98 01       	movw	r18, r16
    1d98:	2c 0f       	add	r18, r28
    1d9a:	3d 1f       	adc	r19, r29
    1d9c:	82 17       	cp	r24, r18
    1d9e:	93 07       	cpc	r25, r19
    1da0:	18 f4       	brcc	.+6      	; 0x1da8 <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1da2:	ec 01       	movw	r28, r24
    1da4:	c0 1b       	sub	r28, r16
    1da6:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    1da8:	80 91 17 23 	lds	r24, 0x2317
    1dac:	90 91 18 23 	lds	r25, 0x2318
    1db0:	ae 01       	movw	r20, r28
    1db2:	67 e6       	ldi	r22, 0x67	; 103
    1db4:	72 e2       	ldi	r23, 0x22	; 34
    1db6:	80 0f       	add	r24, r16
    1db8:	91 1f       	adc	r25, r17
    1dba:	94 d7       	rcall	.+3880   	; 0x2ce4 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    1dbc:	0c 0f       	add	r16, r28
    1dbe:	1d 1f       	adc	r17, r29
    1dc0:	00 93 a7 22 	sts	0x22A7, r16
    1dc4:	10 93 a8 22 	sts	0x22A8, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1dc8:	c0 34       	cpi	r28, 0x40	; 64
    1dca:	d1 05       	cpc	r29, r1
    1dcc:	69 f4       	brne	.+26     	; 0x1de8 <__vector_126+0x13e>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    1dce:	80 91 a9 22 	lds	r24, 0x22A9
    1dd2:	90 91 aa 22 	lds	r25, 0x22AA
    1dd6:	80 0f       	add	r24, r16
    1dd8:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1dda:	20 91 15 23 	lds	r18, 0x2315
    1dde:	30 91 16 23 	lds	r19, 0x2316
    1de2:	82 17       	cp	r24, r18
    1de4:	93 07       	cpc	r25, r19
    1de6:	88 f0       	brcs	.+34     	; 0x1e0a <__vector_126+0x160>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    1de8:	00 93 19 23 	sts	0x2319, r16
    1dec:	10 93 1a 23 	sts	0x231A, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    1df0:	e0 91 1d 23 	lds	r30, 0x231D
    1df4:	f0 91 1e 23 	lds	r31, 0x231E
    1df8:	30 97       	sbiw	r30, 0x00	; 0
    1dfa:	29 f0       	breq	.+10     	; 0x1e06 <__vector_126+0x15c>
			if (!udd_g_ctrlreq.over_under_run()) {
    1dfc:	19 95       	eicall
    1dfe:	81 11       	cpse	r24, r1
    1e00:	02 c0       	rjmp	.+4      	; 0x1e06 <__vector_126+0x15c>
				// Stall ZLP
				udd_ctrl_stall_data();
    1e02:	ec d9       	rcall	.-3112   	; 0x11dc <udd_ctrl_stall_data>
    1e04:	32 c0       	rjmp	.+100    	; 0x1e6a <__vector_126+0x1c0>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    1e06:	f8 d9       	rcall	.-3088   	; 0x11f8 <udd_ctrl_send_zlp_in>
    1e08:	30 c0       	rjmp	.+96     	; 0x1e6a <__vector_126+0x1c0>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    1e0a:	80 91 19 23 	lds	r24, 0x2319
    1e0e:	90 91 1a 23 	lds	r25, 0x231A
    1e12:	08 17       	cp	r16, r24
    1e14:	19 07       	cpc	r17, r25
    1e16:	f9 f4       	brne	.+62     	; 0x1e56 <__vector_126+0x1ac>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    1e18:	e0 91 1d 23 	lds	r30, 0x231D
    1e1c:	f0 91 1e 23 	lds	r31, 0x231E
    1e20:	30 97       	sbiw	r30, 0x00	; 0
    1e22:	11 f4       	brne	.+4      	; 0x1e28 <__vector_126+0x17e>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    1e24:	db d9       	rcall	.-3146   	; 0x11dc <udd_ctrl_stall_data>
    1e26:	21 c0       	rjmp	.+66     	; 0x1e6a <__vector_126+0x1c0>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    1e28:	19 95       	eicall
    1e2a:	81 11       	cpse	r24, r1
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <__vector_126+0x188>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    1e2e:	d6 d9       	rcall	.-3156   	; 0x11dc <udd_ctrl_stall_data>
    1e30:	1c c0       	rjmp	.+56     	; 0x1e6a <__vector_126+0x1c0>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1e32:	20 91 a9 22 	lds	r18, 0x22A9
    1e36:	30 91 aa 22 	lds	r19, 0x22AA
    1e3a:	80 91 a7 22 	lds	r24, 0x22A7
    1e3e:	90 91 a8 22 	lds	r25, 0x22A8
    1e42:	82 0f       	add	r24, r18
    1e44:	93 1f       	adc	r25, r19
    1e46:	80 93 a9 22 	sts	0x22A9, r24
    1e4a:	90 93 aa 22 	sts	0x22AA, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    1e4e:	10 92 a7 22 	sts	0x22A7, r1
    1e52:	10 92 a8 22 	sts	0x22A8, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    1e56:	e0 ec       	ldi	r30, 0xC0	; 192
    1e58:	f2 e2       	ldi	r31, 0x22	; 34
    1e5a:	02 e0       	ldi	r16, 0x02	; 2
    1e5c:	06 93       	lac	Z, r16
    1e5e:	05 c0       	rjmp	.+10     	; 0x1e6a <__vector_126+0x1c0>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    1e60:	80 38       	cpi	r24, 0x80	; 128
    1e62:	11 f4       	brne	.+4      	; 0x1e68 <__vector_126+0x1be>
		udd_ctrl_in_sent();
    1e64:	df d9       	rcall	.-3138   	; 0x1224 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    1e66:	01 c0       	rjmp	.+2      	; 0x1e6a <__vector_126+0x1c0>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    1e68:	fa da       	rcall	.-2572   	; 0x145e <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    1e6a:	ff 91       	pop	r31
    1e6c:	ef 91       	pop	r30
    1e6e:	df 91       	pop	r29
    1e70:	cf 91       	pop	r28
    1e72:	bf 91       	pop	r27
    1e74:	af 91       	pop	r26
    1e76:	9f 91       	pop	r25
    1e78:	8f 91       	pop	r24
    1e7a:	7f 91       	pop	r23
    1e7c:	6f 91       	pop	r22
    1e7e:	5f 91       	pop	r21
    1e80:	4f 91       	pop	r20
    1e82:	3f 91       	pop	r19
    1e84:	2f 91       	pop	r18
    1e86:	1f 91       	pop	r17
    1e88:	0f 91       	pop	r16
    1e8a:	0f 90       	pop	r0
    1e8c:	0b be       	out	0x3b, r0	; 59
    1e8e:	0f 90       	pop	r0
    1e90:	0a be       	out	0x3a, r0	; 58
    1e92:	0f 90       	pop	r0
    1e94:	09 be       	out	0x39, r0	; 57
    1e96:	0f 90       	pop	r0
    1e98:	08 be       	out	0x38, r0	; 56
    1e9a:	0f 90       	pop	r0
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	0f 90       	pop	r0
    1ea0:	1f 90       	pop	r1
    1ea2:	18 95       	reti

00001ea4 <__vector_58>:
	}
}


ISR(USART_RX_Vect)
{
    1ea4:	1f 92       	push	r1
    1ea6:	0f 92       	push	r0
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	0f 92       	push	r0
    1eac:	11 24       	eor	r1, r1
    1eae:	08 b6       	in	r0, 0x38	; 56
    1eb0:	0f 92       	push	r0
    1eb2:	18 be       	out	0x38, r1	; 56
    1eb4:	09 b6       	in	r0, 0x39	; 57
    1eb6:	0f 92       	push	r0
    1eb8:	19 be       	out	0x39, r1	; 57
    1eba:	0b b6       	in	r0, 0x3b	; 59
    1ebc:	0f 92       	push	r0
    1ebe:	1b be       	out	0x3b, r1	; 59
    1ec0:	2f 93       	push	r18
    1ec2:	3f 93       	push	r19
    1ec4:	4f 93       	push	r20
    1ec6:	5f 93       	push	r21
    1ec8:	6f 93       	push	r22
    1eca:	7f 93       	push	r23
    1ecc:	8f 93       	push	r24
    1ece:	9f 93       	push	r25
    1ed0:	af 93       	push	r26
    1ed2:	bf 93       	push	r27
    1ed4:	cf 93       	push	r28
    1ed6:	ef 93       	push	r30
    1ed8:	ff 93       	push	r31
	uint8_t value;

	// Data received
	ui_com_tx_start();
    1eda:	0e 94 30 01 	call	0x260	; 0x260 <ui_com_tx_start>

	if (0 != (USART.STATUS & (USART_FERR_bm | USART_BUFOVF_bm))) {
    1ede:	e0 ea       	ldi	r30, 0xA0	; 160
    1ee0:	fa e0       	ldi	r31, 0x0A	; 10
    1ee2:	81 81       	ldd	r24, Z+1	; 0x01
    1ee4:	88 71       	andi	r24, 0x18	; 24
    1ee6:	21 f0       	breq	.+8      	; 0x1ef0 <__vector_58+0x4c>
		udi_cdc_signal_framing_error();
    1ee8:	0e 94 f5 02 	call	0x5ea	; 0x5ea <udi_cdc_signal_framing_error>
		ui_com_error();
    1eec:	0e 94 32 01 	call	0x264	; 0x264 <ui_com_error>
	}

	// Transfer UART RX fifo to CDC TX
	value = USART.DATA;
    1ef0:	c0 91 a0 0a 	lds	r28, 0x0AA0
	if (!udi_cdc_is_tx_ready()) {
    1ef4:	0e 94 41 04 	call	0x882	; 0x882 <udi_cdc_is_tx_ready>
    1ef8:	81 11       	cpse	r24, r1
    1efa:	05 c0       	rjmp	.+10     	; 0x1f06 <__vector_58+0x62>
		// Fifo full
		udi_cdc_signal_overrun();
    1efc:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <udi_cdc_signal_overrun>
		ui_com_overflow();
    1f00:	0e 94 33 01 	call	0x266	; 0x266 <ui_com_overflow>
    1f04:	04 c0       	rjmp	.+8      	; 0x1f0e <__vector_58+0x6a>
	}else{
		udi_cdc_putc(value);
    1f06:	8c 2f       	mov	r24, r28
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	0e 94 89 04 	call	0x912	; 0x912 <udi_cdc_putc>
	}
	ui_com_tx_stop();
    1f0e:	0e 94 31 01 	call	0x262	; 0x262 <ui_com_tx_stop>
}
    1f12:	ff 91       	pop	r31
    1f14:	ef 91       	pop	r30
    1f16:	cf 91       	pop	r28
    1f18:	bf 91       	pop	r27
    1f1a:	af 91       	pop	r26
    1f1c:	9f 91       	pop	r25
    1f1e:	8f 91       	pop	r24
    1f20:	7f 91       	pop	r23
    1f22:	6f 91       	pop	r22
    1f24:	5f 91       	pop	r21
    1f26:	4f 91       	pop	r20
    1f28:	3f 91       	pop	r19
    1f2a:	2f 91       	pop	r18
    1f2c:	0f 90       	pop	r0
    1f2e:	0b be       	out	0x3b, r0	; 59
    1f30:	0f 90       	pop	r0
    1f32:	09 be       	out	0x39, r0	; 57
    1f34:	0f 90       	pop	r0
    1f36:	08 be       	out	0x38, r0	; 56
    1f38:	0f 90       	pop	r0
    1f3a:	0f be       	out	0x3f, r0	; 63
    1f3c:	0f 90       	pop	r0
    1f3e:	1f 90       	pop	r1
    1f40:	18 95       	reti

00001f42 <__vector_59>:

ISR(USART_DRE_Vect)
{
    1f42:	1f 92       	push	r1
    1f44:	0f 92       	push	r0
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	0f 92       	push	r0
    1f4a:	11 24       	eor	r1, r1
    1f4c:	08 b6       	in	r0, 0x38	; 56
    1f4e:	0f 92       	push	r0
    1f50:	18 be       	out	0x38, r1	; 56
    1f52:	09 b6       	in	r0, 0x39	; 57
    1f54:	0f 92       	push	r0
    1f56:	19 be       	out	0x39, r1	; 57
    1f58:	0b b6       	in	r0, 0x3b	; 59
    1f5a:	0f 92       	push	r0
    1f5c:	1b be       	out	0x3b, r1	; 59
    1f5e:	2f 93       	push	r18
    1f60:	3f 93       	push	r19
    1f62:	4f 93       	push	r20
    1f64:	5f 93       	push	r21
    1f66:	6f 93       	push	r22
    1f68:	7f 93       	push	r23
    1f6a:	8f 93       	push	r24
    1f6c:	9f 93       	push	r25
    1f6e:	af 93       	push	r26
    1f70:	bf 93       	push	r27
    1f72:	ef 93       	push	r30
    1f74:	ff 93       	push	r31
	// Data send
	if (udi_cdc_is_rx_ready()) {
    1f76:	0e 94 c5 03 	call	0x78a	; 0x78a <udi_cdc_is_rx_ready>
    1f7a:	88 23       	and	r24, r24
    1f7c:	39 f0       	breq	.+14     	; 0x1f8c <__vector_59+0x4a>
		// Transmit next data
		ui_com_rx_start();
    1f7e:	0e 94 2e 01 	call	0x25c	; 0x25c <ui_com_rx_start>
		USART.DATA = udi_cdc_getc();
    1f82:	0e 94 11 04 	call	0x822	; 0x822 <udi_cdc_getc>
    1f86:	80 93 a0 0a 	sts	0x0AA0, r24
    1f8a:	06 c0       	rjmp	.+12     	; 0x1f98 <__vector_59+0x56>
	} else {
		// Fifo empty then Stop UART transmission
		USART.CTRLA = (register8_t) USART_RXCINTLVL_HI_gc |
    1f8c:	80 e3       	ldi	r24, 0x30	; 48
    1f8e:	e0 ea       	ldi	r30, 0xA0	; 160
    1f90:	fa e0       	ldi	r31, 0x0A	; 10
    1f92:	83 83       	std	Z+3, r24	; 0x03
				(register8_t) USART_DREINTLVL_OFF_gc;
		ui_com_rx_stop();
    1f94:	0e 94 2f 01 	call	0x25e	; 0x25e <ui_com_rx_stop>
	}
}
    1f98:	ff 91       	pop	r31
    1f9a:	ef 91       	pop	r30
    1f9c:	bf 91       	pop	r27
    1f9e:	af 91       	pop	r26
    1fa0:	9f 91       	pop	r25
    1fa2:	8f 91       	pop	r24
    1fa4:	7f 91       	pop	r23
    1fa6:	6f 91       	pop	r22
    1fa8:	5f 91       	pop	r21
    1faa:	4f 91       	pop	r20
    1fac:	3f 91       	pop	r19
    1fae:	2f 91       	pop	r18
    1fb0:	0f 90       	pop	r0
    1fb2:	0b be       	out	0x3b, r0	; 59
    1fb4:	0f 90       	pop	r0
    1fb6:	09 be       	out	0x39, r0	; 57
    1fb8:	0f 90       	pop	r0
    1fba:	08 be       	out	0x38, r0	; 56
    1fbc:	0f 90       	pop	r0
    1fbe:	0f be       	out	0x3f, r0	; 63
    1fc0:	0f 90       	pop	r0
    1fc2:	1f 90       	pop	r1
    1fc4:	18 95       	reti

00001fc6 <init_power_seq>:
 */ 

#include "sequence.h"


void init_power_seq() {
    1fc6:	cf 93       	push	r28
    1fc8:	df 93       	push	r29
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    1fca:	43 e0       	ldi	r20, 0x03	; 3
    1fcc:	50 e0       	ldi	r21, 0x00	; 0
    1fce:	60 e8       	ldi	r22, 0x80	; 128
    1fd0:	80 e4       	ldi	r24, 0x40	; 64
    1fd2:	96 e0       	ldi	r25, 0x06	; 6
    1fd4:	8b d3       	rcall	.+1814   	; 0x26ec <ioport_configure_port_pin>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1fd6:	c0 e4       	ldi	r28, 0x40	; 64
    1fd8:	d6 e0       	ldi	r29, 0x06	; 6
    1fda:	80 e8       	ldi	r24, 0x80	; 128
    1fdc:	8e 83       	std	Y+6, r24	; 0x06
    1fde:	43 e0       	ldi	r20, 0x03	; 3
    1fe0:	50 e0       	ldi	r21, 0x00	; 0
    1fe2:	60 e2       	ldi	r22, 0x20	; 32
    1fe4:	80 e4       	ldi	r24, 0x40	; 64
    1fe6:	96 e0       	ldi	r25, 0x06	; 6
    1fe8:	81 d3       	rcall	.+1794   	; 0x26ec <ioport_configure_port_pin>
    1fea:	80 e2       	ldi	r24, 0x20	; 32
    1fec:	8e 83       	std	Y+6, r24	; 0x06
    1fee:	43 e0       	ldi	r20, 0x03	; 3
    1ff0:	50 e0       	ldi	r21, 0x00	; 0
    1ff2:	62 e0       	ldi	r22, 0x02	; 2
    1ff4:	80 e4       	ldi	r24, 0x40	; 64
    1ff6:	96 e0       	ldi	r25, 0x06	; 6
    1ff8:	79 d3       	rcall	.+1778   	; 0x26ec <ioport_configure_port_pin>
    1ffa:	82 e0       	ldi	r24, 0x02	; 2
    1ffc:	8e 83       	std	Y+6, r24	; 0x06
    1ffe:	43 e0       	ldi	r20, 0x03	; 3
    2000:	50 e0       	ldi	r21, 0x00	; 0
    2002:	61 e0       	ldi	r22, 0x01	; 1
    2004:	80 e4       	ldi	r24, 0x40	; 64
    2006:	96 e0       	ldi	r25, 0x06	; 6
    2008:	71 d3       	rcall	.+1762   	; 0x26ec <ioport_configure_port_pin>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	8d 83       	std	Y+5, r24	; 0x05
	ioport_configure_pin(SR_LATCH, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
	gpio_set_pin_low(SR_LATCH);
	ioport_configure_pin(SR_CLEAR, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
	gpio_set_pin_high(SR_CLEAR);
	
}
    200e:	df 91       	pop	r29
    2010:	cf 91       	pop	r28
    2012:	08 95       	ret

00002014 <init_vrtc>:
	else if (!earliest->next) {
		(earliest->prev)->next = NULL;
	}

	return earliest;
}
    2014:	87 e0       	ldi	r24, 0x07	; 7
    2016:	e0 ea       	ldi	r30, 0xA0	; 160
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	82 83       	std	Z+2, r24	; 0x02
    201c:	f9 d2       	rcall	.+1522   	; 0x2610 <sysclk_init>
    201e:	10 92 01 23 	sts	0x2301, r1
    2022:	10 92 02 23 	sts	0x2302, r1
    2026:	10 92 03 23 	sts	0x2303, r1
    202a:	10 92 04 23 	sts	0x2304, r1
    202e:	10 92 05 23 	sts	0x2305, r1
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	80 93 06 23 	sts	0x2306, r24
    2038:	6d d8       	rcall	.-3878   	; 0x1114 <rtc_init>
    203a:	78 94       	sei
    203c:	10 92 23 23 	sts	0x2323, r1
    2040:	10 92 24 23 	sts	0x2324, r1
    2044:	10 92 21 23 	sts	0x2321, r1
    2048:	10 92 22 23 	sts	0x2322, r1
    204c:	08 95       	ret

0000204e <setEpochTime>:
    204e:	cf 92       	push	r12
    2050:	df 92       	push	r13
    2052:	ef 92       	push	r14
    2054:	ff 92       	push	r15
    2056:	0f 93       	push	r16
    2058:	1f 93       	push	r17
    205a:	6b 01       	movw	r12, r22
    205c:	7c 01       	movw	r14, r24
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	b6 95       	lsr	r27
    2064:	a7 95       	ror	r26
    2066:	97 95       	ror	r25
    2068:	87 95       	ror	r24
    206a:	dc 01       	movw	r26, r24
    206c:	99 27       	eor	r25, r25
    206e:	88 27       	eor	r24, r24
    2070:	b7 01       	movw	r22, r14
    2072:	a6 01       	movw	r20, r12
    2074:	41 70       	andi	r20, 0x01	; 1
    2076:	55 27       	eor	r21, r21
    2078:	66 27       	eor	r22, r22
    207a:	77 27       	eor	r23, r23
    207c:	03 2e       	mov	r0, r19
    207e:	3f e0       	ldi	r19, 0x0F	; 15
    2080:	44 0f       	add	r20, r20
    2082:	55 1f       	adc	r21, r21
    2084:	66 1f       	adc	r22, r22
    2086:	77 1f       	adc	r23, r23
    2088:	3a 95       	dec	r19
    208a:	d1 f7       	brne	.-12     	; 0x2080 <setEpochTime+0x32>
    208c:	30 2d       	mov	r19, r0
    208e:	8a 01       	movw	r16, r20
    2090:	9b 01       	movw	r18, r22
    2092:	08 0f       	add	r16, r24
    2094:	19 1f       	adc	r17, r25
    2096:	2a 1f       	adc	r18, r26
    2098:	3b 1f       	adc	r19, r27
    209a:	c9 01       	movw	r24, r18
    209c:	b8 01       	movw	r22, r16
    209e:	0b d8       	rcall	.-4074   	; 0x10b6 <rtc_set_time>
    20a0:	0b 2e       	mov	r0, r27
    20a2:	b1 e1       	ldi	r27, 0x11	; 17
    20a4:	f6 94       	lsr	r15
    20a6:	e7 94       	ror	r14
    20a8:	d7 94       	ror	r13
    20aa:	c7 94       	ror	r12
    20ac:	ba 95       	dec	r27
    20ae:	d1 f7       	brne	.-12     	; 0x20a4 <setEpochTime+0x56>
    20b0:	b0 2d       	mov	r27, r0
    20b2:	c0 92 23 23 	sts	0x2323, r12
    20b6:	d0 92 24 23 	sts	0x2324, r13
    20ba:	1f 91       	pop	r17
    20bc:	0f 91       	pop	r16
    20be:	ff 90       	pop	r15
    20c0:	ef 90       	pop	r14
    20c2:	df 90       	pop	r13
    20c4:	cf 90       	pop	r12
    20c6:	08 95       	ret

000020c8 <peakNextAlarmNode>:
    20c8:	40 91 23 23 	lds	r20, 0x2323
    20cc:	50 91 24 23 	lds	r21, 0x2324
    20d0:	60 e0       	ldi	r22, 0x00	; 0
    20d2:	70 e0       	ldi	r23, 0x00	; 0
    20d4:	ba 01       	movw	r22, r20
    20d6:	55 27       	eor	r21, r21
    20d8:	44 27       	eor	r20, r20
    20da:	20 91 09 23 	lds	r18, 0x2309
    20de:	30 91 0a 23 	lds	r19, 0x230A
    20e2:	42 0f       	add	r20, r18
    20e4:	53 1f       	adc	r21, r19
    20e6:	61 1d       	adc	r22, r1
    20e8:	71 1d       	adc	r23, r1
    20ea:	dc 01       	movw	r26, r24
    20ec:	ed 91       	ld	r30, X+
    20ee:	fc 91       	ld	r31, X
    20f0:	30 97       	sbiw	r30, 0x00	; 0
    20f2:	09 f1       	breq	.+66     	; 0x2136 <peakNextAlarmNode+0x6e>
    20f4:	80 81       	ld	r24, Z
    20f6:	81 11       	cpse	r24, r1
    20f8:	16 c0       	rjmp	.+44     	; 0x2126 <peakNextAlarmNode+0x5e>
    20fa:	81 81       	ldd	r24, Z+1	; 0x01
    20fc:	92 81       	ldd	r25, Z+2	; 0x02
    20fe:	a3 81       	ldd	r26, Z+3	; 0x03
    2100:	b4 81       	ldd	r27, Z+4	; 0x04
    2102:	84 17       	cp	r24, r20
    2104:	95 07       	cpc	r25, r21
    2106:	a6 07       	cpc	r26, r22
    2108:	b7 07       	cpc	r27, r23
    210a:	68 f0       	brcs	.+26     	; 0x2126 <peakNextAlarmNode+0x5e>
    210c:	17 c0       	rjmp	.+46     	; 0x213c <peakNextAlarmNode+0x74>
    210e:	80 81       	ld	r24, Z
    2110:	81 11       	cpse	r24, r1
    2112:	09 c0       	rjmp	.+18     	; 0x2126 <peakNextAlarmNode+0x5e>
    2114:	81 81       	ldd	r24, Z+1	; 0x01
    2116:	92 81       	ldd	r25, Z+2	; 0x02
    2118:	a3 81       	ldd	r26, Z+3	; 0x03
    211a:	b4 81       	ldd	r27, Z+4	; 0x04
    211c:	84 17       	cp	r24, r20
    211e:	95 07       	cpc	r25, r21
    2120:	a6 07       	cpc	r26, r22
    2122:	b7 07       	cpc	r27, r23
    2124:	70 f4       	brcc	.+28     	; 0x2142 <peakNextAlarmNode+0x7a>
    2126:	01 84       	ldd	r0, Z+9	; 0x09
    2128:	f2 85       	ldd	r31, Z+10	; 0x0a
    212a:	e0 2d       	mov	r30, r0
    212c:	30 97       	sbiw	r30, 0x00	; 0
    212e:	79 f7       	brne	.-34     	; 0x210e <peakNextAlarmNode+0x46>
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	08 95       	ret
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	08 95       	ret
    213c:	8e 2f       	mov	r24, r30
    213e:	9f 2f       	mov	r25, r31
    2140:	08 95       	ret
    2142:	8e 2f       	mov	r24, r30
    2144:	9f 2f       	mov	r25, r31
    2146:	08 95       	ret

00002148 <setNextAlarmRoutine>:
    2148:	cf 93       	push	r28
    214a:	df 93       	push	r29
    214c:	81 e2       	ldi	r24, 0x21	; 33
    214e:	93 e2       	ldi	r25, 0x23	; 35
    2150:	bb df       	rcall	.-138    	; 0x20c8 <peakNextAlarmNode>
    2152:	ec 01       	movw	r28, r24
    2154:	00 97       	sbiw	r24, 0x00	; 0
    2156:	59 f0       	breq	.+22     	; 0x216e <setNextAlarmRoutine+0x26>
    2158:	8d 81       	ldd	r24, Y+5	; 0x05
    215a:	9e 81       	ldd	r25, Y+6	; 0x06
    215c:	0e 94 85 08 	call	0x110a	; 0x110a <rtc_set_callback>
    2160:	69 81       	ldd	r22, Y+1	; 0x01
    2162:	7a 81       	ldd	r23, Y+2	; 0x02
    2164:	8b 81       	ldd	r24, Y+3	; 0x03
    2166:	9c 81       	ldd	r25, Y+4	; 0x04
    2168:	0e 94 6d 08 	call	0x10da	; 0x10da <rtc_set_alarm>
    216c:	04 c0       	rjmp	.+8      	; 0x2176 <setNextAlarmRoutine+0x2e>
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	0e 94 85 08 	call	0x110a	; 0x110a <rtc_set_callback>
    2176:	c0 93 1f 23 	sts	0x231F, r28
    217a:	d0 93 20 23 	sts	0x2320, r29
    217e:	df 91       	pop	r29
    2180:	cf 91       	pop	r28
    2182:	08 95       	ret

00002184 <removeExpiredAlarms>:
    2184:	cf 92       	push	r12
    2186:	df 92       	push	r13
    2188:	ef 92       	push	r14
    218a:	ff 92       	push	r15
    218c:	e0 91 21 23 	lds	r30, 0x2321
    2190:	f0 91 22 23 	lds	r31, 0x2322
    2194:	30 97       	sbiw	r30, 0x00	; 0
    2196:	99 f1       	breq	.+102    	; 0x21fe <removeExpiredAlarms+0x7a>
    2198:	c0 90 23 23 	lds	r12, 0x2323
    219c:	d0 90 24 23 	lds	r13, 0x2324
    21a0:	e1 2c       	mov	r14, r1
    21a2:	f1 2c       	mov	r15, r1
    21a4:	76 01       	movw	r14, r12
    21a6:	dd 24       	eor	r13, r13
    21a8:	cc 24       	eor	r12, r12
    21aa:	80 91 07 23 	lds	r24, 0x2307
    21ae:	90 91 08 23 	lds	r25, 0x2308
    21b2:	c8 0e       	add	r12, r24
    21b4:	d9 1e       	adc	r13, r25
    21b6:	e1 1c       	adc	r14, r1
    21b8:	f1 1c       	adc	r15, r1
    21ba:	41 81       	ldd	r20, Z+1	; 0x01
    21bc:	52 81       	ldd	r21, Z+2	; 0x02
    21be:	63 81       	ldd	r22, Z+3	; 0x03
    21c0:	74 81       	ldd	r23, Z+4	; 0x04
    21c2:	c4 16       	cp	r12, r20
    21c4:	d5 06       	cpc	r13, r21
    21c6:	e6 06       	cpc	r14, r22
    21c8:	f7 06       	cpc	r15, r23
    21ca:	c8 f0       	brcs	.+50     	; 0x21fe <removeExpiredAlarms+0x7a>
    21cc:	81 85       	ldd	r24, Z+9	; 0x09
    21ce:	92 85       	ldd	r25, Z+10	; 0x0a
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	79 f0       	breq	.+30     	; 0x21f2 <removeExpiredAlarms+0x6e>
    21d4:	80 93 21 23 	sts	0x2321, r24
    21d8:	90 93 22 23 	sts	0x2322, r25
    21dc:	cf 01       	movw	r24, r30
    21de:	f3 d4       	rcall	.+2534   	; 0x2bc6 <free>
    21e0:	e0 91 21 23 	lds	r30, 0x2321
    21e4:	f0 91 22 23 	lds	r31, 0x2322
    21e8:	17 82       	std	Z+7, r1	; 0x07
    21ea:	10 86       	std	Z+8, r1	; 0x08
    21ec:	30 97       	sbiw	r30, 0x00	; 0
    21ee:	29 f7       	brne	.-54     	; 0x21ba <removeExpiredAlarms+0x36>
    21f0:	06 c0       	rjmp	.+12     	; 0x21fe <removeExpiredAlarms+0x7a>
    21f2:	cf 01       	movw	r24, r30
    21f4:	e8 d4       	rcall	.+2512   	; 0x2bc6 <free>
    21f6:	10 92 21 23 	sts	0x2321, r1
    21fa:	10 92 22 23 	sts	0x2322, r1
    21fe:	ff 90       	pop	r15
    2200:	ef 90       	pop	r14
    2202:	df 90       	pop	r13
    2204:	cf 90       	pop	r12
    2206:	08 95       	ret

00002208 <addAlarm>:
    2208:	cf 92       	push	r12
    220a:	df 92       	push	r13
    220c:	ef 92       	push	r14
    220e:	ff 92       	push	r15
    2210:	0f 93       	push	r16
    2212:	1f 93       	push	r17
    2214:	cf 93       	push	r28
    2216:	df 93       	push	r29
    2218:	6b 01       	movw	r12, r22
    221a:	7c 01       	movw	r14, r24
    221c:	8a 01       	movw	r16, r20
    221e:	b2 df       	rcall	.-156    	; 0x2184 <removeExpiredAlarms>
    2220:	8b e0       	ldi	r24, 0x0B	; 11
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	38 d4       	rcall	.+2160   	; 0x2a96 <malloc>
    2226:	dc 01       	movw	r26, r24
    2228:	11 96       	adiw	r26, 0x01	; 1
    222a:	cd 92       	st	X+, r12
    222c:	dd 92       	st	X+, r13
    222e:	ed 92       	st	X+, r14
    2230:	fc 92       	st	X, r15
    2232:	14 97       	sbiw	r26, 0x04	; 4
    2234:	15 96       	adiw	r26, 0x05	; 5
    2236:	0d 93       	st	X+, r16
    2238:	1c 93       	st	X, r17
    223a:	16 97       	sbiw	r26, 0x06	; 6
    223c:	1c 92       	st	X, r1
    223e:	c0 91 21 23 	lds	r28, 0x2321
    2242:	d0 91 22 23 	lds	r29, 0x2322
    2246:	20 97       	sbiw	r28, 0x00	; 0
    2248:	f1 f4       	brne	.+60     	; 0x2286 <addAlarm+0x7e>
    224a:	80 93 21 23 	sts	0x2321, r24
    224e:	90 93 22 23 	sts	0x2322, r25
    2252:	19 96       	adiw	r26, 0x09	; 9
    2254:	1d 92       	st	X+, r1
    2256:	1c 92       	st	X, r1
    2258:	1a 97       	sbiw	r26, 0x0a	; 10
    225a:	17 96       	adiw	r26, 0x07	; 7
    225c:	1d 92       	st	X+, r1
    225e:	1c 92       	st	X, r1
    2260:	18 97       	sbiw	r26, 0x08	; 8
    2262:	80 93 1f 23 	sts	0x231F, r24
    2266:	90 93 20 23 	sts	0x2320, r25
    226a:	c8 01       	movw	r24, r16
    226c:	0e 94 85 08 	call	0x110a	; 0x110a <rtc_set_callback>
    2270:	e0 91 21 23 	lds	r30, 0x2321
    2274:	f0 91 22 23 	lds	r31, 0x2322
    2278:	61 81       	ldd	r22, Z+1	; 0x01
    227a:	72 81       	ldd	r23, Z+2	; 0x02
    227c:	83 81       	ldd	r24, Z+3	; 0x03
    227e:	94 81       	ldd	r25, Z+4	; 0x04
    2280:	0e 94 6d 08 	call	0x10da	; 0x10da <rtc_set_alarm>
    2284:	42 c0       	rjmp	.+132    	; 0x230a <addAlarm+0x102>
    2286:	49 81       	ldd	r20, Y+1	; 0x01
    2288:	5a 81       	ldd	r21, Y+2	; 0x02
    228a:	6b 81       	ldd	r22, Y+3	; 0x03
    228c:	7c 81       	ldd	r23, Y+4	; 0x04
    228e:	c4 16       	cp	r12, r20
    2290:	d5 06       	cpc	r13, r21
    2292:	e6 06       	cpc	r14, r22
    2294:	f7 06       	cpc	r15, r23
    2296:	58 f5       	brcc	.+86     	; 0x22ee <addAlarm+0xe6>
    2298:	8f 83       	std	Y+7, r24	; 0x07
    229a:	98 87       	std	Y+8, r25	; 0x08
    229c:	17 96       	adiw	r26, 0x07	; 7
    229e:	1d 92       	st	X+, r1
    22a0:	1c 92       	st	X, r1
    22a2:	18 97       	sbiw	r26, 0x08	; 8
    22a4:	19 96       	adiw	r26, 0x09	; 9
    22a6:	cd 93       	st	X+, r28
    22a8:	dc 93       	st	X, r29
    22aa:	1a 97       	sbiw	r26, 0x0a	; 10
    22ac:	80 93 21 23 	sts	0x2321, r24
    22b0:	90 93 22 23 	sts	0x2322, r25
    22b4:	2a c0       	rjmp	.+84     	; 0x230a <addAlarm+0x102>
    22b6:	41 81       	ldd	r20, Z+1	; 0x01
    22b8:	52 81       	ldd	r21, Z+2	; 0x02
    22ba:	63 81       	ldd	r22, Z+3	; 0x03
    22bc:	74 81       	ldd	r23, Z+4	; 0x04
    22be:	c4 16       	cp	r12, r20
    22c0:	d5 06       	cpc	r13, r21
    22c2:	e6 06       	cpc	r14, r22
    22c4:	f7 06       	cpc	r15, r23
    22c6:	10 f0       	brcs	.+4      	; 0x22cc <addAlarm+0xc4>
    22c8:	ef 01       	movw	r28, r30
    22ca:	11 c0       	rjmp	.+34     	; 0x22ee <addAlarm+0xe6>
    22cc:	19 96       	adiw	r26, 0x09	; 9
    22ce:	ed 93       	st	X+, r30
    22d0:	fc 93       	st	X, r31
    22d2:	1a 97       	sbiw	r26, 0x0a	; 10
    22d4:	87 81       	ldd	r24, Z+7	; 0x07
    22d6:	90 85       	ldd	r25, Z+8	; 0x08
    22d8:	17 96       	adiw	r26, 0x07	; 7
    22da:	8d 93       	st	X+, r24
    22dc:	9c 93       	st	X, r25
    22de:	18 97       	sbiw	r26, 0x08	; 8
    22e0:	c7 81       	ldd	r28, Z+7	; 0x07
    22e2:	d0 85       	ldd	r29, Z+8	; 0x08
    22e4:	a9 87       	std	Y+9, r26	; 0x09
    22e6:	ba 87       	std	Y+10, r27	; 0x0a
    22e8:	a7 83       	std	Z+7, r26	; 0x07
    22ea:	b0 87       	std	Z+8, r27	; 0x08
    22ec:	0e c0       	rjmp	.+28     	; 0x230a <addAlarm+0x102>
    22ee:	e9 85       	ldd	r30, Y+9	; 0x09
    22f0:	fa 85       	ldd	r31, Y+10	; 0x0a
    22f2:	30 97       	sbiw	r30, 0x00	; 0
    22f4:	01 f7       	brne	.-64     	; 0x22b6 <addAlarm+0xae>
    22f6:	a9 87       	std	Y+9, r26	; 0x09
    22f8:	ba 87       	std	Y+10, r27	; 0x0a
    22fa:	17 96       	adiw	r26, 0x07	; 7
    22fc:	cd 93       	st	X+, r28
    22fe:	dc 93       	st	X, r29
    2300:	18 97       	sbiw	r26, 0x08	; 8
    2302:	19 96       	adiw	r26, 0x09	; 9
    2304:	1d 92       	st	X+, r1
    2306:	1c 92       	st	X, r1
    2308:	1a 97       	sbiw	r26, 0x0a	; 10
    230a:	df 91       	pop	r29
    230c:	cf 91       	pop	r28
    230e:	1f 91       	pop	r17
    2310:	0f 91       	pop	r16
    2312:	ff 90       	pop	r15
    2314:	ef 90       	pop	r14
    2316:	df 90       	pop	r13
    2318:	cf 90       	pop	r12
    231a:	08 95       	ret

0000231c <__vector_10>:

//Redefined from rtc.c
ISR(RTC_OVF_vect)
{
    231c:	1f 92       	push	r1
    231e:	0f 92       	push	r0
    2320:	0f b6       	in	r0, 0x3f	; 63
    2322:	0f 92       	push	r0
    2324:	11 24       	eor	r1, r1
    2326:	08 b6       	in	r0, 0x38	; 56
    2328:	0f 92       	push	r0
    232a:	18 be       	out	0x38, r1	; 56
    232c:	0b b6       	in	r0, 0x3b	; 59
    232e:	0f 92       	push	r0
    2330:	1b be       	out	0x3b, r1	; 59
    2332:	8f 93       	push	r24
    2334:	9f 93       	push	r25
    2336:	ef 93       	push	r30
    2338:	ff 93       	push	r31
	if (++(rtc_data.counter_high) == 0) 
    233a:	e7 e0       	ldi	r30, 0x07	; 7
    233c:	f3 e2       	ldi	r31, 0x23	; 35
    233e:	80 81       	ld	r24, Z
    2340:	91 81       	ldd	r25, Z+1	; 0x01
    2342:	01 96       	adiw	r24, 0x01	; 1
    2344:	80 83       	st	Z, r24
    2346:	91 83       	std	Z+1, r25	; 0x01
    2348:	89 2b       	or	r24, r25
    234a:	49 f4       	brne	.+18     	; 0x235e <__vector_10+0x42>
		soft_counter++;
    234c:	80 91 23 23 	lds	r24, 0x2323
    2350:	90 91 24 23 	lds	r25, 0x2324
    2354:	01 96       	adiw	r24, 0x01	; 1
    2356:	80 93 23 23 	sts	0x2323, r24
    235a:	90 93 24 23 	sts	0x2324, r25
}
    235e:	ff 91       	pop	r31
    2360:	ef 91       	pop	r30
    2362:	9f 91       	pop	r25
    2364:	8f 91       	pop	r24
    2366:	0f 90       	pop	r0
    2368:	0b be       	out	0x3b, r0	; 59
    236a:	0f 90       	pop	r0
    236c:	08 be       	out	0x38, r0	; 56
    236e:	0f 90       	pop	r0
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	0f 90       	pop	r0
    2374:	1f 90       	pop	r1
    2376:	18 95       	reti

00002378 <__vector_11>:

//Redefined from rtc.c
//Should wake the device at regular intervals RTC_COMP_vect
ISR(RTC_COMP_vect)
{
    2378:	1f 92       	push	r1
    237a:	0f 92       	push	r0
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	0f 92       	push	r0
    2380:	11 24       	eor	r1, r1
    2382:	08 b6       	in	r0, 0x38	; 56
    2384:	0f 92       	push	r0
    2386:	18 be       	out	0x38, r1	; 56
    2388:	09 b6       	in	r0, 0x39	; 57
    238a:	0f 92       	push	r0
    238c:	19 be       	out	0x39, r1	; 57
    238e:	0a b6       	in	r0, 0x3a	; 58
    2390:	0f 92       	push	r0
    2392:	1a be       	out	0x3a, r1	; 58
    2394:	0b b6       	in	r0, 0x3b	; 59
    2396:	0f 92       	push	r0
    2398:	1b be       	out	0x3b, r1	; 59
    239a:	cf 92       	push	r12
    239c:	df 92       	push	r13
    239e:	ef 92       	push	r14
    23a0:	ff 92       	push	r15
    23a2:	0f 93       	push	r16
    23a4:	1f 93       	push	r17
    23a6:	2f 93       	push	r18
    23a8:	3f 93       	push	r19
    23aa:	4f 93       	push	r20
    23ac:	5f 93       	push	r21
    23ae:	6f 93       	push	r22
    23b0:	7f 93       	push	r23
    23b2:	8f 93       	push	r24
    23b4:	9f 93       	push	r25
    23b6:	af 93       	push	r26
    23b8:	bf 93       	push	r27
    23ba:	cf 93       	push	r28
    23bc:	df 93       	push	r29
    23be:	ef 93       	push	r30
    23c0:	ff 93       	push	r31
	//uint32_t curr_time = (uint32_t)((uint32_t)soft_counter << 16) | (uint32_t)rtc_data.counter_high;
	//convert to epoch time
	uint32_t curr_epoch_time = (uint32_t)(((uint32_t)((uint32_t)soft_counter << 16) | (uint32_t)rtc_data.counter_high));
    23c2:	00 91 23 23 	lds	r16, 0x2323
    23c6:	10 91 24 23 	lds	r17, 0x2324
    23ca:	80 91 07 23 	lds	r24, 0x2307
    23ce:	90 91 08 23 	lds	r25, 0x2308
    23d2:	a0 e0       	ldi	r26, 0x00	; 0
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	98 01       	movw	r18, r16
    23dc:	11 27       	eor	r17, r17
    23de:	00 27       	eor	r16, r16
    23e0:	08 2b       	or	r16, r24
    23e2:	19 2b       	or	r17, r25
    23e4:	2a 2b       	or	r18, r26
    23e6:	3b 2b       	or	r19, r27
	curr_epoch_time <<= 2;
    23e8:	00 0f       	add	r16, r16
    23ea:	11 1f       	adc	r17, r17
    23ec:	22 1f       	adc	r18, r18
    23ee:	33 1f       	adc	r19, r19
    23f0:	00 0f       	add	r16, r16
    23f2:	11 1f       	adc	r17, r17
    23f4:	22 1f       	adc	r18, r18
    23f6:	33 1f       	adc	r19, r19
	curr_epoch_time |= (uint32_t)(RTC.CNT/CLOCK_FREQ);
    23f8:	e0 e0       	ldi	r30, 0x00	; 0
    23fa:	f4 e0       	ldi	r31, 0x04	; 4
    23fc:	40 85       	ldd	r20, Z+8	; 0x08
    23fe:	51 85       	ldd	r21, Z+9	; 0x09
    2400:	44 27       	eor	r20, r20
    2402:	55 0f       	add	r21, r21
    2404:	44 1f       	adc	r20, r20
    2406:	55 27       	eor	r21, r21
    2408:	60 e0       	ldi	r22, 0x00	; 0
    240a:	70 e0       	ldi	r23, 0x00	; 0
    240c:	04 2b       	or	r16, r20
    240e:	15 2b       	or	r17, r21
    2410:	26 2b       	or	r18, r22
    2412:	37 2b       	or	r19, r23
	
	uint32_t alarm_time = ((uint32_t)((uint32_t)rtc_data.alarm_high << 16) | (uint32_t)rtc_data.alarm_low);
    2414:	40 91 09 23 	lds	r20, 0x2309
    2418:	50 91 0a 23 	lds	r21, 0x230A
    241c:	60 e0       	ldi	r22, 0x00	; 0
    241e:	70 e0       	ldi	r23, 0x00	; 0
    2420:	ba 01       	movw	r22, r20
    2422:	55 27       	eor	r21, r21
    2424:	44 27       	eor	r20, r20
    2426:	c0 90 0b 23 	lds	r12, 0x230B
    242a:	d0 90 0c 23 	lds	r13, 0x230C
    242e:	e1 2c       	mov	r14, r1
    2430:	f1 2c       	mov	r15, r1
    2432:	4c 29       	or	r20, r12
    2434:	5d 29       	or	r21, r13
    2436:	6e 29       	or	r22, r14
    2438:	7f 29       	or	r23, r15

	if (curr_epoch_time > alarm_time && alarm_curr_ref && !alarm_curr_ref->expired) {
    243a:	40 17       	cp	r20, r16
    243c:	51 07       	cpc	r21, r17
    243e:	62 07       	cpc	r22, r18
    2440:	73 07       	cpc	r23, r19
    2442:	08 f0       	brcs	.+2      	; 0x2446 <__vector_11+0xce>
    2444:	4a c0       	rjmp	.+148    	; 0x24da <__vector_11+0x162>
    2446:	e0 91 1f 23 	lds	r30, 0x231F
    244a:	f0 91 20 23 	lds	r31, 0x2320
    244e:	30 97       	sbiw	r30, 0x00	; 0
    2450:	09 f4       	brne	.+2      	; 0x2454 <__vector_11+0xdc>
    2452:	43 c0       	rjmp	.+134    	; 0x24da <__vector_11+0x162>
    2454:	20 81       	ld	r18, Z
    2456:	21 11       	cpse	r18, r1
    2458:	40 c0       	rjmp	.+128    	; 0x24da <__vector_11+0x162>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    245a:	21 e0       	ldi	r18, 0x01	; 1
    245c:	e0 e0       	ldi	r30, 0x00	; 0
    245e:	f4 e0       	ldi	r31, 0x04	; 4
    2460:	22 83       	std	Z+2, r18	; 0x02
		if (rtc_data.callback) {
    2462:	e0 91 0d 23 	lds	r30, 0x230D
    2466:	f0 91 0e 23 	lds	r31, 0x230E
    246a:	30 97       	sbiw	r30, 0x00	; 0
    246c:	b1 f1       	breq	.+108    	; 0x24da <__vector_11+0x162>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
    246e:	c0 e0       	ldi	r28, 0x00	; 0
    2470:	d4 e0       	ldi	r29, 0x04	; 4
    2472:	68 85       	ldd	r22, Y+8	; 0x08
    2474:	79 85       	ldd	r23, Y+9	; 0x09
	uint32_t alarm_time = ((uint32_t)((uint32_t)rtc_data.alarm_high << 16) | (uint32_t)rtc_data.alarm_low);

	if (curr_epoch_time > alarm_time && alarm_curr_ref && !alarm_curr_ref->expired) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    2476:	9c 01       	movw	r18, r24
    2478:	11 27       	eor	r17, r17
    247a:	00 27       	eor	r16, r16
					| RTC.CNT;
    247c:	cb 01       	movw	r24, r22
    247e:	a0 e0       	ldi	r26, 0x00	; 0
    2480:	b0 e0       	ldi	r27, 0x00	; 0
	uint32_t alarm_time = ((uint32_t)((uint32_t)rtc_data.alarm_high << 16) | (uint32_t)rtc_data.alarm_low);

	if (curr_epoch_time > alarm_time && alarm_curr_ref && !alarm_curr_ref->expired) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    2482:	bc 01       	movw	r22, r24
    2484:	cd 01       	movw	r24, r26
    2486:	60 2b       	or	r22, r16
    2488:	71 2b       	or	r23, r17
    248a:	82 2b       	or	r24, r18
    248c:	93 2b       	or	r25, r19
					| RTC.CNT;
	
			//previously alarm_low referenced the physical clock cycles
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    248e:	00 91 09 23 	lds	r16, 0x2309
    2492:	10 91 0a 23 	lds	r17, 0x230A
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	98 01       	movw	r18, r16
    249c:	11 27       	eor	r17, r17
    249e:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
    24a0:	c0 90 0b 23 	lds	r12, 0x230B
    24a4:	d0 90 0c 23 	lds	r13, 0x230C
    24a8:	e1 2c       	mov	r14, r1
    24aa:	f1 2c       	mov	r15, r1
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
	
			//previously alarm_low referenced the physical clock cycles
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    24ac:	0c 29       	or	r16, r12
    24ae:	1d 29       	or	r17, r13
    24b0:	2e 29       	or	r18, r14
    24b2:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
    24b4:	06 17       	cp	r16, r22
    24b6:	17 07       	cpc	r17, r23
    24b8:	28 07       	cpc	r18, r24
    24ba:	39 07       	cpc	r19, r25
    24bc:	30 f0       	brcs	.+12     	; 0x24ca <__vector_11+0x152>
				count = alarm + 1;
    24be:	c9 01       	movw	r24, r18
    24c0:	b8 01       	movw	r22, r16
    24c2:	6f 5f       	subi	r22, 0xFF	; 255
    24c4:	7f 4f       	sbci	r23, 0xFF	; 255
    24c6:	8f 4f       	sbci	r24, 0xFF	; 255
    24c8:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
    24ca:	19 95       	eicall
			alarm_curr_ref->expired = 1;
    24cc:	e0 91 1f 23 	lds	r30, 0x231F
    24d0:	f0 91 20 23 	lds	r31, 0x2320
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	80 83       	st	Z, r24
			 * if there is another alarm to be set
			 * peak from priority queue (pq) which  will hold
			 * tuples of (time,func*). The key for pq elements
			 * is time.
			 */
			setNextAlarmRoutine();
    24d8:	37 de       	rcall	.-914    	; 0x2148 <setNextAlarmRoutine>
		}
	}
}
    24da:	ff 91       	pop	r31
    24dc:	ef 91       	pop	r30
    24de:	df 91       	pop	r29
    24e0:	cf 91       	pop	r28
    24e2:	bf 91       	pop	r27
    24e4:	af 91       	pop	r26
    24e6:	9f 91       	pop	r25
    24e8:	8f 91       	pop	r24
    24ea:	7f 91       	pop	r23
    24ec:	6f 91       	pop	r22
    24ee:	5f 91       	pop	r21
    24f0:	4f 91       	pop	r20
    24f2:	3f 91       	pop	r19
    24f4:	2f 91       	pop	r18
    24f6:	1f 91       	pop	r17
    24f8:	0f 91       	pop	r16
    24fa:	ff 90       	pop	r15
    24fc:	ef 90       	pop	r14
    24fe:	df 90       	pop	r13
    2500:	cf 90       	pop	r12
    2502:	0f 90       	pop	r0
    2504:	0b be       	out	0x3b, r0	; 59
    2506:	0f 90       	pop	r0
    2508:	0a be       	out	0x3a, r0	; 58
    250a:	0f 90       	pop	r0
    250c:	09 be       	out	0x39, r0	; 57
    250e:	0f 90       	pop	r0
    2510:	08 be       	out	0x38, r0	; 56
    2512:	0f 90       	pop	r0
    2514:	0f be       	out	0x3f, r0	; 63
    2516:	0f 90       	pop	r0
    2518:	1f 90       	pop	r1
    251a:	18 95       	reti

0000251c <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
    251c:	0f 93       	push	r16
    251e:	1f 93       	push	r17
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
    2524:	1f 92       	push	r1
    2526:	cd b7       	in	r28, 0x3d	; 61
    2528:	de b7       	in	r29, 0x3e	; 62
    252a:	08 2f       	mov	r16, r24
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
    252c:	11 e0       	ldi	r17, 0x01	; 1
    252e:	19 83       	std	Y+1, r17	; 0x01
	spi_select_device(SSD1306_SPI, &device);
    2530:	be 01       	movw	r22, r28
    2532:	6f 5f       	subi	r22, 0xFF	; 255
    2534:	7f 4f       	sbci	r23, 0xFF	; 255
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	4b d1       	rcall	.+662    	; 0x27d2 <spi_select_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    253c:	e0 e0       	ldi	r30, 0x00	; 0
    253e:	f6 e0       	ldi	r31, 0x06	; 6
    2540:	16 83       	std	Z+6, r17	; 0x06
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
    2542:	03 b9       	out	0x03, r16	; 3
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
	spi_deselect_device(SSD1306_SPI, &device);
    2544:	be 01       	movw	r22, r28
    2546:	6f 5f       	subi	r22, 0xFF	; 255
    2548:	7f 4f       	sbci	r23, 0xFF	; 255
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	57 d1       	rcall	.+686    	; 0x27fe <spi_deselect_device>
#endif
}
    2550:	0f 90       	pop	r0
    2552:	df 91       	pop	r29
    2554:	cf 91       	pop	r28
    2556:	1f 91       	pop	r17
    2558:	0f 91       	pop	r16
    255a:	08 95       	ret

0000255c <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
    255c:	cf 92       	push	r12
    255e:	df 92       	push	r13
    2560:	ef 92       	push	r14
    2562:	ff 92       	push	r15
    2564:	0f 93       	push	r16
    2566:	1f 93       	push	r17
    2568:	cf 93       	push	r28
    256a:	df 93       	push	r29
    256c:	1f 92       	push	r1
    256e:	cd b7       	in	r28, 0x3d	; 61
    2570:	de b7       	in	r29, 0x3e	; 62
    2572:	84 e0       	ldi	r24, 0x04	; 4
    2574:	e0 e0       	ldi	r30, 0x00	; 0
    2576:	f6 e0       	ldi	r31, 0x06	; 6
    2578:	86 83       	std	Z+6, r24	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    257a:	85 83       	std	Z+5, r24	; 0x05
	};
	usart_spi_init(SSD1306_USART_SPI);
	usart_spi_setup_device(SSD1306_USART_SPI, &device, spi_flags,
			SSD1306_CLOCK_SPEED, spi_select_id);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	89 83       	std	Y+1, r24	; 0x01
		.id = SSD1306_CS_PIN,
	};
	spi_master_init(SSD1306_SPI);
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	db d0       	rcall	.+438    	; 0x273c <spi_master_init>
	spi_master_setup_device(SSD1306_SPI, &device, spi_flags,
    2586:	c1 2c       	mov	r12, r1
    2588:	d1 2c       	mov	r13, r1
    258a:	76 01       	movw	r14, r12
    258c:	00 e0       	ldi	r16, 0x00	; 0
    258e:	1b e1       	ldi	r17, 0x1B	; 27
    2590:	27 eb       	ldi	r18, 0xB7	; 183
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 e0       	ldi	r20, 0x00	; 0
    2596:	be 01       	movw	r22, r28
    2598:	6f 5f       	subi	r22, 0xFF	; 255
    259a:	7f 4f       	sbci	r23, 0xFF	; 255
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	f9 d0       	rcall	.+498    	; 0x2794 <spi_master_setup_device>
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_enable(SPI_t *spi)
{
	spi->CTRL |= SPI_ENABLE_bm;
    25a2:	06 9a       	sbi	0x00, 6	; 0

	// Initialize the interface
	ssd1306_interface_init();

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
    25a4:	88 ea       	ldi	r24, 0xA8	; 168
    25a6:	ba df       	rcall	.-140    	; 0x251c <ssd1306_write_command>
	ssd1306_write_command(0x1F);
    25a8:	8f e1       	ldi	r24, 0x1F	; 31
    25aa:	b8 df       	rcall	.-144    	; 0x251c <ssd1306_write_command>

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
    25ac:	83 ed       	ldi	r24, 0xD3	; 211
    25ae:	b6 df       	rcall	.-148    	; 0x251c <ssd1306_write_command>
	ssd1306_write_command(0x00);
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	b4 df       	rcall	.-152    	; 0x251c <ssd1306_write_command>

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
    25b4:	80 e4       	ldi	r24, 0x40	; 64
    25b6:	b2 df       	rcall	.-156    	; 0x251c <ssd1306_write_command>

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
    25b8:	81 ea       	ldi	r24, 0xA1	; 161
    25ba:	b0 df       	rcall	.-160    	; 0x251c <ssd1306_write_command>

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
    25bc:	88 ec       	ldi	r24, 0xC8	; 200
    25be:	ae df       	rcall	.-164    	; 0x251c <ssd1306_write_command>

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
    25c0:	8a ed       	ldi	r24, 0xDA	; 218
    25c2:	ac df       	rcall	.-168    	; 0x251c <ssd1306_write_command>
	ssd1306_write_command(0x02);
    25c4:	82 e0       	ldi	r24, 0x02	; 2
    25c6:	aa df       	rcall	.-172    	; 0x251c <ssd1306_write_command>
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
    25c8:	81 e8       	ldi	r24, 0x81	; 129
    25ca:	a8 df       	rcall	.-176    	; 0x251c <ssd1306_write_command>
	ssd1306_write_command(contrast);
    25cc:	8f e8       	ldi	r24, 0x8F	; 143
    25ce:	a6 df       	rcall	.-180    	; 0x251c <ssd1306_write_command>

	ssd1306_set_contrast(0x8F);

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
    25d0:	84 ea       	ldi	r24, 0xA4	; 164
    25d2:	a4 df       	rcall	.-184    	; 0x251c <ssd1306_write_command>
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
    25d4:	86 ea       	ldi	r24, 0xA6	; 166
    25d6:	a2 df       	rcall	.-188    	; 0x251c <ssd1306_write_command>

	ssd1306_display_invert_disable();

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
    25d8:	85 ed       	ldi	r24, 0xD5	; 213
    25da:	a0 df       	rcall	.-192    	; 0x251c <ssd1306_write_command>
	ssd1306_write_command(0x80);
    25dc:	80 e8       	ldi	r24, 0x80	; 128
    25de:	9e df       	rcall	.-196    	; 0x251c <ssd1306_write_command>

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
    25e0:	8d e8       	ldi	r24, 0x8D	; 141
    25e2:	9c df       	rcall	.-200    	; 0x251c <ssd1306_write_command>
	ssd1306_write_command(0x14);
    25e4:	84 e1       	ldi	r24, 0x14	; 20
    25e6:	9a df       	rcall	.-204    	; 0x251c <ssd1306_write_command>

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
    25e8:	8b ed       	ldi	r24, 0xDB	; 219
    25ea:	98 df       	rcall	.-208    	; 0x251c <ssd1306_write_command>
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
    25ec:	80 e4       	ldi	r24, 0x40	; 64
    25ee:	96 df       	rcall	.-212    	; 0x251c <ssd1306_write_command>

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
    25f0:	89 ed       	ldi	r24, 0xD9	; 217
    25f2:	94 df       	rcall	.-216    	; 0x251c <ssd1306_write_command>
	ssd1306_write_command(0xF1);
    25f4:	81 ef       	ldi	r24, 0xF1	; 241
    25f6:	92 df       	rcall	.-220    	; 0x251c <ssd1306_write_command>
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
    25f8:	8f ea       	ldi	r24, 0xAF	; 175
    25fa:	90 df       	rcall	.-224    	; 0x251c <ssd1306_write_command>

	ssd1306_display_on();
}
    25fc:	0f 90       	pop	r0
    25fe:	df 91       	pop	r29
    2600:	cf 91       	pop	r28
    2602:	1f 91       	pop	r17
    2604:	0f 91       	pop	r16
    2606:	ff 90       	pop	r15
    2608:	ef 90       	pop	r14
    260a:	df 90       	pop	r13
    260c:	cf 90       	pop	r12
    260e:	08 95       	ret

00002610 <sysclk_init>:
    2610:	cf 93       	push	r28
    2612:	df 93       	push	r29
    2614:	00 d0       	rcall	.+0      	; 0x2616 <sysclk_init+0x6>
    2616:	1f 92       	push	r1
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
    261c:	8f ef       	ldi	r24, 0xFF	; 255
    261e:	80 93 70 00 	sts	0x0070, r24
    2622:	80 93 71 00 	sts	0x0071, r24
    2626:	80 93 72 00 	sts	0x0072, r24
    262a:	80 93 73 00 	sts	0x0073, r24
    262e:	80 93 74 00 	sts	0x0074, r24
    2632:	80 93 75 00 	sts	0x0075, r24
    2636:	80 93 76 00 	sts	0x0076, r24
    263a:	6c e1       	ldi	r22, 0x1C	; 28
    263c:	70 e0       	ldi	r23, 0x00	; 0
    263e:	82 e0       	ldi	r24, 0x02	; 2
    2640:	07 d1       	rcall	.+526    	; 0x2850 <nvm_read_byte>
    2642:	8a 83       	std	Y+2, r24	; 0x02
    2644:	6d e1       	ldi	r22, 0x1D	; 29
    2646:	70 e0       	ldi	r23, 0x00	; 0
    2648:	82 e0       	ldi	r24, 0x02	; 2
    264a:	02 d1       	rcall	.+516    	; 0x2850 <nvm_read_byte>
    264c:	89 83       	std	Y+1, r24	; 0x01
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	9a 81       	ldd	r25, Y+2	; 0x02
    2652:	01 96       	adiw	r24, 0x01	; 1
    2654:	21 f4       	brne	.+8      	; 0x265e <sysclk_init+0x4e>
    2656:	80 e4       	ldi	r24, 0x40	; 64
    2658:	93 e2       	ldi	r25, 0x23	; 35
    265a:	89 83       	std	Y+1, r24	; 0x01
    265c:	9a 83       	std	Y+2, r25	; 0x02
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	9a 81       	ldd	r25, Y+2	; 0x02
    2662:	8b 83       	std	Y+3, r24	; 0x03
    2664:	9c 83       	std	Y+4, r25	; 0x04
    2666:	e0 e6       	ldi	r30, 0x60	; 96
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	82 83       	std	Z+2, r24	; 0x02
    266c:	8c 81       	ldd	r24, Y+4	; 0x04
    266e:	83 83       	std	Z+3, r24	; 0x03
    2670:	82 e0       	ldi	r24, 0x02	; 2
    2672:	e0 e5       	ldi	r30, 0x50	; 80
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	82 83       	std	Z+2, r24	; 0x02
    2678:	8f b7       	in	r24, 0x3f	; 63
    267a:	f8 94       	cli
    267c:	90 81       	ld	r25, Z
    267e:	98 60       	ori	r25, 0x08	; 8
    2680:	90 83       	st	Z, r25
    2682:	8f bf       	out	0x3f, r24	; 63
    2684:	81 81       	ldd	r24, Z+1	; 0x01
    2686:	83 ff       	sbrs	r24, 3
    2688:	fd cf       	rjmp	.-6      	; 0x2684 <sysclk_init+0x74>
    268a:	8b e0       	ldi	r24, 0x0B	; 11
    268c:	e0 e4       	ldi	r30, 0x40	; 64
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	83 83       	std	Z+3, r24	; 0x03
    2692:	24 96       	adiw	r28, 0x04	; 4
    2694:	cd bf       	out	0x3d, r28	; 61
    2696:	de bf       	out	0x3e, r29	; 62
    2698:	df 91       	pop	r29
    269a:	cf 91       	pop	r28
    269c:	08 95       	ret

0000269e <sysclk_enable_module>:
    269e:	9f b7       	in	r25, 0x3f	; 63
    26a0:	f8 94       	cli
    26a2:	e8 2f       	mov	r30, r24
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	e0 59       	subi	r30, 0x90	; 144
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	60 95       	com	r22
    26ac:	80 81       	ld	r24, Z
    26ae:	68 23       	and	r22, r24
    26b0:	60 83       	st	Z, r22
    26b2:	9f bf       	out	0x3f, r25	; 63
    26b4:	08 95       	ret

000026b6 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    26b6:	86 30       	cpi	r24, 0x06	; 6
    26b8:	11 f4       	brne	.+4      	; 0x26be <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
    26ba:	68 e1       	ldi	r22, 0x18	; 24
    26bc:	01 c0       	rjmp	.+2      	; 0x26c0 <sysclk_enable_usb+0xa>
	}
	else {
		prescaler = 0;
    26be:	60 e0       	ldi	r22, 0x00	; 0

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    26c0:	e0 e5       	ldi	r30, 0x50	; 80
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	81 81       	ldd	r24, Z+1	; 0x01
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    26c6:	81 fd       	sbrc	r24, 1
    26c8:	09 c0       	rjmp	.+18     	; 0x26dc <sysclk_enable_usb+0x26>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    26ca:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    26cc:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    26ce:	90 81       	ld	r25, Z
    26d0:	92 60       	ori	r25, 0x02	; 2
    26d2:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    26d4:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    26d6:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    26d8:	81 ff       	sbrs	r24, 1
    26da:	fd cf       	rjmp	.-6      	; 0x26d6 <sysclk_enable_usb+0x20>
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    26dc:	63 60       	ori	r22, 0x03	; 3
    26de:	84 e4       	ldi	r24, 0x44	; 68
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	b0 d0       	rcall	.+352    	; 0x2844 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    26e4:	60 e4       	ldi	r22, 0x40	; 64
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	da cf       	rjmp	.-76     	; 0x269e <sysclk_enable_module>
    26ea:	08 95       	ret

000026ec <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    26ec:	cf 93       	push	r28
    26ee:	df 93       	push	r29
    26f0:	fc 01       	movw	r30, r24
    26f2:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    26f8:	c6 2f       	mov	r28, r22
    26fa:	d0 e0       	ldi	r29, 0x00	; 0
    26fc:	de 01       	movw	r26, r28
    26fe:	02 2e       	mov	r0, r18
    2700:	02 c0       	rjmp	.+4      	; 0x2706 <ioport_configure_port_pin+0x1a>
    2702:	b5 95       	asr	r27
    2704:	a7 95       	ror	r26
    2706:	0a 94       	dec	r0
    2708:	e2 f7       	brpl	.-8      	; 0x2702 <ioport_configure_port_pin+0x16>
    270a:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    270c:	50 83       	st	Z, r21
    270e:	2f 5f       	subi	r18, 0xFF	; 255
    2710:	3f 4f       	sbci	r19, 0xFF	; 255
    2712:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    2714:	28 30       	cpi	r18, 0x08	; 8
    2716:	31 05       	cpc	r19, r1
    2718:	89 f7       	brne	.-30     	; 0x26fc <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    271a:	40 ff       	sbrs	r20, 0
    271c:	0a c0       	rjmp	.+20     	; 0x2732 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    271e:	41 ff       	sbrs	r20, 1
    2720:	03 c0       	rjmp	.+6      	; 0x2728 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    2722:	fc 01       	movw	r30, r24
    2724:	65 83       	std	Z+5, r22	; 0x05
    2726:	02 c0       	rjmp	.+4      	; 0x272c <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    2728:	fc 01       	movw	r30, r24
    272a:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    272c:	fc 01       	movw	r30, r24
    272e:	61 83       	std	Z+1, r22	; 0x01
    2730:	02 c0       	rjmp	.+4      	; 0x2736 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    2732:	fc 01       	movw	r30, r24
    2734:	62 83       	std	Z+2, r22	; 0x02
	}
}
    2736:	df 91       	pop	r29
    2738:	cf 91       	pop	r28
    273a:	08 95       	ret

0000273c <spi_master_init>:
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
}
    273c:	0f 93       	push	r16
    273e:	1f 93       	push	r17
    2740:	cf 93       	push	r28
    2742:	df 93       	push	r29
    2744:	ec 01       	movw	r28, r24
    2746:	8c 01       	movw	r16, r24
    2748:	c0 3c       	cpi	r28, 0xC0	; 192
    274a:	88 e0       	ldi	r24, 0x08	; 8
    274c:	d8 07       	cpc	r29, r24
    274e:	21 f4       	brne	.+8      	; 0x2758 <spi_master_init+0x1c>
    2750:	68 e0       	ldi	r22, 0x08	; 8
    2752:	83 e0       	ldi	r24, 0x03	; 3
    2754:	a4 df       	rcall	.-184    	; 0x269e <sysclk_enable_module>
    2756:	10 c0       	rjmp	.+32     	; 0x2778 <spi_master_init+0x3c>
    2758:	c0 3c       	cpi	r28, 0xC0	; 192
    275a:	89 e0       	ldi	r24, 0x09	; 9
    275c:	d8 07       	cpc	r29, r24
    275e:	21 f4       	brne	.+8      	; 0x2768 <spi_master_init+0x2c>
    2760:	68 e0       	ldi	r22, 0x08	; 8
    2762:	84 e0       	ldi	r24, 0x04	; 4
    2764:	9c df       	rcall	.-200    	; 0x269e <sysclk_enable_module>
    2766:	0e c0       	rjmp	.+28     	; 0x2784 <spi_master_init+0x48>
    2768:	c0 3c       	cpi	r28, 0xC0	; 192
    276a:	8a e0       	ldi	r24, 0x0A	; 10
    276c:	d8 07       	cpc	r29, r24
    276e:	21 f4       	brne	.+8      	; 0x2778 <spi_master_init+0x3c>
    2770:	68 e0       	ldi	r22, 0x08	; 8
    2772:	85 e0       	ldi	r24, 0x05	; 5
    2774:	94 df       	rcall	.-216    	; 0x269e <sysclk_enable_module>
    2776:	06 c0       	rjmp	.+12     	; 0x2784 <spi_master_init+0x48>
    2778:	00 3c       	cpi	r16, 0xC0	; 192
    277a:	1b 40       	sbci	r17, 0x0B	; 11
    277c:	19 f4       	brne	.+6      	; 0x2784 <spi_master_init+0x48>
    277e:	68 e0       	ldi	r22, 0x08	; 8
    2780:	86 e0       	ldi	r24, 0x06	; 6
    2782:	8d df       	rcall	.-230    	; 0x269e <sysclk_enable_module>
    2784:	88 81       	ld	r24, Y
    2786:	80 61       	ori	r24, 0x10	; 16
    2788:	88 83       	st	Y, r24
    278a:	df 91       	pop	r29
    278c:	cf 91       	pop	r28
    278e:	1f 91       	pop	r17
    2790:	0f 91       	pop	r16
    2792:	08 95       	ret

00002794 <spi_master_setup_device>:
    2794:	ff 92       	push	r15
    2796:	0f 93       	push	r16
    2798:	1f 93       	push	r17
    279a:	cf 93       	push	r28
    279c:	df 93       	push	r29
    279e:	ec 01       	movw	r28, r24
    27a0:	f4 2e       	mov	r15, r20
    27a2:	b9 01       	movw	r22, r18
    27a4:	a8 01       	movw	r20, r16
    27a6:	00 e8       	ldi	r16, 0x80	; 128
    27a8:	14 e8       	ldi	r17, 0x84	; 132
    27aa:	2e e1       	ldi	r18, 0x1E	; 30
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	5a d0       	rcall	.+180    	; 0x2864 <spi_xmega_set_baud_div>
    27b0:	88 23       	and	r24, r24
    27b2:	4c f0       	brlt	.+18     	; 0x27c6 <spi_master_setup_device+0x32>
    27b4:	88 81       	ld	r24, Y
    27b6:	9f 2d       	mov	r25, r15
    27b8:	99 0f       	add	r25, r25
    27ba:	99 0f       	add	r25, r25
    27bc:	9c 70       	andi	r25, 0x0C	; 12
    27be:	83 7f       	andi	r24, 0xF3	; 243
    27c0:	f9 2e       	mov	r15, r25
    27c2:	f8 2a       	or	r15, r24
    27c4:	f8 82       	st	Y, r15
    27c6:	df 91       	pop	r29
    27c8:	cf 91       	pop	r28
    27ca:	1f 91       	pop	r17
    27cc:	0f 91       	pop	r16
    27ce:	ff 90       	pop	r15
    27d0:	08 95       	ret

000027d2 <spi_select_device>:
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_low(device->id);
    27d2:	fb 01       	movw	r30, r22
    27d4:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    27d6:	e8 2f       	mov	r30, r24
    27d8:	e6 95       	lsr	r30
    27da:	e6 95       	lsr	r30
    27dc:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    27de:	40 e2       	ldi	r20, 0x20	; 32
    27e0:	e4 9f       	mul	r30, r20
    27e2:	f0 01       	movw	r30, r0
    27e4:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    27e6:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    27e8:	87 70       	andi	r24, 0x07	; 7
    27ea:	21 e0       	ldi	r18, 0x01	; 1
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	a9 01       	movw	r20, r18
    27f0:	02 c0       	rjmp	.+4      	; 0x27f6 <spi_select_device+0x24>
    27f2:	44 0f       	add	r20, r20
    27f4:	55 1f       	adc	r21, r21
    27f6:	8a 95       	dec	r24
    27f8:	e2 f7       	brpl	.-8      	; 0x27f2 <spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    27fa:	46 83       	std	Z+6, r20	; 0x06
    27fc:	08 95       	ret

000027fe <spi_deselect_device>:
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_high(device->id);
    27fe:	fb 01       	movw	r30, r22
    2800:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    2802:	e8 2f       	mov	r30, r24
    2804:	e6 95       	lsr	r30
    2806:	e6 95       	lsr	r30
    2808:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    280a:	40 e2       	ldi	r20, 0x20	; 32
    280c:	e4 9f       	mul	r30, r20
    280e:	f0 01       	movw	r30, r0
    2810:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    2812:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    2814:	87 70       	andi	r24, 0x07	; 7
    2816:	21 e0       	ldi	r18, 0x01	; 1
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	a9 01       	movw	r20, r18
    281c:	02 c0       	rjmp	.+4      	; 0x2822 <spi_deselect_device+0x24>
    281e:	44 0f       	add	r20, r20
    2820:	55 1f       	adc	r21, r21
    2822:	8a 95       	dec	r24
    2824:	e2 f7       	brpl	.-8      	; 0x281e <spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2826:	45 83       	std	Z+5, r20	; 0x05
    2828:	08 95       	ret

0000282a <board_init>:
    282a:	43 e0       	ldi	r20, 0x03	; 3
    282c:	50 e0       	ldi	r21, 0x00	; 0
    282e:	68 e0       	ldi	r22, 0x08	; 8
    2830:	80 ec       	ldi	r24, 0xC0	; 192
    2832:	97 e0       	ldi	r25, 0x07	; 7
    2834:	5b df       	rcall	.-330    	; 0x26ec <ioport_configure_port_pin>
    2836:	40 e0       	ldi	r20, 0x00	; 0
    2838:	58 e1       	ldi	r21, 0x18	; 24
    283a:	64 e0       	ldi	r22, 0x04	; 4
    283c:	80 ec       	ldi	r24, 0xC0	; 192
    283e:	97 e0       	ldi	r25, 0x07	; 7
    2840:	55 cf       	rjmp	.-342    	; 0x26ec <ioport_configure_port_pin>
    2842:	08 95       	ret

00002844 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    2844:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    2846:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    2848:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    284a:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    284c:	60 83       	st	Z, r22
	ret                             // Return to caller
    284e:	08 95       	ret

00002850 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    2850:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    2854:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    2856:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    2858:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    285c:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    285e:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    2862:	08 95       	ret

00002864 <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
    2864:	cf 92       	push	r12
    2866:	df 92       	push	r13
    2868:	ef 92       	push	r14
    286a:	ff 92       	push	r15
    286c:	0f 93       	push	r16
    286e:	1f 93       	push	r17
    2870:	cf 93       	push	r28
    2872:	df 93       	push	r29
    2874:	ec 01       	movw	r28, r24
    2876:	6a 01       	movw	r12, r20
    2878:	7b 01       	movw	r14, r22

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
    287a:	db 01       	movw	r26, r22
    287c:	ca 01       	movw	r24, r20
    287e:	01 97       	sbiw	r24, 0x01	; 1
    2880:	a1 09       	sbc	r26, r1
    2882:	b1 09       	sbc	r27, r1
    2884:	bc 01       	movw	r22, r24
    2886:	cd 01       	movw	r24, r26
    2888:	60 0f       	add	r22, r16
    288a:	71 1f       	adc	r23, r17
    288c:	82 1f       	adc	r24, r18
    288e:	93 1f       	adc	r25, r19
    2890:	a7 01       	movw	r20, r14
    2892:	96 01       	movw	r18, r12
    2894:	d8 d0       	rcall	.+432    	; 0x2a46 <__udivmodsi4>

	if (divisor > 128) {
    2896:	21 38       	cpi	r18, 0x81	; 129
    2898:	31 05       	cpc	r19, r1
    289a:	41 05       	cpc	r20, r1
    289c:	51 05       	cpc	r21, r1
    289e:	f8 f4       	brcc	.+62     	; 0x28de <spi_xmega_set_baud_div+0x7a>

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
    28a0:	21 34       	cpi	r18, 0x41	; 65
    28a2:	60 f4       	brcc	.+24     	; 0x28bc <spi_xmega_set_baud_div+0x58>
		ctrl = SPI_PRESCALER_DIV128_gc;
	}
	else if (divisor_8bit > 32) {
    28a4:	21 32       	cpi	r18, 0x21	; 33
    28a6:	60 f4       	brcc	.+24     	; 0x28c0 <spi_xmega_set_baud_div+0x5c>
		ctrl = SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 16) {
    28a8:	21 31       	cpi	r18, 0x11	; 17
    28aa:	60 f4       	brcc	.+24     	; 0x28c4 <spi_xmega_set_baud_div+0x60>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 8) {
    28ac:	29 30       	cpi	r18, 0x09	; 9
    28ae:	60 f4       	brcc	.+24     	; 0x28c8 <spi_xmega_set_baud_div+0x64>
		ctrl = SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 4) {
    28b0:	25 30       	cpi	r18, 0x05	; 5
    28b2:	60 f4       	brcc	.+24     	; 0x28cc <spi_xmega_set_baud_div+0x68>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 2) {
    28b4:	23 30       	cpi	r18, 0x03	; 3
    28b6:	60 f0       	brcs	.+24     	; 0x28d0 <spi_xmega_set_baud_div+0x6c>
		ctrl = SPI_PRESCALER_DIV4_gc;
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	0b c0       	rjmp	.+22     	; 0x28d2 <spi_xmega_set_baud_div+0x6e>
	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
		ctrl = SPI_PRESCALER_DIV128_gc;
    28bc:	93 e0       	ldi	r25, 0x03	; 3
    28be:	09 c0       	rjmp	.+18     	; 0x28d2 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 32) {
		ctrl = SPI_PRESCALER_DIV64_gc;
    28c0:	92 e0       	ldi	r25, 0x02	; 2
    28c2:	07 c0       	rjmp	.+14     	; 0x28d2 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 16) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
    28c4:	92 e8       	ldi	r25, 0x82	; 130
    28c6:	05 c0       	rjmp	.+10     	; 0x28d2 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 8) {
		ctrl = SPI_PRESCALER_DIV16_gc;
    28c8:	91 e0       	ldi	r25, 0x01	; 1
    28ca:	03 c0       	rjmp	.+6      	; 0x28d2 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 4) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
    28cc:	91 e8       	ldi	r25, 0x81	; 129
    28ce:	01 c0       	rjmp	.+2      	; 0x28d2 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 2) {
		ctrl = SPI_PRESCALER_DIV4_gc;
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    28d0:	90 e8       	ldi	r25, 0x80	; 128
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
    28d2:	88 81       	ld	r24, Y
    28d4:	8c 77       	andi	r24, 0x7C	; 124
    28d6:	89 2b       	or	r24, r25
    28d8:	88 83       	st	Y, r24

	return 1;
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	01 c0       	rjmp	.+2      	; 0x28e0 <spi_xmega_set_baud_div+0x7c>
	if (divisor > 128) {
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
    28de:	8f ef       	ldi	r24, 0xFF	; 255

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;

	return 1;
}
    28e0:	df 91       	pop	r29
    28e2:	cf 91       	pop	r28
    28e4:	1f 91       	pop	r17
    28e6:	0f 91       	pop	r16
    28e8:	ff 90       	pop	r15
    28ea:	ef 90       	pop	r14
    28ec:	df 90       	pop	r13
    28ee:	cf 90       	pop	r12
    28f0:	08 95       	ret

000028f2 <alarm1>:
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    28f2:	88 e0       	ldi	r24, 0x08	; 8
    28f4:	e0 ec       	ldi	r30, 0xC0	; 192
    28f6:	f7 e0       	ldi	r31, 0x07	; 7
    28f8:	86 83       	std	Z+6, r24	; 0x06
    28fa:	8a e6       	ldi	r24, 0x6A	; 106
    28fc:	94 e0       	ldi	r25, 0x04	; 4
    28fe:	a1 e0       	ldi	r26, 0x01	; 1
    2900:	b0 e0       	ldi	r27, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    2902:	01 97       	sbiw	r24, 0x01	; 1
    2904:	a1 09       	sbc	r26, r1
    2906:	b1 09       	sbc	r27, r1
    2908:	00 97       	sbiw	r24, 0x00	; 0
    290a:	a1 05       	cpc	r26, r1
    290c:	b1 05       	cpc	r27, r1
    290e:	c9 f7       	brne	.-14     	; 0x2902 <alarm1+0x10>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2910:	88 e0       	ldi	r24, 0x08	; 8
    2912:	e0 ec       	ldi	r30, 0xC0	; 192
    2914:	f7 e0       	ldi	r31, 0x07	; 7
    2916:	85 83       	std	Z+5, r24	; 0x05
    2918:	08 95       	ret

0000291a <alarm2>:
	ioport_set_pin_level(LED_0_PIN,LED_0_INACTIVE);

}

//TODO: Remove, for testing alarm functionality
static void alarm2(uint32_t time) {
    291a:	2a e0       	ldi	r18, 0x0A	; 10
    291c:	30 e0       	ldi	r19, 0x00	; 0

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    291e:	e0 ec       	ldi	r30, 0xC0	; 192
    2920:	f7 e0       	ldi	r31, 0x07	; 7
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2922:	48 e0       	ldi	r20, 0x08	; 8

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    2924:	80 85       	ldd	r24, Z+8	; 0x08
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
    2926:	83 fd       	sbrc	r24, 3
    2928:	02 c0       	rjmp	.+4      	; 0x292e <alarm2+0x14>
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    292a:	45 83       	std	Z+5, r20	; 0x05
    292c:	01 c0       	rjmp	.+2      	; 0x2930 <alarm2+0x16>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    292e:	46 83       	std	Z+6, r20	; 0x06
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	01 96       	adiw	r24, 0x01	; 1
    2936:	8a 31       	cpi	r24, 0x1A	; 26
    2938:	51 e4       	ldi	r21, 0x41	; 65
    293a:	95 07       	cpc	r25, r21
    293c:	d9 f7       	brne	.-10     	; 0x2934 <alarm2+0x1a>
    293e:	21 50       	subi	r18, 0x01	; 1
    2940:	31 09       	sbc	r19, r1
	int i;
	
	// LED FAST BURST
	for (i=0; i<10; i++) {
    2942:	21 15       	cp	r18, r1
    2944:	31 05       	cpc	r19, r1
    2946:	71 f7       	brne	.-36     	; 0x2924 <alarm2+0xa>
		ioport_set_pin_level(LED_0_PIN,!ioport_get_pin_level(LED_0_PIN));
		delay_ms(50);
	}
	//ioport_set_pin_level(LED_0_PIN,LED_0_INACTIVE);
}
    2948:	08 95       	ret

0000294a <alarm3>:

//TODO: Remove, for testing alarm functionality
static void alarm3(uint32_t time) {
    294a:	25 e0       	ldi	r18, 0x05	; 5
    294c:	30 e0       	ldi	r19, 0x00	; 0

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    294e:	e0 ec       	ldi	r30, 0xC0	; 192
    2950:	f7 e0       	ldi	r31, 0x07	; 7
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2952:	48 e0       	ldi	r20, 0x08	; 8

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    2954:	80 85       	ldd	r24, Z+8	; 0x08
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
    2956:	83 fd       	sbrc	r24, 3
    2958:	02 c0       	rjmp	.+4      	; 0x295e <alarm3+0x14>
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    295a:	45 83       	std	Z+5, r20	; 0x05
    295c:	01 c0       	rjmp	.+2      	; 0x2960 <alarm3+0x16>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    295e:	46 83       	std	Z+6, r20	; 0x06
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	01 96       	adiw	r24, 0x01	; 1
    2966:	80 35       	cpi	r24, 0x50	; 80
    2968:	53 ec       	ldi	r21, 0xC3	; 195
    296a:	95 07       	cpc	r25, r21
    296c:	d9 f7       	brne	.-10     	; 0x2964 <alarm3+0x1a>
    296e:	21 50       	subi	r18, 0x01	; 1
    2970:	31 09       	sbc	r19, r1
	int i;
	
	// LED SLOW BURST
	for (i=0; i<5; i++) {
    2972:	21 15       	cp	r18, r1
    2974:	31 05       	cpc	r19, r1
    2976:	71 f7       	brne	.-36     	; 0x2954 <alarm3+0xa>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2978:	88 e0       	ldi	r24, 0x08	; 8
    297a:	e0 ec       	ldi	r30, 0xC0	; 192
    297c:	f7 e0       	ldi	r31, 0x07	; 7
    297e:	85 83       	std	Z+5, r24	; 0x05
    2980:	08 95       	ret

00002982 <main>:
}

int main (void)
{
	//board-specific
	board_init();
    2982:	53 df       	rcall	.-346    	; 0x282a <board_init>
	ioport_init();
	ssd1306_init();
    2984:	eb dd       	rcall	.-1066   	; 0x255c <ssd1306_init>
	
	//USB cdc
	irq_initialize_vectors();
    2986:	87 e0       	ldi	r24, 0x07	; 7
    2988:	e0 ea       	ldi	r30, 0xA0	; 160
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	82 83       	std	Z+2, r24	; 0x02
	// cpu_irq_enable();	/* taken care of in init_vrtc below */
	
	//v2x power sequencing
	init_power_seq();
    298e:	1b db       	rcall	.-2506   	; 0x1fc6 <init_power_seq>
	
	//v2x real time clock
	init_vrtc();
    2990:	41 db       	rcall	.-2430   	; 0x2014 <init_vrtc>
	board_init();
#else
	system_init();
#endif
*/ //end kevinC
	ui_init();
    2992:	0e 94 2c 01 	call	0x258	; 0x258 <ui_init>
	ui_powerdown();
    2996:	0e 94 2d 01 	call	0x25a	; 0x25a <ui_powerdown>
	// Start USB stack to authorize VBus monitoring
	udc_start();
    299a:	0e 94 75 05 	call	0xaea	; 0xaea <udc_start>
	
	*************/
	
	//currently every  high_counter=.5t
	uint32_t test_time = 1448436421;
	setEpochTime(test_time);
    299e:	65 ec       	ldi	r22, 0xC5	; 197
    29a0:	72 e6       	ldi	r23, 0x62	; 98
    29a2:	85 e5       	ldi	r24, 0x55	; 85
    29a4:	96 e5       	ldi	r25, 0x56	; 86
    29a6:	53 db       	rcall	.-2394   	; 0x204e <setEpochTime>
	addAlarm(test_time+2, alarm1);	// blink
    29a8:	49 e7       	ldi	r20, 0x79	; 121
    29aa:	54 e1       	ldi	r21, 0x14	; 20
    29ac:	67 ec       	ldi	r22, 0xC7	; 199
    29ae:	72 e6       	ldi	r23, 0x62	; 98
    29b0:	85 e5       	ldi	r24, 0x55	; 85
    29b2:	96 e5       	ldi	r25, 0x56	; 86
    29b4:	29 dc       	rcall	.-1966   	; 0x2208 <addAlarm>
	addAlarm(test_time+4, alarm2);	// fast burst
    29b6:	4d e8       	ldi	r20, 0x8D	; 141
    29b8:	54 e1       	ldi	r21, 0x14	; 20
    29ba:	69 ec       	ldi	r22, 0xC9	; 201
    29bc:	72 e6       	ldi	r23, 0x62	; 98
    29be:	85 e5       	ldi	r24, 0x55	; 85
    29c0:	96 e5       	ldi	r25, 0x56	; 86
    29c2:	22 dc       	rcall	.-1980   	; 0x2208 <addAlarm>
	addAlarm(test_time+5, alarm3);	// slow burst
    29c4:	45 ea       	ldi	r20, 0xA5	; 165
    29c6:	54 e1       	ldi	r21, 0x14	; 20
    29c8:	6a ec       	ldi	r22, 0xCA	; 202
    29ca:	72 e6       	ldi	r23, 0x62	; 98
    29cc:	85 e5       	ldi	r24, 0x55	; 85
    29ce:	96 e5       	ldi	r25, 0x56	; 86
    29d0:	1b dc       	rcall	.-1994   	; 0x2208 <addAlarm>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    29d2:	c1 e0       	ldi	r28, 0x01	; 1
    29d4:	d3 e2       	ldi	r29, 0x23	; 35
    29d6:	82 e0       	ldi	r24, 0x02	; 2
    29d8:	93 e2       	ldi	r25, 0x23	; 35
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    29da:	a8 e4       	ldi	r26, 0x48	; 72
    29dc:	b0 e0       	ldi	r27, 0x00	; 0
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    29de:	f8 94       	cli

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    29e0:	28 81       	ld	r18, Y
    29e2:	21 11       	cpse	r18, r1
    29e4:	07 c0       	rjmp	.+14     	; 0x29f4 <main+0x72>
    29e6:	fc 01       	movw	r30, r24
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    29e8:	2f 5f       	subi	r18, 0xFF	; 255

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    29ea:	31 91       	ld	r19, Z+
    29ec:	33 23       	and	r19, r19
    29ee:	e1 f3       	breq	.-8      	; 0x29e8 <main+0x66>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    29f0:	21 11       	cpse	r18, r1
    29f2:	02 c0       	rjmp	.+4      	; 0x29f8 <main+0x76>
		cpu_irq_enable();
    29f4:	78 94       	sei
    29f6:	f3 cf       	rjmp	.-26     	; 0x29de <main+0x5c>
    29f8:	3c 91       	ld	r19, X

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    29fa:	e2 2f       	mov	r30, r18
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	eb 5f       	subi	r30, 0xFB	; 251
    2a00:	ff 4d       	sbci	r31, 0xDF	; 223
    2a02:	23 2f       	mov	r18, r19
    2a04:	21 7f       	andi	r18, 0xF1	; 241
    2a06:	30 81       	ld	r19, Z
    2a08:	23 2b       	or	r18, r19
    2a0a:	2c 93       	st	X, r18
	sleep_enable();
    2a0c:	2c 91       	ld	r18, X
    2a0e:	21 60       	ori	r18, 0x01	; 1
    2a10:	2c 93       	st	X, r18

	cpu_irq_enable();
    2a12:	78 94       	sei
	sleep_enter();
    2a14:	88 95       	sleep

	sleep_disable();
    2a16:	2c 91       	ld	r18, X
    2a18:	2e 7f       	andi	r18, 0xFE	; 254
    2a1a:	2c 93       	st	X, r18
    2a1c:	e0 cf       	rjmp	.-64     	; 0x29de <main+0x5c>

00002a1e <__udivmodhi4>:
    2a1e:	aa 1b       	sub	r26, r26
    2a20:	bb 1b       	sub	r27, r27
    2a22:	51 e1       	ldi	r21, 0x11	; 17
    2a24:	07 c0       	rjmp	.+14     	; 0x2a34 <__udivmodhi4_ep>

00002a26 <__udivmodhi4_loop>:
    2a26:	aa 1f       	adc	r26, r26
    2a28:	bb 1f       	adc	r27, r27
    2a2a:	a6 17       	cp	r26, r22
    2a2c:	b7 07       	cpc	r27, r23
    2a2e:	10 f0       	brcs	.+4      	; 0x2a34 <__udivmodhi4_ep>
    2a30:	a6 1b       	sub	r26, r22
    2a32:	b7 0b       	sbc	r27, r23

00002a34 <__udivmodhi4_ep>:
    2a34:	88 1f       	adc	r24, r24
    2a36:	99 1f       	adc	r25, r25
    2a38:	5a 95       	dec	r21
    2a3a:	a9 f7       	brne	.-22     	; 0x2a26 <__udivmodhi4_loop>
    2a3c:	80 95       	com	r24
    2a3e:	90 95       	com	r25
    2a40:	bc 01       	movw	r22, r24
    2a42:	cd 01       	movw	r24, r26
    2a44:	08 95       	ret

00002a46 <__udivmodsi4>:
    2a46:	a1 e2       	ldi	r26, 0x21	; 33
    2a48:	1a 2e       	mov	r1, r26
    2a4a:	aa 1b       	sub	r26, r26
    2a4c:	bb 1b       	sub	r27, r27
    2a4e:	fd 01       	movw	r30, r26
    2a50:	0d c0       	rjmp	.+26     	; 0x2a6c <__udivmodsi4_ep>

00002a52 <__udivmodsi4_loop>:
    2a52:	aa 1f       	adc	r26, r26
    2a54:	bb 1f       	adc	r27, r27
    2a56:	ee 1f       	adc	r30, r30
    2a58:	ff 1f       	adc	r31, r31
    2a5a:	a2 17       	cp	r26, r18
    2a5c:	b3 07       	cpc	r27, r19
    2a5e:	e4 07       	cpc	r30, r20
    2a60:	f5 07       	cpc	r31, r21
    2a62:	20 f0       	brcs	.+8      	; 0x2a6c <__udivmodsi4_ep>
    2a64:	a2 1b       	sub	r26, r18
    2a66:	b3 0b       	sbc	r27, r19
    2a68:	e4 0b       	sbc	r30, r20
    2a6a:	f5 0b       	sbc	r31, r21

00002a6c <__udivmodsi4_ep>:
    2a6c:	66 1f       	adc	r22, r22
    2a6e:	77 1f       	adc	r23, r23
    2a70:	88 1f       	adc	r24, r24
    2a72:	99 1f       	adc	r25, r25
    2a74:	1a 94       	dec	r1
    2a76:	69 f7       	brne	.-38     	; 0x2a52 <__udivmodsi4_loop>
    2a78:	60 95       	com	r22
    2a7a:	70 95       	com	r23
    2a7c:	80 95       	com	r24
    2a7e:	90 95       	com	r25
    2a80:	9b 01       	movw	r18, r22
    2a82:	ac 01       	movw	r20, r24
    2a84:	bd 01       	movw	r22, r26
    2a86:	cf 01       	movw	r24, r30
    2a88:	08 95       	ret

00002a8a <__tablejump2__>:
    2a8a:	ee 0f       	add	r30, r30
    2a8c:	ff 1f       	adc	r31, r31

00002a8e <__tablejump__>:
    2a8e:	05 90       	lpm	r0, Z+
    2a90:	f4 91       	lpm	r31, Z
    2a92:	e0 2d       	mov	r30, r0
    2a94:	19 94       	eijmp

00002a96 <malloc>:
    2a96:	cf 93       	push	r28
    2a98:	df 93       	push	r29
    2a9a:	82 30       	cpi	r24, 0x02	; 2
    2a9c:	91 05       	cpc	r25, r1
    2a9e:	10 f4       	brcc	.+4      	; 0x2aa4 <malloc+0xe>
    2aa0:	82 e0       	ldi	r24, 0x02	; 2
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	e0 91 27 23 	lds	r30, 0x2327
    2aa8:	f0 91 28 23 	lds	r31, 0x2328
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	a0 e0       	ldi	r26, 0x00	; 0
    2ab2:	b0 e0       	ldi	r27, 0x00	; 0
    2ab4:	30 97       	sbiw	r30, 0x00	; 0
    2ab6:	39 f1       	breq	.+78     	; 0x2b06 <malloc+0x70>
    2ab8:	40 81       	ld	r20, Z
    2aba:	51 81       	ldd	r21, Z+1	; 0x01
    2abc:	48 17       	cp	r20, r24
    2abe:	59 07       	cpc	r21, r25
    2ac0:	b8 f0       	brcs	.+46     	; 0x2af0 <malloc+0x5a>
    2ac2:	48 17       	cp	r20, r24
    2ac4:	59 07       	cpc	r21, r25
    2ac6:	71 f4       	brne	.+28     	; 0x2ae4 <malloc+0x4e>
    2ac8:	82 81       	ldd	r24, Z+2	; 0x02
    2aca:	93 81       	ldd	r25, Z+3	; 0x03
    2acc:	10 97       	sbiw	r26, 0x00	; 0
    2ace:	29 f0       	breq	.+10     	; 0x2ada <malloc+0x44>
    2ad0:	12 96       	adiw	r26, 0x02	; 2
    2ad2:	8d 93       	st	X+, r24
    2ad4:	9c 93       	st	X, r25
    2ad6:	13 97       	sbiw	r26, 0x03	; 3
    2ad8:	2c c0       	rjmp	.+88     	; 0x2b32 <malloc+0x9c>
    2ada:	80 93 27 23 	sts	0x2327, r24
    2ade:	90 93 28 23 	sts	0x2328, r25
    2ae2:	27 c0       	rjmp	.+78     	; 0x2b32 <malloc+0x9c>
    2ae4:	21 15       	cp	r18, r1
    2ae6:	31 05       	cpc	r19, r1
    2ae8:	31 f0       	breq	.+12     	; 0x2af6 <malloc+0x60>
    2aea:	42 17       	cp	r20, r18
    2aec:	53 07       	cpc	r21, r19
    2aee:	18 f0       	brcs	.+6      	; 0x2af6 <malloc+0x60>
    2af0:	a9 01       	movw	r20, r18
    2af2:	db 01       	movw	r26, r22
    2af4:	01 c0       	rjmp	.+2      	; 0x2af8 <malloc+0x62>
    2af6:	ef 01       	movw	r28, r30
    2af8:	9a 01       	movw	r18, r20
    2afa:	bd 01       	movw	r22, r26
    2afc:	df 01       	movw	r26, r30
    2afe:	02 80       	ldd	r0, Z+2	; 0x02
    2b00:	f3 81       	ldd	r31, Z+3	; 0x03
    2b02:	e0 2d       	mov	r30, r0
    2b04:	d7 cf       	rjmp	.-82     	; 0x2ab4 <malloc+0x1e>
    2b06:	21 15       	cp	r18, r1
    2b08:	31 05       	cpc	r19, r1
    2b0a:	f9 f0       	breq	.+62     	; 0x2b4a <malloc+0xb4>
    2b0c:	28 1b       	sub	r18, r24
    2b0e:	39 0b       	sbc	r19, r25
    2b10:	24 30       	cpi	r18, 0x04	; 4
    2b12:	31 05       	cpc	r19, r1
    2b14:	80 f4       	brcc	.+32     	; 0x2b36 <malloc+0xa0>
    2b16:	8a 81       	ldd	r24, Y+2	; 0x02
    2b18:	9b 81       	ldd	r25, Y+3	; 0x03
    2b1a:	61 15       	cp	r22, r1
    2b1c:	71 05       	cpc	r23, r1
    2b1e:	21 f0       	breq	.+8      	; 0x2b28 <malloc+0x92>
    2b20:	fb 01       	movw	r30, r22
    2b22:	82 83       	std	Z+2, r24	; 0x02
    2b24:	93 83       	std	Z+3, r25	; 0x03
    2b26:	04 c0       	rjmp	.+8      	; 0x2b30 <malloc+0x9a>
    2b28:	80 93 27 23 	sts	0x2327, r24
    2b2c:	90 93 28 23 	sts	0x2328, r25
    2b30:	fe 01       	movw	r30, r28
    2b32:	32 96       	adiw	r30, 0x02	; 2
    2b34:	44 c0       	rjmp	.+136    	; 0x2bbe <malloc+0x128>
    2b36:	fe 01       	movw	r30, r28
    2b38:	e2 0f       	add	r30, r18
    2b3a:	f3 1f       	adc	r31, r19
    2b3c:	81 93       	st	Z+, r24
    2b3e:	91 93       	st	Z+, r25
    2b40:	22 50       	subi	r18, 0x02	; 2
    2b42:	31 09       	sbc	r19, r1
    2b44:	28 83       	st	Y, r18
    2b46:	39 83       	std	Y+1, r19	; 0x01
    2b48:	3a c0       	rjmp	.+116    	; 0x2bbe <malloc+0x128>
    2b4a:	20 91 25 23 	lds	r18, 0x2325
    2b4e:	30 91 26 23 	lds	r19, 0x2326
    2b52:	23 2b       	or	r18, r19
    2b54:	41 f4       	brne	.+16     	; 0x2b66 <malloc+0xd0>
    2b56:	20 91 02 20 	lds	r18, 0x2002
    2b5a:	30 91 03 20 	lds	r19, 0x2003
    2b5e:	20 93 25 23 	sts	0x2325, r18
    2b62:	30 93 26 23 	sts	0x2326, r19
    2b66:	20 91 00 20 	lds	r18, 0x2000
    2b6a:	30 91 01 20 	lds	r19, 0x2001
    2b6e:	21 15       	cp	r18, r1
    2b70:	31 05       	cpc	r19, r1
    2b72:	41 f4       	brne	.+16     	; 0x2b84 <malloc+0xee>
    2b74:	2d b7       	in	r18, 0x3d	; 61
    2b76:	3e b7       	in	r19, 0x3e	; 62
    2b78:	40 91 04 20 	lds	r20, 0x2004
    2b7c:	50 91 05 20 	lds	r21, 0x2005
    2b80:	24 1b       	sub	r18, r20
    2b82:	35 0b       	sbc	r19, r21
    2b84:	e0 91 25 23 	lds	r30, 0x2325
    2b88:	f0 91 26 23 	lds	r31, 0x2326
    2b8c:	e2 17       	cp	r30, r18
    2b8e:	f3 07       	cpc	r31, r19
    2b90:	a0 f4       	brcc	.+40     	; 0x2bba <malloc+0x124>
    2b92:	2e 1b       	sub	r18, r30
    2b94:	3f 0b       	sbc	r19, r31
    2b96:	28 17       	cp	r18, r24
    2b98:	39 07       	cpc	r19, r25
    2b9a:	78 f0       	brcs	.+30     	; 0x2bba <malloc+0x124>
    2b9c:	ac 01       	movw	r20, r24
    2b9e:	4e 5f       	subi	r20, 0xFE	; 254
    2ba0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ba2:	24 17       	cp	r18, r20
    2ba4:	35 07       	cpc	r19, r21
    2ba6:	48 f0       	brcs	.+18     	; 0x2bba <malloc+0x124>
    2ba8:	4e 0f       	add	r20, r30
    2baa:	5f 1f       	adc	r21, r31
    2bac:	40 93 25 23 	sts	0x2325, r20
    2bb0:	50 93 26 23 	sts	0x2326, r21
    2bb4:	81 93       	st	Z+, r24
    2bb6:	91 93       	st	Z+, r25
    2bb8:	02 c0       	rjmp	.+4      	; 0x2bbe <malloc+0x128>
    2bba:	e0 e0       	ldi	r30, 0x00	; 0
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	cf 01       	movw	r24, r30
    2bc0:	df 91       	pop	r29
    2bc2:	cf 91       	pop	r28
    2bc4:	08 95       	ret

00002bc6 <free>:
    2bc6:	cf 93       	push	r28
    2bc8:	df 93       	push	r29
    2bca:	00 97       	sbiw	r24, 0x00	; 0
    2bcc:	09 f4       	brne	.+2      	; 0x2bd0 <free+0xa>
    2bce:	87 c0       	rjmp	.+270    	; 0x2cde <free+0x118>
    2bd0:	fc 01       	movw	r30, r24
    2bd2:	32 97       	sbiw	r30, 0x02	; 2
    2bd4:	12 82       	std	Z+2, r1	; 0x02
    2bd6:	13 82       	std	Z+3, r1	; 0x03
    2bd8:	c0 91 27 23 	lds	r28, 0x2327
    2bdc:	d0 91 28 23 	lds	r29, 0x2328
    2be0:	20 97       	sbiw	r28, 0x00	; 0
    2be2:	81 f4       	brne	.+32     	; 0x2c04 <free+0x3e>
    2be4:	20 81       	ld	r18, Z
    2be6:	31 81       	ldd	r19, Z+1	; 0x01
    2be8:	28 0f       	add	r18, r24
    2bea:	39 1f       	adc	r19, r25
    2bec:	80 91 25 23 	lds	r24, 0x2325
    2bf0:	90 91 26 23 	lds	r25, 0x2326
    2bf4:	82 17       	cp	r24, r18
    2bf6:	93 07       	cpc	r25, r19
    2bf8:	79 f5       	brne	.+94     	; 0x2c58 <free+0x92>
    2bfa:	e0 93 25 23 	sts	0x2325, r30
    2bfe:	f0 93 26 23 	sts	0x2326, r31
    2c02:	6d c0       	rjmp	.+218    	; 0x2cde <free+0x118>
    2c04:	de 01       	movw	r26, r28
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	ae 17       	cp	r26, r30
    2c0c:	bf 07       	cpc	r27, r31
    2c0e:	50 f4       	brcc	.+20     	; 0x2c24 <free+0x5e>
    2c10:	12 96       	adiw	r26, 0x02	; 2
    2c12:	4d 91       	ld	r20, X+
    2c14:	5c 91       	ld	r21, X
    2c16:	13 97       	sbiw	r26, 0x03	; 3
    2c18:	9d 01       	movw	r18, r26
    2c1a:	41 15       	cp	r20, r1
    2c1c:	51 05       	cpc	r21, r1
    2c1e:	09 f1       	breq	.+66     	; 0x2c62 <free+0x9c>
    2c20:	da 01       	movw	r26, r20
    2c22:	f3 cf       	rjmp	.-26     	; 0x2c0a <free+0x44>
    2c24:	a2 83       	std	Z+2, r26	; 0x02
    2c26:	b3 83       	std	Z+3, r27	; 0x03
    2c28:	40 81       	ld	r20, Z
    2c2a:	51 81       	ldd	r21, Z+1	; 0x01
    2c2c:	84 0f       	add	r24, r20
    2c2e:	95 1f       	adc	r25, r21
    2c30:	8a 17       	cp	r24, r26
    2c32:	9b 07       	cpc	r25, r27
    2c34:	71 f4       	brne	.+28     	; 0x2c52 <free+0x8c>
    2c36:	8d 91       	ld	r24, X+
    2c38:	9c 91       	ld	r25, X
    2c3a:	11 97       	sbiw	r26, 0x01	; 1
    2c3c:	84 0f       	add	r24, r20
    2c3e:	95 1f       	adc	r25, r21
    2c40:	02 96       	adiw	r24, 0x02	; 2
    2c42:	80 83       	st	Z, r24
    2c44:	91 83       	std	Z+1, r25	; 0x01
    2c46:	12 96       	adiw	r26, 0x02	; 2
    2c48:	8d 91       	ld	r24, X+
    2c4a:	9c 91       	ld	r25, X
    2c4c:	13 97       	sbiw	r26, 0x03	; 3
    2c4e:	82 83       	std	Z+2, r24	; 0x02
    2c50:	93 83       	std	Z+3, r25	; 0x03
    2c52:	21 15       	cp	r18, r1
    2c54:	31 05       	cpc	r19, r1
    2c56:	29 f4       	brne	.+10     	; 0x2c62 <free+0x9c>
    2c58:	e0 93 27 23 	sts	0x2327, r30
    2c5c:	f0 93 28 23 	sts	0x2328, r31
    2c60:	3e c0       	rjmp	.+124    	; 0x2cde <free+0x118>
    2c62:	d9 01       	movw	r26, r18
    2c64:	12 96       	adiw	r26, 0x02	; 2
    2c66:	ed 93       	st	X+, r30
    2c68:	fc 93       	st	X, r31
    2c6a:	13 97       	sbiw	r26, 0x03	; 3
    2c6c:	4d 91       	ld	r20, X+
    2c6e:	5d 91       	ld	r21, X+
    2c70:	a4 0f       	add	r26, r20
    2c72:	b5 1f       	adc	r27, r21
    2c74:	ea 17       	cp	r30, r26
    2c76:	fb 07       	cpc	r31, r27
    2c78:	79 f4       	brne	.+30     	; 0x2c98 <free+0xd2>
    2c7a:	80 81       	ld	r24, Z
    2c7c:	91 81       	ldd	r25, Z+1	; 0x01
    2c7e:	84 0f       	add	r24, r20
    2c80:	95 1f       	adc	r25, r21
    2c82:	02 96       	adiw	r24, 0x02	; 2
    2c84:	d9 01       	movw	r26, r18
    2c86:	8d 93       	st	X+, r24
    2c88:	9c 93       	st	X, r25
    2c8a:	11 97       	sbiw	r26, 0x01	; 1
    2c8c:	82 81       	ldd	r24, Z+2	; 0x02
    2c8e:	93 81       	ldd	r25, Z+3	; 0x03
    2c90:	12 96       	adiw	r26, 0x02	; 2
    2c92:	8d 93       	st	X+, r24
    2c94:	9c 93       	st	X, r25
    2c96:	13 97       	sbiw	r26, 0x03	; 3
    2c98:	e0 e0       	ldi	r30, 0x00	; 0
    2c9a:	f0 e0       	ldi	r31, 0x00	; 0
    2c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9e:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca0:	00 97       	sbiw	r24, 0x00	; 0
    2ca2:	19 f0       	breq	.+6      	; 0x2caa <free+0xe4>
    2ca4:	fe 01       	movw	r30, r28
    2ca6:	ec 01       	movw	r28, r24
    2ca8:	f9 cf       	rjmp	.-14     	; 0x2c9c <free+0xd6>
    2caa:	ce 01       	movw	r24, r28
    2cac:	02 96       	adiw	r24, 0x02	; 2
    2cae:	28 81       	ld	r18, Y
    2cb0:	39 81       	ldd	r19, Y+1	; 0x01
    2cb2:	82 0f       	add	r24, r18
    2cb4:	93 1f       	adc	r25, r19
    2cb6:	20 91 25 23 	lds	r18, 0x2325
    2cba:	30 91 26 23 	lds	r19, 0x2326
    2cbe:	28 17       	cp	r18, r24
    2cc0:	39 07       	cpc	r19, r25
    2cc2:	69 f4       	brne	.+26     	; 0x2cde <free+0x118>
    2cc4:	30 97       	sbiw	r30, 0x00	; 0
    2cc6:	29 f4       	brne	.+10     	; 0x2cd2 <free+0x10c>
    2cc8:	10 92 27 23 	sts	0x2327, r1
    2ccc:	10 92 28 23 	sts	0x2328, r1
    2cd0:	02 c0       	rjmp	.+4      	; 0x2cd6 <free+0x110>
    2cd2:	12 82       	std	Z+2, r1	; 0x02
    2cd4:	13 82       	std	Z+3, r1	; 0x03
    2cd6:	c0 93 25 23 	sts	0x2325, r28
    2cda:	d0 93 26 23 	sts	0x2326, r29
    2cde:	df 91       	pop	r29
    2ce0:	cf 91       	pop	r28
    2ce2:	08 95       	ret

00002ce4 <memcpy>:
    2ce4:	fb 01       	movw	r30, r22
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	02 c0       	rjmp	.+4      	; 0x2cee <memcpy+0xa>
    2cea:	01 90       	ld	r0, Z+
    2cec:	0d 92       	st	X+, r0
    2cee:	41 50       	subi	r20, 0x01	; 1
    2cf0:	50 40       	sbci	r21, 0x00	; 0
    2cf2:	d8 f7       	brcc	.-10     	; 0x2cea <memcpy+0x6>
    2cf4:	08 95       	ret

00002cf6 <_exit>:
    2cf6:	f8 94       	cli

00002cf8 <__stop_program>:
    2cf8:	ff cf       	rjmp	.-2      	; 0x2cf8 <__stop_program>

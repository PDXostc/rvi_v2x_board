
JLR_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c2  00802000  00002f2c  00002fc0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000006a8  008020c2  008020c2  00003082  2**4
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003082  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000006a0  00000000  00000000  000030b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000b874  00000000  00000000  00003758  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002af3  00000000  00000000  0000efcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000a3af  00000000  00000000  00011abf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000010d0  00000000  00000000  0001be70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00036cfd  00000000  00000000  0001cf40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000416f  00000000  00000000  00053c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000680  00000000  00000000  00057db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000daec  00000000  00000000  00058430  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	28 c1       	rjmp	.+592    	; 0x256 <__bad_interrupt>
       6:	00 00       	nop
       8:	26 c1       	rjmp	.+588    	; 0x256 <__bad_interrupt>
       a:	00 00       	nop
       c:	24 c1       	rjmp	.+584    	; 0x256 <__bad_interrupt>
       e:	00 00       	nop
      10:	22 c1       	rjmp	.+580    	; 0x256 <__bad_interrupt>
      12:	00 00       	nop
      14:	20 c1       	rjmp	.+576    	; 0x256 <__bad_interrupt>
      16:	00 00       	nop
      18:	1e c1       	rjmp	.+572    	; 0x256 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1c c1       	rjmp	.+568    	; 0x256 <__bad_interrupt>
      1e:	00 00       	nop
      20:	1a c1       	rjmp	.+564    	; 0x256 <__bad_interrupt>
      22:	00 00       	nop
      24:	18 c1       	rjmp	.+560    	; 0x256 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 79 12 	jmp	0x24f2	; 0x24f2 <__vector_10>
      2c:	0c 94 a7 12 	jmp	0x254e	; 0x254e <__vector_11>
      30:	12 c1       	rjmp	.+548    	; 0x256 <__bad_interrupt>
      32:	00 00       	nop
      34:	10 c1       	rjmp	.+544    	; 0x256 <__bad_interrupt>
      36:	00 00       	nop
      38:	0e c1       	rjmp	.+540    	; 0x256 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c c1       	rjmp	.+536    	; 0x256 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0a c1       	rjmp	.+532    	; 0x256 <__bad_interrupt>
      42:	00 00       	nop
      44:	08 c1       	rjmp	.+528    	; 0x256 <__bad_interrupt>
      46:	00 00       	nop
      48:	06 c1       	rjmp	.+524    	; 0x256 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	04 c1       	rjmp	.+520    	; 0x256 <__bad_interrupt>
      4e:	00 00       	nop
      50:	02 c1       	rjmp	.+516    	; 0x256 <__bad_interrupt>
      52:	00 00       	nop
      54:	00 c1       	rjmp	.+512    	; 0x256 <__bad_interrupt>
      56:	00 00       	nop
      58:	fe c0       	rjmp	.+508    	; 0x256 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	fc c0       	rjmp	.+504    	; 0x256 <__bad_interrupt>
      5e:	00 00       	nop
      60:	fa c0       	rjmp	.+500    	; 0x256 <__bad_interrupt>
      62:	00 00       	nop
      64:	f8 c0       	rjmp	.+496    	; 0x256 <__bad_interrupt>
      66:	00 00       	nop
      68:	f6 c0       	rjmp	.+492    	; 0x256 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f4 c0       	rjmp	.+488    	; 0x256 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f2 c0       	rjmp	.+484    	; 0x256 <__bad_interrupt>
      72:	00 00       	nop
      74:	f0 c0       	rjmp	.+480    	; 0x256 <__bad_interrupt>
      76:	00 00       	nop
      78:	ee c0       	rjmp	.+476    	; 0x256 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ec c0       	rjmp	.+472    	; 0x256 <__bad_interrupt>
      7e:	00 00       	nop
      80:	ea c0       	rjmp	.+468    	; 0x256 <__bad_interrupt>
      82:	00 00       	nop
      84:	e8 c0       	rjmp	.+464    	; 0x256 <__bad_interrupt>
      86:	00 00       	nop
      88:	e6 c0       	rjmp	.+460    	; 0x256 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e4 c0       	rjmp	.+456    	; 0x256 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e2 c0       	rjmp	.+452    	; 0x256 <__bad_interrupt>
      92:	00 00       	nop
      94:	e0 c0       	rjmp	.+448    	; 0x256 <__bad_interrupt>
      96:	00 00       	nop
      98:	de c0       	rjmp	.+444    	; 0x256 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	dc c0       	rjmp	.+440    	; 0x256 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	da c0       	rjmp	.+436    	; 0x256 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d8 c0       	rjmp	.+432    	; 0x256 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d6 c0       	rjmp	.+428    	; 0x256 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d4 c0       	rjmp	.+424    	; 0x256 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d2 c0       	rjmp	.+420    	; 0x256 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d0 c0       	rjmp	.+416    	; 0x256 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ce c0       	rjmp	.+412    	; 0x256 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	cc c0       	rjmp	.+408    	; 0x256 <__bad_interrupt>
      be:	00 00       	nop
      c0:	ca c0       	rjmp	.+404    	; 0x256 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c8 c0       	rjmp	.+400    	; 0x256 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c6 c0       	rjmp	.+396    	; 0x256 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c4 c0       	rjmp	.+392    	; 0x256 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c2 c0       	rjmp	.+388    	; 0x256 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c0 c0       	rjmp	.+384    	; 0x256 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	be c0       	rjmp	.+380    	; 0x256 <__bad_interrupt>
      da:	00 00       	nop
      dc:	bc c0       	rjmp	.+376    	; 0x256 <__bad_interrupt>
      de:	00 00       	nop
      e0:	ba c0       	rjmp	.+372    	; 0x256 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b8 c0       	rjmp	.+368    	; 0x256 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 3b 10 	jmp	0x2076	; 0x2076 <__vector_58>
      ec:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__vector_59>
      f0:	b2 c0       	rjmp	.+356    	; 0x256 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b0 c0       	rjmp	.+352    	; 0x256 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ae c0       	rjmp	.+348    	; 0x256 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ac c0       	rjmp	.+344    	; 0x256 <__bad_interrupt>
      fe:	00 00       	nop
     100:	aa c0       	rjmp	.+340    	; 0x256 <__bad_interrupt>
     102:	00 00       	nop
     104:	a8 c0       	rjmp	.+336    	; 0x256 <__bad_interrupt>
     106:	00 00       	nop
     108:	a6 c0       	rjmp	.+332    	; 0x256 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a4 c0       	rjmp	.+328    	; 0x256 <__bad_interrupt>
     10e:	00 00       	nop
     110:	a2 c0       	rjmp	.+324    	; 0x256 <__bad_interrupt>
     112:	00 00       	nop
     114:	a0 c0       	rjmp	.+320    	; 0x256 <__bad_interrupt>
     116:	00 00       	nop
     118:	9e c0       	rjmp	.+316    	; 0x256 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	9c c0       	rjmp	.+312    	; 0x256 <__bad_interrupt>
     11e:	00 00       	nop
     120:	9a c0       	rjmp	.+308    	; 0x256 <__bad_interrupt>
     122:	00 00       	nop
     124:	98 c0       	rjmp	.+304    	; 0x256 <__bad_interrupt>
     126:	00 00       	nop
     128:	96 c0       	rjmp	.+300    	; 0x256 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	94 c0       	rjmp	.+296    	; 0x256 <__bad_interrupt>
     12e:	00 00       	nop
     130:	92 c0       	rjmp	.+292    	; 0x256 <__bad_interrupt>
     132:	00 00       	nop
     134:	90 c0       	rjmp	.+288    	; 0x256 <__bad_interrupt>
     136:	00 00       	nop
     138:	8e c0       	rjmp	.+284    	; 0x256 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	8c c0       	rjmp	.+280    	; 0x256 <__bad_interrupt>
     13e:	00 00       	nop
     140:	8a c0       	rjmp	.+276    	; 0x256 <__bad_interrupt>
     142:	00 00       	nop
     144:	88 c0       	rjmp	.+272    	; 0x256 <__bad_interrupt>
     146:	00 00       	nop
     148:	86 c0       	rjmp	.+268    	; 0x256 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	84 c0       	rjmp	.+264    	; 0x256 <__bad_interrupt>
     14e:	00 00       	nop
     150:	82 c0       	rjmp	.+260    	; 0x256 <__bad_interrupt>
     152:	00 00       	nop
     154:	80 c0       	rjmp	.+256    	; 0x256 <__bad_interrupt>
     156:	00 00       	nop
     158:	7e c0       	rjmp	.+252    	; 0x256 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	7c c0       	rjmp	.+248    	; 0x256 <__bad_interrupt>
     15e:	00 00       	nop
     160:	7a c0       	rjmp	.+244    	; 0x256 <__bad_interrupt>
     162:	00 00       	nop
     164:	78 c0       	rjmp	.+240    	; 0x256 <__bad_interrupt>
     166:	00 00       	nop
     168:	76 c0       	rjmp	.+236    	; 0x256 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	74 c0       	rjmp	.+232    	; 0x256 <__bad_interrupt>
     16e:	00 00       	nop
     170:	72 c0       	rjmp	.+228    	; 0x256 <__bad_interrupt>
     172:	00 00       	nop
     174:	70 c0       	rjmp	.+224    	; 0x256 <__bad_interrupt>
     176:	00 00       	nop
     178:	6e c0       	rjmp	.+220    	; 0x256 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6c c0       	rjmp	.+216    	; 0x256 <__bad_interrupt>
     17e:	00 00       	nop
     180:	6a c0       	rjmp	.+212    	; 0x256 <__bad_interrupt>
     182:	00 00       	nop
     184:	68 c0       	rjmp	.+208    	; 0x256 <__bad_interrupt>
     186:	00 00       	nop
     188:	66 c0       	rjmp	.+204    	; 0x256 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	64 c0       	rjmp	.+200    	; 0x256 <__bad_interrupt>
     18e:	00 00       	nop
     190:	62 c0       	rjmp	.+196    	; 0x256 <__bad_interrupt>
     192:	00 00       	nop
     194:	60 c0       	rjmp	.+192    	; 0x256 <__bad_interrupt>
     196:	00 00       	nop
     198:	5e c0       	rjmp	.+188    	; 0x256 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5c c0       	rjmp	.+184    	; 0x256 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5a c0       	rjmp	.+180    	; 0x256 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	58 c0       	rjmp	.+176    	; 0x256 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	56 c0       	rjmp	.+172    	; 0x256 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	54 c0       	rjmp	.+168    	; 0x256 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	52 c0       	rjmp	.+164    	; 0x256 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	50 c0       	rjmp	.+160    	; 0x256 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	4e c0       	rjmp	.+156    	; 0x256 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	4c c0       	rjmp	.+152    	; 0x256 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	4a c0       	rjmp	.+148    	; 0x256 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	48 c0       	rjmp	.+144    	; 0x256 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	46 c0       	rjmp	.+140    	; 0x256 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	44 c0       	rjmp	.+136    	; 0x256 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	42 c0       	rjmp	.+132    	; 0x256 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	40 c0       	rjmp	.+128    	; 0x256 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	3e c0       	rjmp	.+124    	; 0x256 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3c c0       	rjmp	.+120    	; 0x256 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3a c0       	rjmp	.+116    	; 0x256 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	38 c0       	rjmp	.+112    	; 0x256 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	36 c0       	rjmp	.+108    	; 0x256 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	34 c0       	rjmp	.+104    	; 0x256 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	32 c0       	rjmp	.+100    	; 0x256 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <__vector_125>
     1f8:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <__vector_126>
     1fc:	fc 09       	sbc	r31, r12
     1fe:	ea 09       	sbc	r30, r10
     200:	ed 09       	sbc	r30, r13
     202:	f0 09       	sbc	r31, r0
     204:	f3 09       	sbc	r31, r3
     206:	f6 09       	sbc	r31, r6
     208:	f9 09       	sbc	r31, r9

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e3       	ldi	r29, 0x3F	; 63
     214:	de bf       	out	0x3e, r29	; 62
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0c bf       	out	0x3c, r16	; 60
     21a:	18 be       	out	0x38, r1	; 56
     21c:	19 be       	out	0x39, r1	; 57
     21e:	1a be       	out	0x3a, r1	; 58
     220:	1b be       	out	0x3b, r1	; 59

00000222 <__do_copy_data>:
     222:	10 e2       	ldi	r17, 0x20	; 32
     224:	a0 e0       	ldi	r26, 0x00	; 0
     226:	b0 e2       	ldi	r27, 0x20	; 32
     228:	ec e2       	ldi	r30, 0x2C	; 44
     22a:	ff e2       	ldi	r31, 0x2F	; 47
     22c:	00 e0       	ldi	r16, 0x00	; 0
     22e:	0b bf       	out	0x3b, r16	; 59
     230:	02 c0       	rjmp	.+4      	; 0x236 <__do_copy_data+0x14>
     232:	07 90       	elpm	r0, Z+
     234:	0d 92       	st	X+, r0
     236:	a2 3c       	cpi	r26, 0xC2	; 194
     238:	b1 07       	cpc	r27, r17
     23a:	d9 f7       	brne	.-10     	; 0x232 <__do_copy_data+0x10>
     23c:	1b be       	out	0x3b, r1	; 59

0000023e <__do_clear_bss>:
     23e:	27 e2       	ldi	r18, 0x27	; 39
     240:	a2 ec       	ldi	r26, 0xC2	; 194
     242:	b0 e2       	ldi	r27, 0x20	; 32
     244:	01 c0       	rjmp	.+2      	; 0x248 <.do_clear_bss_start>

00000246 <.do_clear_bss_loop>:
     246:	1d 92       	st	X+, r1

00000248 <.do_clear_bss_start>:
     248:	aa 36       	cpi	r26, 0x6A	; 106
     24a:	b2 07       	cpc	r27, r18
     24c:	e1 f7       	brne	.-8      	; 0x246 <.do_clear_bss_loop>
     24e:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <main>
     252:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <_exit>

00000256 <__bad_interrupt>:
     256:	d4 ce       	rjmp	.-600    	; 0x0 <__vectors>

00000258 <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
     258:	08 95       	ret

0000025a <ui_powerdown>:

}

void ui_powerdown(void)
{
     25a:	08 95       	ret

0000025c <ui_wakeup>:

}

void ui_wakeup(void)
{
     25c:	08 95       	ret

0000025e <ui_com_open>:

}

void ui_com_open(uint8_t port)
{
     25e:	08 95       	ret

00000260 <ui_com_close>:

}

void ui_com_close(uint8_t port)
{
     260:	08 95       	ret

00000262 <ui_com_rx_start>:

}

void ui_com_rx_start(void)
{
     262:	08 95       	ret

00000264 <ui_com_rx_stop>:

}

void ui_com_rx_stop(void)
{
     264:	08 95       	ret

00000266 <ui_com_tx_start>:

}

void ui_com_tx_start(void)
{
     266:	08 95       	ret

00000268 <ui_com_tx_stop>:

}

void ui_com_tx_stop(void)
{
     268:	08 95       	ret

0000026a <ui_com_error>:

}

void ui_com_error(void)
{
     26a:	08 95       	ret

0000026c <ui_com_overflow>:

}

void ui_com_overflow(void)
{
     26c:	08 95       	ret

0000026e <ui_process>:

}

void ui_process(uint16_t framenumber)
{
	if (0 == framenumber) {
     26e:	00 97       	sbiw	r24, 0x00	; 0
     270:	29 f4       	brne	.+10     	; 0x27c <ui_process+0xe>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     272:	88 e0       	ldi	r24, 0x08	; 8
     274:	e0 ec       	ldi	r30, 0xC0	; 192
     276:	f7 e0       	ldi	r31, 0x07	; 7
     278:	86 83       	std	Z+6, r24	; 0x06
     27a:	08 95       	ret
		ioport_set_pin_level(LED0_PIN,LED0_ACTIVE);
	}
	if (1000 == framenumber) {
     27c:	88 3e       	cpi	r24, 0xE8	; 232
     27e:	93 40       	sbci	r25, 0x03	; 3
     280:	21 f4       	brne	.+8      	; 0x28a <ui_process+0x1c>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     282:	88 e0       	ldi	r24, 0x08	; 8
     284:	e0 ec       	ldi	r30, 0xC0	; 192
     286:	f7 e0       	ldi	r31, 0x07	; 7
     288:	85 83       	std	Z+5, r24	; 0x05
     28a:	08 95       	ret

0000028c <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}
     28c:	80 91 d8 25 	lds	r24, 0x25D8
     290:	81 50       	subi	r24, 0x01	; 1
     292:	80 93 d8 25 	sts	0x25D8, r24
     296:	08 95       	ret

00000298 <udi_cdc_data_setup>:
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	08 95       	ret

0000029c <udi_cdc_getsetting>:
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	08 95       	ret

000002a0 <udi_cdc_line_coding_received>:
     2a0:	68 ee       	ldi	r22, 0xE8	; 232
     2a2:	75 e2       	ldi	r23, 0x25	; 37
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <uart_config>
     2aa:	08 95       	ret

000002ac <udi_cdc_comm_enable>:
     2ac:	10 92 d8 25 	sts	0x25D8, r1
     2b0:	10 92 e4 25 	sts	0x25E4, r1
     2b4:	10 92 e5 25 	sts	0x25E5, r1
     2b8:	81 ea       	ldi	r24, 0xA1	; 161
     2ba:	80 93 da 25 	sts	0x25DA, r24
     2be:	80 e2       	ldi	r24, 0x20	; 32
     2c0:	80 93 db 25 	sts	0x25DB, r24
     2c4:	10 92 dc 25 	sts	0x25DC, r1
     2c8:	10 92 dd 25 	sts	0x25DD, r1
     2cc:	10 92 de 25 	sts	0x25DE, r1
     2d0:	10 92 df 25 	sts	0x25DF, r1
     2d4:	82 e0       	ldi	r24, 0x02	; 2
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	80 93 e0 25 	sts	0x25E0, r24
     2dc:	90 93 e1 25 	sts	0x25E1, r25
     2e0:	10 92 e2 25 	sts	0x25E2, r1
     2e4:	10 92 e3 25 	sts	0x25E3, r1
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	92 ec       	ldi	r25, 0xC2	; 194
     2ec:	a1 e0       	ldi	r26, 0x01	; 1
     2ee:	b0 e0       	ldi	r27, 0x00	; 0
     2f0:	80 93 e8 25 	sts	0x25E8, r24
     2f4:	90 93 e9 25 	sts	0x25E9, r25
     2f8:	a0 93 ea 25 	sts	0x25EA, r26
     2fc:	b0 93 eb 25 	sts	0x25EB, r27
     300:	10 92 ec 25 	sts	0x25EC, r1
     304:	10 92 ed 25 	sts	0x25ED, r1
     308:	88 e0       	ldi	r24, 0x08	; 8
     30a:	80 93 ee 25 	sts	0x25EE, r24
     30e:	68 ee       	ldi	r22, 0xE8	; 232
     310:	75 e2       	ldi	r23, 0x25	; 37
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <uart_config>
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <main_cdc_enable>
     31e:	88 23       	and	r24, r24
     320:	29 f0       	breq	.+10     	; 0x32c <udi_cdc_comm_enable+0x80>
     322:	90 91 d8 25 	lds	r25, 0x25D8
     326:	9f 5f       	subi	r25, 0xFF	; 255
     328:	90 93 d8 25 	sts	0x25D8, r25
     32c:	08 95       	ret

0000032e <udi_cdc_tx_send>:
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	80 91 c5 20 	lds	r24, 0x20C5
     33c:	81 11       	cpse	r24, r1
     33e:	9b c0       	rjmp	.+310    	; 0x476 <udi_cdc_tx_send+0x148>
     340:	0e 94 2d 0c 	call	0x185a	; 0x185a <udd_is_high_speed>
     344:	88 23       	and	r24, r24
     346:	51 f0       	breq	.+20     	; 0x35c <udi_cdc_tx_send+0x2e>
     348:	c0 91 c6 20 	lds	r28, 0x20C6
     34c:	d0 91 c7 20 	lds	r29, 0x20C7
     350:	0e 94 3a 0c 	call	0x1874	; 0x1874 <udd_get_micro_frame_number>
     354:	c8 17       	cp	r28, r24
     356:	d9 07       	cpc	r29, r25
     358:	59 f4       	brne	.+22     	; 0x370 <udi_cdc_tx_send+0x42>
     35a:	8d c0       	rjmp	.+282    	; 0x476 <udi_cdc_tx_send+0x148>
     35c:	c0 91 c6 20 	lds	r28, 0x20C6
     360:	d0 91 c7 20 	lds	r29, 0x20C7
     364:	0e 94 35 0c 	call	0x186a	; 0x186a <udd_get_frame_number>
     368:	c8 17       	cp	r28, r24
     36a:	d9 07       	cpc	r29, r25
     36c:	09 f4       	brne	.+2      	; 0x370 <udi_cdc_tx_send+0x42>
     36e:	83 c0       	rjmp	.+262    	; 0x476 <udi_cdc_tx_send+0x148>
     370:	df b7       	in	r29, 0x3f	; 63
     372:	f8 94       	cli
     374:	c0 91 c8 20 	lds	r28, 0x20C8
     378:	ec 2f       	mov	r30, r28
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	ee 0f       	add	r30, r30
     37e:	ff 1f       	adc	r31, r31
     380:	e7 53       	subi	r30, 0x37	; 55
     382:	ff 4d       	sbci	r31, 0xDF	; 223
     384:	80 81       	ld	r24, Z
     386:	91 81       	ldd	r25, Z+1	; 0x01
     388:	89 2b       	or	r24, r25
     38a:	09 f5       	brne	.+66     	; 0x3ce <udi_cdc_tx_send+0xa0>
     38c:	80 91 c2 20 	lds	r24, 0x20C2
     390:	90 91 c3 20 	lds	r25, 0x20C3
     394:	01 96       	adiw	r24, 0x01	; 1
     396:	80 93 c2 20 	sts	0x20C2, r24
     39a:	90 93 c3 20 	sts	0x20C3, r25
     39e:	0e 94 2d 0c 	call	0x185a	; 0x185a <udd_is_high_speed>
     3a2:	81 11       	cpse	r24, r1
     3a4:	07 c0       	rjmp	.+14     	; 0x3b4 <udi_cdc_tx_send+0x86>
     3a6:	80 91 c2 20 	lds	r24, 0x20C2
     3aa:	90 91 c3 20 	lds	r25, 0x20C3
     3ae:	84 36       	cpi	r24, 0x64	; 100
     3b0:	91 05       	cpc	r25, r1
     3b2:	58 f0       	brcs	.+22     	; 0x3ca <udi_cdc_tx_send+0x9c>
     3b4:	0e 94 2d 0c 	call	0x185a	; 0x185a <udd_is_high_speed>
     3b8:	88 23       	and	r24, r24
     3ba:	49 f0       	breq	.+18     	; 0x3ce <udi_cdc_tx_send+0xa0>
     3bc:	80 91 c2 20 	lds	r24, 0x20C2
     3c0:	90 91 c3 20 	lds	r25, 0x20C3
     3c4:	80 32       	cpi	r24, 0x20	; 32
     3c6:	93 40       	sbci	r25, 0x03	; 3
     3c8:	10 f4       	brcc	.+4      	; 0x3ce <udi_cdc_tx_send+0xa0>
     3ca:	df bf       	out	0x3f, r29	; 63
     3cc:	54 c0       	rjmp	.+168    	; 0x476 <udi_cdc_tx_send+0x148>
     3ce:	10 92 c2 20 	sts	0x20C2, r1
     3d2:	10 92 c3 20 	sts	0x20C3, r1
     3d6:	80 91 c4 20 	lds	r24, 0x20C4
     3da:	81 11       	cpse	r24, r1
     3dc:	06 c0       	rjmp	.+12     	; 0x3ea <udi_cdc_tx_send+0xbc>
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	c1 11       	cpse	r28, r1
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	80 93 c8 20 	sts	0x20C8, r24
     3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <udi_cdc_tx_send+0xc4>
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	c1 11       	cpse	r28, r1
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	c8 2f       	mov	r28, r24
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	80 93 c5 20 	sts	0x20C5, r24
     3f8:	df bf       	out	0x3f, r29	; 63
     3fa:	d0 e0       	ldi	r29, 0x00	; 0
     3fc:	fe 01       	movw	r30, r28
     3fe:	ee 0f       	add	r30, r30
     400:	ff 1f       	adc	r31, r31
     402:	e7 53       	subi	r30, 0x37	; 55
     404:	ff 4d       	sbci	r31, 0xDF	; 223
     406:	ff 24       	eor	r15, r15
     408:	f3 94       	inc	r15
     40a:	80 81       	ld	r24, Z
     40c:	91 81       	ldd	r25, Z+1	; 0x01
     40e:	80 34       	cpi	r24, 0x40	; 64
     410:	91 40       	sbci	r25, 0x01	; 1
     412:	09 f4       	brne	.+2      	; 0x416 <udi_cdc_tx_send+0xe8>
     414:	f1 2c       	mov	r15, r1
     416:	ff 20       	and	r15, r15
     418:	91 f0       	breq	.+36     	; 0x43e <udi_cdc_tx_send+0x110>
     41a:	0e 94 2d 0c 	call	0x185a	; 0x185a <udd_is_high_speed>
     41e:	88 23       	and	r24, r24
     420:	39 f0       	breq	.+14     	; 0x430 <udi_cdc_tx_send+0x102>
     422:	0e 94 3a 0c 	call	0x1874	; 0x1874 <udd_get_micro_frame_number>
     426:	80 93 c6 20 	sts	0x20C6, r24
     42a:	90 93 c7 20 	sts	0x20C7, r25
     42e:	0b c0       	rjmp	.+22     	; 0x446 <udi_cdc_tx_send+0x118>
     430:	0e 94 35 0c 	call	0x186a	; 0x186a <udd_get_frame_number>
     434:	80 93 c6 20 	sts	0x20C6, r24
     438:	90 93 c7 20 	sts	0x20C7, r25
     43c:	04 c0       	rjmp	.+8      	; 0x446 <udi_cdc_tx_send+0x118>
     43e:	10 92 c6 20 	sts	0x20C6, r1
     442:	10 92 c7 20 	sts	0x20C7, r1
     446:	fe 01       	movw	r30, r28
     448:	ee 0f       	add	r30, r30
     44a:	ff 1f       	adc	r31, r31
     44c:	e7 53       	subi	r30, 0x37	; 55
     44e:	ff 4d       	sbci	r31, 0xDF	; 223
     450:	20 81       	ld	r18, Z
     452:	31 81       	ldd	r19, Z+1	; 0x01
     454:	80 e4       	ldi	r24, 0x40	; 64
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	c8 9f       	mul	r28, r24
     45a:	a0 01       	movw	r20, r0
     45c:	c9 9f       	mul	r28, r25
     45e:	50 0d       	add	r21, r0
     460:	d8 9f       	mul	r29, r24
     462:	50 0d       	add	r21, r0
     464:	11 24       	eor	r1, r1
     466:	42 53       	subi	r20, 0x32	; 50
     468:	5f 4d       	sbci	r21, 0xDF	; 223
     46a:	01 e4       	ldi	r16, 0x41	; 65
     46c:	12 e0       	ldi	r17, 0x02	; 2
     46e:	6f 2d       	mov	r22, r15
     470:	81 e8       	ldi	r24, 0x81	; 129
     472:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <udd_ep_run>
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	1f 91       	pop	r17
     47c:	0f 91       	pop	r16
     47e:	ff 90       	pop	r15
     480:	08 95       	ret

00000482 <udi_cdc_data_sent>:
     482:	81 11       	cpse	r24, r1
     484:	15 c0       	rjmp	.+42     	; 0x4b0 <udi_cdc_data_sent+0x2e>
     486:	20 91 c8 20 	lds	r18, 0x20C8
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	22 23       	and	r18, r18
     490:	11 f0       	breq	.+4      	; 0x496 <udi_cdc_data_sent+0x14>
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	fc 01       	movw	r30, r24
     498:	ee 0f       	add	r30, r30
     49a:	ff 1f       	adc	r31, r31
     49c:	e7 53       	subi	r30, 0x37	; 55
     49e:	ff 4d       	sbci	r31, 0xDF	; 223
     4a0:	10 82       	st	Z, r1
     4a2:	11 82       	std	Z+1, r1	; 0x01
     4a4:	10 92 c4 20 	sts	0x20C4, r1
     4a8:	10 92 c5 20 	sts	0x20C5, r1
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	3f cf       	rjmp	.-386    	; 0x32e <udi_cdc_tx_send>
     4b0:	08 95       	ret

000004b2 <udi_cdc_data_sof_notify>:
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	3c cf       	rjmp	.-392    	; 0x32e <udi_cdc_tx_send>
     4b6:	08 95       	ret

000004b8 <udi_cdc_ctrl_state_notify>:
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	86 2f       	mov	r24, r22
     4be:	90 91 e6 25 	lds	r25, 0x25E6
     4c2:	91 11       	cpse	r25, r1
     4c4:	1e c0       	rjmp	.+60     	; 0x502 <udi_cdc_ctrl_state_notify+0x4a>
     4c6:	40 91 e4 25 	lds	r20, 0x25E4
     4ca:	50 91 e5 25 	lds	r21, 0x25E5
     4ce:	20 91 e2 25 	lds	r18, 0x25E2
     4d2:	30 91 e3 25 	lds	r19, 0x25E3
     4d6:	42 17       	cp	r20, r18
     4d8:	53 07       	cpc	r21, r19
     4da:	99 f0       	breq	.+38     	; 0x502 <udi_cdc_ctrl_state_notify+0x4a>
     4dc:	20 91 e4 25 	lds	r18, 0x25E4
     4e0:	30 91 e5 25 	lds	r19, 0x25E5
     4e4:	20 93 e2 25 	sts	0x25E2, r18
     4e8:	30 93 e3 25 	sts	0x25E3, r19
     4ec:	04 ea       	ldi	r16, 0xA4	; 164
     4ee:	12 e0       	ldi	r17, 0x02	; 2
     4f0:	2a e0       	ldi	r18, 0x0A	; 10
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	4a ed       	ldi	r20, 0xDA	; 218
     4f6:	55 e2       	ldi	r21, 0x25	; 37
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <udd_ep_run>
     4fe:	80 93 e6 25 	sts	0x25E6, r24
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	08 95       	ret

00000508 <udi_cdc_ctrl_state_change>:
     508:	2f b7       	in	r18, 0x3f	; 63
     50a:	f8 94       	cli
     50c:	66 23       	and	r22, r22
     50e:	59 f0       	breq	.+22     	; 0x526 <udi_cdc_ctrl_state_change+0x1e>
     510:	80 91 e4 25 	lds	r24, 0x25E4
     514:	90 91 e5 25 	lds	r25, 0x25E5
     518:	48 2b       	or	r20, r24
     51a:	59 2b       	or	r21, r25
     51c:	40 93 e4 25 	sts	0x25E4, r20
     520:	50 93 e5 25 	sts	0x25E5, r21
     524:	0c c0       	rjmp	.+24     	; 0x53e <udi_cdc_ctrl_state_change+0x36>
     526:	80 91 e4 25 	lds	r24, 0x25E4
     52a:	90 91 e5 25 	lds	r25, 0x25E5
     52e:	40 95       	com	r20
     530:	50 95       	com	r21
     532:	48 23       	and	r20, r24
     534:	59 23       	and	r21, r25
     536:	40 93 e4 25 	sts	0x25E4, r20
     53a:	50 93 e5 25 	sts	0x25E5, r21
     53e:	2f bf       	out	0x3f, r18	; 63
     540:	62 e8       	ldi	r22, 0x82	; 130
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	b9 cf       	rjmp	.-142    	; 0x4b8 <udi_cdc_ctrl_state_notify>
     546:	08 95       	ret

00000548 <udi_cdc_serial_state_msg_sent>:
     548:	10 92 e6 25 	sts	0x25E6, r1
     54c:	80 91 e4 25 	lds	r24, 0x25E4
     550:	90 91 e5 25 	lds	r25, 0x25E5
     554:	83 78       	andi	r24, 0x83	; 131
     556:	80 93 e4 25 	sts	0x25E4, r24
     55a:	90 93 e5 25 	sts	0x25E5, r25
     55e:	e2 ee       	ldi	r30, 0xE2	; 226
     560:	f5 e2       	ldi	r31, 0x25	; 37
     562:	80 81       	ld	r24, Z
     564:	91 81       	ldd	r25, Z+1	; 0x01
     566:	83 78       	andi	r24, 0x83	; 131
     568:	80 83       	st	Z, r24
     56a:	91 83       	std	Z+1, r25	; 0x01
     56c:	64 2f       	mov	r22, r20
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	a3 cf       	rjmp	.-186    	; 0x4b8 <udi_cdc_ctrl_state_notify>
     572:	08 95       	ret

00000574 <udi_cdc_data_disable>:
     574:	80 91 d7 25 	lds	r24, 0x25D7
     578:	81 50       	subi	r24, 0x01	; 1
     57a:	80 93 d7 25 	sts	0x25D7, r24
     57e:	80 91 d7 25 	lds	r24, 0x25D7
     582:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <main_cdc_disable>
     586:	10 92 d6 25 	sts	0x25D6, r1
     58a:	08 95       	ret

0000058c <udi_cdc_comm_setup>:
     58c:	80 91 50 27 	lds	r24, 0x2750
     590:	88 23       	and	r24, r24
     592:	ec f4       	brge	.+58     	; 0x5ce <udi_cdc_comm_setup+0x42>
     594:	80 76       	andi	r24, 0x60	; 96
     596:	80 32       	cpi	r24, 0x20	; 32
     598:	09 f0       	breq	.+2      	; 0x59c <udi_cdc_comm_setup+0x10>
     59a:	45 c0       	rjmp	.+138    	; 0x626 <udi_cdc_comm_setup+0x9a>
     59c:	80 91 51 27 	lds	r24, 0x2751
     5a0:	81 32       	cpi	r24, 0x21	; 33
     5a2:	09 f0       	breq	.+2      	; 0x5a6 <udi_cdc_comm_setup+0x1a>
     5a4:	42 c0       	rjmp	.+132    	; 0x62a <udi_cdc_comm_setup+0x9e>
     5a6:	80 91 56 27 	lds	r24, 0x2756
     5aa:	90 91 57 27 	lds	r25, 0x2757
     5ae:	07 97       	sbiw	r24, 0x07	; 7
     5b0:	f1 f5       	brne	.+124    	; 0x62e <udi_cdc_comm_setup+0xa2>
     5b2:	88 ee       	ldi	r24, 0xE8	; 232
     5b4:	95 e2       	ldi	r25, 0x25	; 37
     5b6:	80 93 58 27 	sts	0x2758, r24
     5ba:	90 93 59 27 	sts	0x2759, r25
     5be:	87 e0       	ldi	r24, 0x07	; 7
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	80 93 5a 27 	sts	0x275A, r24
     5c6:	90 93 5b 27 	sts	0x275B, r25
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	08 95       	ret
     5ce:	80 76       	andi	r24, 0x60	; 96
     5d0:	80 32       	cpi	r24, 0x20	; 32
     5d2:	79 f5       	brne	.+94     	; 0x632 <udi_cdc_comm_setup+0xa6>
     5d4:	80 91 51 27 	lds	r24, 0x2751
     5d8:	80 32       	cpi	r24, 0x20	; 32
     5da:	19 f0       	breq	.+6      	; 0x5e2 <udi_cdc_comm_setup+0x56>
     5dc:	82 32       	cpi	r24, 0x22	; 34
     5de:	d9 f0       	breq	.+54     	; 0x616 <udi_cdc_comm_setup+0x8a>
     5e0:	2a c0       	rjmp	.+84     	; 0x636 <udi_cdc_comm_setup+0xaa>
     5e2:	80 91 56 27 	lds	r24, 0x2756
     5e6:	90 91 57 27 	lds	r25, 0x2757
     5ea:	07 97       	sbiw	r24, 0x07	; 7
     5ec:	31 f5       	brne	.+76     	; 0x63a <udi_cdc_comm_setup+0xae>
     5ee:	80 e5       	ldi	r24, 0x50	; 80
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	80 93 5c 27 	sts	0x275C, r24
     5f6:	90 93 5d 27 	sts	0x275D, r25
     5fa:	88 ee       	ldi	r24, 0xE8	; 232
     5fc:	95 e2       	ldi	r25, 0x25	; 37
     5fe:	80 93 58 27 	sts	0x2758, r24
     602:	90 93 59 27 	sts	0x2759, r25
     606:	87 e0       	ldi	r24, 0x07	; 7
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	80 93 5a 27 	sts	0x275A, r24
     60e:	90 93 5b 27 	sts	0x275B, r25
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	08 95       	ret
     616:	60 91 52 27 	lds	r22, 0x2752
     61a:	61 70       	andi	r22, 0x01	; 1
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	0e 94 20 16 	call	0x2c40	; 0x2c40 <main_cdc_set_dtr>
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	08 95       	ret
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	08 95       	ret
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	08 95       	ret
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	08 95       	ret
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	08 95       	ret
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	08 95       	ret
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	08 95       	ret

0000063e <udi_cdc_signal_framing_error>:
     63e:	40 e1       	ldi	r20, 0x10	; 16
     640:	50 e0       	ldi	r21, 0x00	; 0
     642:	61 e0       	ldi	r22, 0x01	; 1
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	60 cf       	rjmp	.-320    	; 0x508 <udi_cdc_ctrl_state_change>
     648:	08 95       	ret

0000064a <udi_cdc_signal_overrun>:
     64a:	40 e4       	ldi	r20, 0x40	; 64
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	61 e0       	ldi	r22, 0x01	; 1
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	5a cf       	rjmp	.-332    	; 0x508 <udi_cdc_ctrl_state_change>
     654:	08 95       	ret

00000656 <udi_cdc_multi_get_nb_received_data>:
     656:	4f b7       	in	r20, 0x3f	; 63
     658:	f8 94       	cli
     65a:	20 91 4f 23 	lds	r18, 0x234F
     65e:	30 91 50 23 	lds	r19, 0x2350
     662:	e0 91 51 23 	lds	r30, 0x2351
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	ee 0f       	add	r30, r30
     66a:	ff 1f       	adc	r31, r31
     66c:	ee 5a       	subi	r30, 0xAE	; 174
     66e:	fc 4d       	sbci	r31, 0xDC	; 220
     670:	80 81       	ld	r24, Z
     672:	91 81       	ldd	r25, Z+1	; 0x01
     674:	82 1b       	sub	r24, r18
     676:	93 0b       	sbc	r25, r19
     678:	4f bf       	out	0x3f, r20	; 63
     67a:	08 95       	ret

0000067c <udi_cdc_multi_is_rx_ready>:
     67c:	ec df       	rcall	.-40     	; 0x656 <udi_cdc_multi_get_nb_received_data>
     67e:	21 e0       	ldi	r18, 0x01	; 1
     680:	89 2b       	or	r24, r25
     682:	09 f4       	brne	.+2      	; 0x686 <udi_cdc_multi_is_rx_ready+0xa>
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	82 2f       	mov	r24, r18
     688:	08 95       	ret

0000068a <udi_cdc_rx_start>:
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	4f b7       	in	r20, 0x3f	; 63
     694:	f8 94       	cli
     696:	50 91 51 23 	lds	r21, 0x2351
     69a:	80 91 4e 23 	lds	r24, 0x234E
     69e:	81 11       	cpse	r24, r1
     6a0:	10 c0       	rjmp	.+32     	; 0x6c2 <udi_cdc_rx_start+0x38>
     6a2:	20 91 4f 23 	lds	r18, 0x234F
     6a6:	30 91 50 23 	lds	r19, 0x2350
     6aa:	c5 2f       	mov	r28, r21
     6ac:	d0 e0       	ldi	r29, 0x00	; 0
     6ae:	fe 01       	movw	r30, r28
     6b0:	ee 0f       	add	r30, r30
     6b2:	ff 1f       	adc	r31, r31
     6b4:	ee 5a       	subi	r30, 0xAE	; 174
     6b6:	fc 4d       	sbci	r31, 0xDC	; 220
     6b8:	80 81       	ld	r24, Z
     6ba:	91 81       	ldd	r25, Z+1	; 0x01
     6bc:	28 17       	cp	r18, r24
     6be:	39 07       	cpc	r19, r25
     6c0:	18 f4       	brcc	.+6      	; 0x6c8 <udi_cdc_rx_start+0x3e>
     6c2:	4f bf       	out	0x3f, r20	; 63
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	27 c0       	rjmp	.+78     	; 0x716 <udi_cdc_rx_start+0x8c>
     6c8:	10 92 4f 23 	sts	0x234F, r1
     6cc:	10 92 50 23 	sts	0x2350, r1
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	51 11       	cpse	r21, r1
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	80 93 51 23 	sts	0x2351, r24
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	80 93 4e 23 	sts	0x234E, r24
     6e0:	4f bf       	out	0x3f, r20	; 63
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	cb df       	rcall	.-106    	; 0x67c <udi_cdc_multi_is_rx_ready>
     6e6:	88 23       	and	r24, r24
     6e8:	19 f0       	breq	.+6      	; 0x6f0 <udi_cdc_rx_start+0x66>
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	0e 94 33 10 	call	0x2066	; 0x2066 <uart_rx_notify>
     6f0:	80 e4       	ldi	r24, 0x40	; 64
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	c8 9f       	mul	r28, r24
     6f6:	a0 01       	movw	r20, r0
     6f8:	c9 9f       	mul	r28, r25
     6fa:	50 0d       	add	r21, r0
     6fc:	d8 9f       	mul	r29, r24
     6fe:	50 0d       	add	r21, r0
     700:	11 24       	eor	r1, r1
     702:	4a 5a       	subi	r20, 0xAA	; 170
     704:	5c 4d       	sbci	r21, 0xDC	; 220
     706:	02 ec       	ldi	r16, 0xC2	; 194
     708:	13 e0       	ldi	r17, 0x03	; 3
     70a:	20 e4       	ldi	r18, 0x40	; 64
     70c:	31 e0       	ldi	r19, 0x01	; 1
     70e:	61 e0       	ldi	r22, 0x01	; 1
     710:	82 e0       	ldi	r24, 0x02	; 2
     712:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <udd_ep_run>
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	08 95       	ret

00000720 <udi_cdc_data_enable>:
     720:	10 92 d7 25 	sts	0x25D7, r1
     724:	10 92 c5 20 	sts	0x20C5, r1
     728:	10 92 c4 20 	sts	0x20C4, r1
     72c:	10 92 c8 20 	sts	0x20C8, r1
     730:	10 92 c9 20 	sts	0x20C9, r1
     734:	10 92 ca 20 	sts	0x20CA, r1
     738:	10 92 cb 20 	sts	0x20CB, r1
     73c:	10 92 cc 20 	sts	0x20CC, r1
     740:	10 92 c6 20 	sts	0x20C6, r1
     744:	10 92 c7 20 	sts	0x20C7, r1
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	f1 dd       	rcall	.-1054   	; 0x32e <udi_cdc_tx_send>
     74c:	10 92 4e 23 	sts	0x234E, r1
     750:	10 92 51 23 	sts	0x2351, r1
     754:	10 92 52 23 	sts	0x2352, r1
     758:	10 92 53 23 	sts	0x2353, r1
     75c:	10 92 4f 23 	sts	0x234F, r1
     760:	10 92 50 23 	sts	0x2350, r1
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	91 df       	rcall	.-222    	; 0x68a <udi_cdc_rx_start>
     768:	88 23       	and	r24, r24
     76a:	59 f0       	breq	.+22     	; 0x782 <udi_cdc_data_enable+0x62>
     76c:	90 91 d7 25 	lds	r25, 0x25D7
     770:	9f 5f       	subi	r25, 0xFF	; 255
     772:	90 93 d7 25 	sts	0x25D7, r25
     776:	90 91 d7 25 	lds	r25, 0x25D7
     77a:	91 30       	cpi	r25, 0x01	; 1
     77c:	11 f4       	brne	.+4      	; 0x782 <udi_cdc_data_enable+0x62>
     77e:	90 93 d6 25 	sts	0x25D6, r25
     782:	08 95       	ret

00000784 <udi_cdc_data_received>:
     784:	0f 93       	push	r16
     786:	1f 93       	push	r17
     788:	94 2f       	mov	r25, r20
     78a:	81 11       	cpse	r24, r1
     78c:	27 c0       	rjmp	.+78     	; 0x7dc <udi_cdc_data_received+0x58>
     78e:	80 91 51 23 	lds	r24, 0x2351
     792:	e1 e0       	ldi	r30, 0x01	; 1
     794:	81 11       	cpse	r24, r1
     796:	e0 e0       	ldi	r30, 0x00	; 0
     798:	61 15       	cp	r22, r1
     79a:	71 05       	cpc	r23, r1
     79c:	a1 f4       	brne	.+40     	; 0x7c6 <udi_cdc_data_received+0x42>
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	20 e4       	ldi	r18, 0x40	; 64
     7a2:	31 e0       	ldi	r19, 0x01	; 1
     7a4:	e2 9f       	mul	r30, r18
     7a6:	b0 01       	movw	r22, r0
     7a8:	e3 9f       	mul	r30, r19
     7aa:	70 0d       	add	r23, r0
     7ac:	f2 9f       	mul	r31, r18
     7ae:	70 0d       	add	r23, r0
     7b0:	11 24       	eor	r1, r1
     7b2:	ab 01       	movw	r20, r22
     7b4:	4a 5a       	subi	r20, 0xAA	; 170
     7b6:	5c 4d       	sbci	r21, 0xDC	; 220
     7b8:	02 ec       	ldi	r16, 0xC2	; 194
     7ba:	13 e0       	ldi	r17, 0x03	; 3
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	89 2f       	mov	r24, r25
     7c0:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <udd_ep_run>
     7c4:	0b c0       	rjmp	.+22     	; 0x7dc <udi_cdc_data_received+0x58>
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	ee 0f       	add	r30, r30
     7ca:	ff 1f       	adc	r31, r31
     7cc:	ee 5a       	subi	r30, 0xAE	; 174
     7ce:	fc 4d       	sbci	r31, 0xDC	; 220
     7d0:	60 83       	st	Z, r22
     7d2:	71 83       	std	Z+1, r23	; 0x01
     7d4:	10 92 4e 23 	sts	0x234E, r1
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	57 df       	rcall	.-338    	; 0x68a <udi_cdc_rx_start>
     7dc:	1f 91       	pop	r17
     7de:	0f 91       	pop	r16
     7e0:	08 95       	ret

000007e2 <udi_cdc_is_rx_ready>:
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	4b cf       	rjmp	.-362    	; 0x67c <udi_cdc_multi_is_rx_ready>
     7e6:	08 95       	ret

000007e8 <udi_cdc_multi_getc>:
     7e8:	ff 92       	push	r15
     7ea:	0f 93       	push	r16
     7ec:	1f 93       	push	r17
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	ff 24       	eor	r15, r15
     7f4:	f3 94       	inc	r15
     7f6:	80 91 ee 25 	lds	r24, 0x25EE
     7fa:	89 30       	cpi	r24, 0x09	; 9
     7fc:	09 f0       	breq	.+2      	; 0x800 <udi_cdc_multi_getc+0x18>
     7fe:	f1 2c       	mov	r15, r1
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	c0 e4       	ldi	r28, 0x40	; 64
     806:	d1 e0       	ldi	r29, 0x01	; 1
     808:	3f b7       	in	r19, 0x3f	; 63
     80a:	f8 94       	cli
     80c:	80 91 4f 23 	lds	r24, 0x234F
     810:	90 91 50 23 	lds	r25, 0x2350
     814:	20 91 51 23 	lds	r18, 0x2351
     818:	3f bf       	out	0x3f, r19	; 63
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	f9 01       	movw	r30, r18
     81e:	ee 0f       	add	r30, r30
     820:	ff 1f       	adc	r31, r31
     822:	ee 5a       	subi	r30, 0xAE	; 174
     824:	fc 4d       	sbci	r31, 0xDC	; 220
     826:	40 81       	ld	r20, Z
     828:	51 81       	ldd	r21, Z+1	; 0x01
     82a:	84 17       	cp	r24, r20
     82c:	95 07       	cpc	r25, r21
     82e:	30 f0       	brcs	.+12     	; 0x83c <udi_cdc_multi_getc+0x54>
     830:	80 91 d6 25 	lds	r24, 0x25D6
     834:	81 11       	cpse	r24, r1
     836:	e8 cf       	rjmp	.-48     	; 0x808 <udi_cdc_multi_getc+0x20>
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	1d c0       	rjmp	.+58     	; 0x876 <udi_cdc_multi_getc+0x8e>
     83c:	2c 9f       	mul	r18, r28
     83e:	f0 01       	movw	r30, r0
     840:	2d 9f       	mul	r18, r29
     842:	f0 0d       	add	r31, r0
     844:	3c 9f       	mul	r19, r28
     846:	f0 0d       	add	r31, r0
     848:	11 24       	eor	r1, r1
     84a:	e8 0f       	add	r30, r24
     84c:	f9 1f       	adc	r31, r25
     84e:	ea 5a       	subi	r30, 0xAA	; 170
     850:	fc 4d       	sbci	r31, 0xDC	; 220
     852:	20 81       	ld	r18, Z
     854:	8b 01       	movw	r16, r22
     856:	02 2b       	or	r16, r18
     858:	01 96       	adiw	r24, 0x01	; 1
     85a:	80 93 4f 23 	sts	0x234F, r24
     85e:	90 93 50 23 	sts	0x2350, r25
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	12 df       	rcall	.-476    	; 0x68a <udi_cdc_rx_start>
     866:	ff 20       	and	r15, r15
     868:	21 f0       	breq	.+8      	; 0x872 <udi_cdc_multi_getc+0x8a>
     86a:	70 2f       	mov	r23, r16
     86c:	66 27       	eor	r22, r22
     86e:	f1 2c       	mov	r15, r1
     870:	cb cf       	rjmp	.-106    	; 0x808 <udi_cdc_multi_getc+0x20>
     872:	80 2f       	mov	r24, r16
     874:	91 2f       	mov	r25, r17
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	ff 90       	pop	r15
     880:	08 95       	ret

00000882 <udi_cdc_getc>:
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	b1 cf       	rjmp	.-158    	; 0x7e8 <udi_cdc_multi_getc>
     886:	08 95       	ret

00000888 <udi_cdc_multi_get_free_tx_buffer>:
     888:	9f b7       	in	r25, 0x3f	; 63
     88a:	f8 94       	cli
     88c:	80 91 c8 20 	lds	r24, 0x20C8
     890:	e8 2f       	mov	r30, r24
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	ee 0f       	add	r30, r30
     896:	ff 1f       	adc	r31, r31
     898:	e7 53       	subi	r30, 0x37	; 55
     89a:	ff 4d       	sbci	r31, 0xDF	; 223
     89c:	20 81       	ld	r18, Z
     89e:	31 81       	ldd	r19, Z+1	; 0x01
     8a0:	20 34       	cpi	r18, 0x40	; 64
     8a2:	41 e0       	ldi	r20, 0x01	; 1
     8a4:	34 07       	cpc	r19, r20
     8a6:	89 f4       	brne	.+34     	; 0x8ca <udi_cdc_multi_get_free_tx_buffer+0x42>
     8a8:	40 91 c5 20 	lds	r20, 0x20C5
     8ac:	41 11       	cpse	r20, r1
     8ae:	0d c0       	rjmp	.+26     	; 0x8ca <udi_cdc_multi_get_free_tx_buffer+0x42>
     8b0:	40 91 c4 20 	lds	r20, 0x20C4
     8b4:	41 11       	cpse	r20, r1
     8b6:	09 c0       	rjmp	.+18     	; 0x8ca <udi_cdc_multi_get_free_tx_buffer+0x42>
     8b8:	21 e0       	ldi	r18, 0x01	; 1
     8ba:	20 93 c4 20 	sts	0x20C4, r18
     8be:	81 11       	cpse	r24, r1
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	20 93 c8 20 	sts	0x20C8, r18
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	9f bf       	out	0x3f, r25	; 63
     8cc:	80 e4       	ldi	r24, 0x40	; 64
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	82 1b       	sub	r24, r18
     8d2:	93 0b       	sbc	r25, r19
     8d4:	08 95       	ret

000008d6 <udi_cdc_multi_is_tx_ready>:

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
     8d6:	d8 df       	rcall	.-80     	; 0x888 <udi_cdc_multi_get_free_tx_buffer>
     8d8:	21 e0       	ldi	r18, 0x01	; 1
     8da:	89 2b       	or	r24, r25
     8dc:	09 f4       	brne	.+2      	; 0x8e0 <udi_cdc_multi_is_tx_ready+0xa>
     8de:	20 e0       	ldi	r18, 0x00	; 0
}
     8e0:	82 2f       	mov	r24, r18
     8e2:	08 95       	ret

000008e4 <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	f7 cf       	rjmp	.-18     	; 0x8d6 <udi_cdc_multi_is_tx_ready>
}
     8e8:	08 95       	ret

000008ea <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     8ea:	ff 92       	push	r15
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	f6 2e       	mov	r15, r22
     8f6:	17 2f       	mov	r17, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     8f8:	01 e0       	ldi	r16, 0x01	; 1
     8fa:	80 91 ee 25 	lds	r24, 0x25EE
     8fe:	89 30       	cpi	r24, 0x09	; 9
     900:	09 f0       	breq	.+2      	; 0x904 <udi_cdc_multi_putc+0x1a>
     902:	00 e0       	ldi	r16, 0x00	; 0
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     904:	c0 e4       	ldi	r28, 0x40	; 64
     906:	d1 e0       	ldi	r29, 0x01	; 1

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	e5 df       	rcall	.-54     	; 0x8d6 <udi_cdc_multi_is_tx_ready>
     90c:	81 11       	cpse	r24, r1
     90e:	07 c0       	rjmp	.+14     	; 0x91e <udi_cdc_multi_putc+0x34>
		if (!udi_cdc_data_running) {
     910:	80 91 d6 25 	lds	r24, 0x25D6
     914:	81 11       	cpse	r24, r1
     916:	f8 cf       	rjmp	.-16     	; 0x908 <udi_cdc_multi_putc+0x1e>
			return false;
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	28 c0       	rjmp	.+80     	; 0x96e <udi_cdc_multi_putc+0x84>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     91e:	6f b7       	in	r22, 0x3f	; 63
	cpu_irq_disable();
     920:	f8 94       	cli
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     922:	20 91 c8 20 	lds	r18, 0x20C8
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	f9 01       	movw	r30, r18
     92a:	ee 0f       	add	r30, r30
     92c:	ff 1f       	adc	r31, r31
     92e:	e7 53       	subi	r30, 0x37	; 55
     930:	ff 4d       	sbci	r31, 0xDF	; 223
     932:	80 81       	ld	r24, Z
     934:	91 81       	ldd	r25, Z+1	; 0x01
     936:	ac 01       	movw	r20, r24
     938:	4f 5f       	subi	r20, 0xFF	; 255
     93a:	5f 4f       	sbci	r21, 0xFF	; 255
     93c:	40 83       	st	Z, r20
     93e:	51 83       	std	Z+1, r21	; 0x01
     940:	2c 9f       	mul	r18, r28
     942:	f0 01       	movw	r30, r0
     944:	2d 9f       	mul	r18, r29
     946:	f0 0d       	add	r31, r0
     948:	3c 9f       	mul	r19, r28
     94a:	f0 0d       	add	r31, r0
     94c:	11 24       	eor	r1, r1
     94e:	8e 0f       	add	r24, r30
     950:	9f 1f       	adc	r25, r31
     952:	fc 01       	movw	r30, r24
     954:	e2 53       	subi	r30, 0x32	; 50
     956:	ff 4d       	sbci	r31, 0xDF	; 223
     958:	f0 82       	st	Z, r15
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     95a:	6f bf       	out	0x3f, r22	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
     95c:	00 23       	and	r16, r16
     95e:	29 f0       	breq	.+10     	; 0x96a <udi_cdc_multi_putc+0x80>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     960:	f1 2e       	mov	r15, r17
     962:	11 0f       	add	r17, r17
     964:	11 0b       	sbc	r17, r17
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
     966:	00 e0       	ldi	r16, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
     968:	cf cf       	rjmp	.-98     	; 0x908 <udi_cdc_multi_putc+0x1e>
	}
	return true;
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	90 e0       	ldi	r25, 0x00	; 0
}
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	ff 90       	pop	r15
     978:	08 95       	ret

0000097a <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
     97a:	bc 01       	movw	r22, r24
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	b5 cf       	rjmp	.-150    	; 0x8ea <udi_cdc_multi_putc>
}
     980:	08 95       	ret

00000982 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     982:	e0 91 f4 25 	lds	r30, 0x25F4
     986:	f0 91 f5 25 	lds	r31, 0x25F5
     98a:	01 90       	ld	r0, Z+
     98c:	f0 81       	ld	r31, Z
     98e:	e0 2d       	mov	r30, r0
     990:	22 81       	ldd	r18, Z+2	; 0x02
     992:	33 81       	ldd	r19, Z+3	; 0x03
     994:	2e 0f       	add	r18, r30
     996:	3f 1f       	adc	r19, r31
     998:	fc 01       	movw	r30, r24
     99a:	40 81       	ld	r20, Z
     99c:	e4 0f       	add	r30, r20
     99e:	f1 1d       	adc	r31, r1
     9a0:	e2 17       	cp	r30, r18
     9a2:	f3 07       	cpc	r31, r19
     9a4:	a0 f4       	brcc	.+40     	; 0x9ce <udc_next_desc_in_iface+0x4c>
     9a6:	81 81       	ldd	r24, Z+1	; 0x01
     9a8:	84 30       	cpi	r24, 0x04	; 4
     9aa:	a1 f0       	breq	.+40     	; 0x9d4 <udc_next_desc_in_iface+0x52>
     9ac:	86 13       	cpse	r24, r22
     9ae:	06 c0       	rjmp	.+12     	; 0x9bc <udc_next_desc_in_iface+0x3a>
     9b0:	14 c0       	rjmp	.+40     	; 0x9da <udc_next_desc_in_iface+0x58>
     9b2:	81 81       	ldd	r24, Z+1	; 0x01
     9b4:	84 30       	cpi	r24, 0x04	; 4
     9b6:	a1 f0       	breq	.+40     	; 0x9e0 <udc_next_desc_in_iface+0x5e>
     9b8:	86 17       	cp	r24, r22
     9ba:	a9 f0       	breq	.+42     	; 0x9e6 <udc_next_desc_in_iface+0x64>
     9bc:	80 81       	ld	r24, Z
     9be:	e8 0f       	add	r30, r24
     9c0:	f1 1d       	adc	r31, r1
     9c2:	e2 17       	cp	r30, r18
     9c4:	f3 07       	cpc	r31, r19
     9c6:	a8 f3       	brcs	.-22     	; 0x9b2 <udc_next_desc_in_iface+0x30>
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	08 95       	ret
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	08 95       	ret
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	08 95       	ret
     9da:	8e 2f       	mov	r24, r30
     9dc:	9f 2f       	mov	r25, r31
     9de:	08 95       	ret
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	08 95       	ret
     9e6:	8e 2f       	mov	r24, r30
     9e8:	9f 2f       	mov	r25, r31
     9ea:	08 95       	ret

000009ec <udc_valid_address>:
     9ec:	80 91 52 27 	lds	r24, 0x2752
     9f0:	8f 77       	andi	r24, 0x7F	; 127
     9f2:	35 c7       	rjmp	.+3690   	; 0x185e <udd_set_address>
     9f4:	08 95       	ret

000009f6 <udc_update_iface_desc>:
     9f6:	90 91 f6 25 	lds	r25, 0x25F6
     9fa:	99 23       	and	r25, r25
     9fc:	81 f1       	breq	.+96     	; 0xa5e <udc_update_iface_desc+0x68>
     9fe:	e0 91 f4 25 	lds	r30, 0x25F4
     a02:	f0 91 f5 25 	lds	r31, 0x25F5
     a06:	01 90       	ld	r0, Z+
     a08:	f0 81       	ld	r31, Z
     a0a:	e0 2d       	mov	r30, r0
     a0c:	94 81       	ldd	r25, Z+4	; 0x04
     a0e:	89 17       	cp	r24, r25
     a10:	40 f5       	brcc	.+80     	; 0xa62 <udc_update_iface_desc+0x6c>
     a12:	e0 93 f2 25 	sts	0x25F2, r30
     a16:	f0 93 f3 25 	sts	0x25F3, r31
     a1a:	22 81       	ldd	r18, Z+2	; 0x02
     a1c:	33 81       	ldd	r19, Z+3	; 0x03
     a1e:	2e 0f       	add	r18, r30
     a20:	3f 1f       	adc	r19, r31
     a22:	e2 17       	cp	r30, r18
     a24:	f3 07       	cpc	r31, r19
     a26:	f8 f4       	brcc	.+62     	; 0xa66 <udc_update_iface_desc+0x70>
     a28:	91 81       	ldd	r25, Z+1	; 0x01
     a2a:	94 30       	cpi	r25, 0x04	; 4
     a2c:	61 f4       	brne	.+24     	; 0xa46 <udc_update_iface_desc+0x50>
     a2e:	92 81       	ldd	r25, Z+2	; 0x02
     a30:	98 13       	cpse	r25, r24
     a32:	09 c0       	rjmp	.+18     	; 0xa46 <udc_update_iface_desc+0x50>
     a34:	93 81       	ldd	r25, Z+3	; 0x03
     a36:	96 13       	cpse	r25, r22
     a38:	06 c0       	rjmp	.+12     	; 0xa46 <udc_update_iface_desc+0x50>
     a3a:	e0 93 f2 25 	sts	0x25F2, r30
     a3e:	f0 93 f3 25 	sts	0x25F3, r31
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	08 95       	ret
     a46:	90 81       	ld	r25, Z
     a48:	e9 0f       	add	r30, r25
     a4a:	f1 1d       	adc	r31, r1
     a4c:	e2 17       	cp	r30, r18
     a4e:	f3 07       	cpc	r31, r19
     a50:	58 f3       	brcs	.-42     	; 0xa28 <udc_update_iface_desc+0x32>
     a52:	e0 93 f2 25 	sts	0x25F2, r30
     a56:	f0 93 f3 25 	sts	0x25F3, r31
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	08 95       	ret
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	08 95       	ret
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	08 95       	ret
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	08 95       	ret

00000a6a <udc_iface_disable>:
     a6a:	ff 92       	push	r15
     a6c:	0f 93       	push	r16
     a6e:	1f 93       	push	r17
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	c8 2f       	mov	r28, r24
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	be df       	rcall	.-132    	; 0x9f6 <udc_update_iface_desc>
     a7a:	f8 2e       	mov	r15, r24
     a7c:	88 23       	and	r24, r24
     a7e:	81 f1       	breq	.+96     	; 0xae0 <udc_iface_disable+0x76>
     a80:	a0 91 f4 25 	lds	r26, 0x25F4
     a84:	b0 91 f5 25 	lds	r27, 0x25F5
     a88:	ec 2f       	mov	r30, r28
     a8a:	f0 e0       	ldi	r31, 0x00	; 0
     a8c:	ee 0f       	add	r30, r30
     a8e:	ff 1f       	adc	r31, r31
     a90:	12 96       	adiw	r26, 0x02	; 2
     a92:	2d 91       	ld	r18, X+
     a94:	3c 91       	ld	r19, X
     a96:	13 97       	sbiw	r26, 0x03	; 3
     a98:	e2 0f       	add	r30, r18
     a9a:	f3 1f       	adc	r31, r19
     a9c:	00 81       	ld	r16, Z
     a9e:	11 81       	ldd	r17, Z+1	; 0x01
     aa0:	d8 01       	movw	r26, r16
     aa2:	16 96       	adiw	r26, 0x06	; 6
     aa4:	ed 91       	ld	r30, X+
     aa6:	fc 91       	ld	r31, X
     aa8:	17 97       	sbiw	r26, 0x07	; 7
     aaa:	19 95       	eicall
     aac:	68 2f       	mov	r22, r24
     aae:	8c 2f       	mov	r24, r28
     ab0:	a2 df       	rcall	.-188    	; 0x9f6 <udc_update_iface_desc>
     ab2:	f8 2e       	mov	r15, r24
     ab4:	88 23       	and	r24, r24
     ab6:	a1 f0       	breq	.+40     	; 0xae0 <udc_iface_disable+0x76>
     ab8:	c0 91 f2 25 	lds	r28, 0x25F2
     abc:	d0 91 f3 25 	lds	r29, 0x25F3
     ac0:	65 e0       	ldi	r22, 0x05	; 5
     ac2:	ce 01       	movw	r24, r28
     ac4:	5e df       	rcall	.-324    	; 0x982 <udc_next_desc_in_iface>
     ac6:	ec 01       	movw	r28, r24
     ac8:	00 97       	sbiw	r24, 0x00	; 0
     aca:	21 f0       	breq	.+8      	; 0xad4 <udc_iface_disable+0x6a>
     acc:	8a 81       	ldd	r24, Y+2	; 0x02
     ace:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <udd_ep_free>
     ad2:	f6 cf       	rjmp	.-20     	; 0xac0 <udc_iface_disable+0x56>
     ad4:	d8 01       	movw	r26, r16
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	ed 91       	ld	r30, X+
     ada:	fc 91       	ld	r31, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	19 95       	eicall
     ae0:	8f 2d       	mov	r24, r15
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	08 95       	ret

00000aee <udc_iface_enable>:
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	18 2f       	mov	r17, r24
     af6:	7f df       	rcall	.-258    	; 0x9f6 <udc_update_iface_desc>
     af8:	88 23       	and	r24, r24
     afa:	39 f1       	breq	.+78     	; 0xb4a <udc_iface_enable+0x5c>
     afc:	c0 91 f2 25 	lds	r28, 0x25F2
     b00:	d0 91 f3 25 	lds	r29, 0x25F3
     b04:	65 e0       	ldi	r22, 0x05	; 5
     b06:	ce 01       	movw	r24, r28
     b08:	3c df       	rcall	.-392    	; 0x982 <udc_next_desc_in_iface>
     b0a:	ec 01       	movw	r28, r24
     b0c:	00 97       	sbiw	r24, 0x00	; 0
     b0e:	41 f0       	breq	.+16     	; 0xb20 <udc_iface_enable+0x32>
     b10:	4c 81       	ldd	r20, Y+4	; 0x04
     b12:	5d 81       	ldd	r21, Y+5	; 0x05
     b14:	6b 81       	ldd	r22, Y+3	; 0x03
     b16:	8a 81       	ldd	r24, Y+2	; 0x02
     b18:	b9 d6       	rcall	.+3442   	; 0x188c <udd_ep_alloc>
     b1a:	81 11       	cpse	r24, r1
     b1c:	f3 cf       	rjmp	.-26     	; 0xb04 <udc_iface_enable+0x16>
     b1e:	15 c0       	rjmp	.+42     	; 0xb4a <udc_iface_enable+0x5c>
     b20:	a0 91 f4 25 	lds	r26, 0x25F4
     b24:	b0 91 f5 25 	lds	r27, 0x25F5
     b28:	81 2f       	mov	r24, r17
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	88 0f       	add	r24, r24
     b2e:	99 1f       	adc	r25, r25
     b30:	12 96       	adiw	r26, 0x02	; 2
     b32:	ed 91       	ld	r30, X+
     b34:	fc 91       	ld	r31, X
     b36:	13 97       	sbiw	r26, 0x03	; 3
     b38:	e8 0f       	add	r30, r24
     b3a:	f9 1f       	adc	r31, r25
     b3c:	01 90       	ld	r0, Z+
     b3e:	f0 81       	ld	r31, Z
     b40:	e0 2d       	mov	r30, r0
     b42:	01 90       	ld	r0, Z+
     b44:	f0 81       	ld	r31, Z
     b46:	e0 2d       	mov	r30, r0
     b48:	19 95       	eicall
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	08 95       	ret

00000b52 <udc_start>:
     b52:	16 c6       	rjmp	.+3116   	; 0x1780 <udd_enable>
     b54:	08 95       	ret

00000b56 <udc_reset>:
     b56:	cf 93       	push	r28
     b58:	80 91 f6 25 	lds	r24, 0x25F6
     b5c:	88 23       	and	r24, r24
     b5e:	c1 f0       	breq	.+48     	; 0xb90 <udc_reset+0x3a>
     b60:	e0 91 f4 25 	lds	r30, 0x25F4
     b64:	f0 91 f5 25 	lds	r31, 0x25F5
     b68:	01 90       	ld	r0, Z+
     b6a:	f0 81       	ld	r31, Z
     b6c:	e0 2d       	mov	r30, r0
     b6e:	84 81       	ldd	r24, Z+4	; 0x04
     b70:	88 23       	and	r24, r24
     b72:	71 f0       	breq	.+28     	; 0xb90 <udc_reset+0x3a>
     b74:	c0 e0       	ldi	r28, 0x00	; 0
     b76:	8c 2f       	mov	r24, r28
     b78:	78 df       	rcall	.-272    	; 0xa6a <udc_iface_disable>
     b7a:	cf 5f       	subi	r28, 0xFF	; 255
     b7c:	e0 91 f4 25 	lds	r30, 0x25F4
     b80:	f0 91 f5 25 	lds	r31, 0x25F5
     b84:	01 90       	ld	r0, Z+
     b86:	f0 81       	ld	r31, Z
     b88:	e0 2d       	mov	r30, r0
     b8a:	84 81       	ldd	r24, Z+4	; 0x04
     b8c:	c8 17       	cp	r28, r24
     b8e:	98 f3       	brcs	.-26     	; 0xb76 <udc_reset+0x20>
     b90:	10 92 f6 25 	sts	0x25F6, r1
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	80 93 fa 25 	sts	0x25FA, r24
     b9c:	90 93 fb 25 	sts	0x25FB, r25
     ba0:	cf 91       	pop	r28
     ba2:	08 95       	ret

00000ba4 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     ba4:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     ba6:	80 91 f6 25 	lds	r24, 0x25F6
     baa:	88 23       	and	r24, r24
     bac:	41 f1       	breq	.+80     	; 0xbfe <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     bae:	e0 91 f4 25 	lds	r30, 0x25F4
     bb2:	f0 91 f5 25 	lds	r31, 0x25F5
     bb6:	a0 81       	ld	r26, Z
     bb8:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     bba:	14 96       	adiw	r26, 0x04	; 4
     bbc:	8c 91       	ld	r24, X
     bbe:	88 23       	and	r24, r24
     bc0:	f1 f0       	breq	.+60     	; 0xbfe <udc_sof_notify+0x5a>
     bc2:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     bc4:	8c 2f       	mov	r24, r28
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	88 0f       	add	r24, r24
     bca:	99 1f       	adc	r25, r25
     bcc:	02 80       	ldd	r0, Z+2	; 0x02
     bce:	f3 81       	ldd	r31, Z+3	; 0x03
     bd0:	e0 2d       	mov	r30, r0
     bd2:	e8 0f       	add	r30, r24
     bd4:	f9 1f       	adc	r31, r25
     bd6:	01 90       	ld	r0, Z+
     bd8:	f0 81       	ld	r31, Z
     bda:	e0 2d       	mov	r30, r0
     bdc:	00 84       	ldd	r0, Z+8	; 0x08
     bde:	f1 85       	ldd	r31, Z+9	; 0x09
     be0:	e0 2d       	mov	r30, r0
     be2:	30 97       	sbiw	r30, 0x00	; 0
     be4:	09 f0       	breq	.+2      	; 0xbe8 <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     be6:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     be8:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     bea:	e0 91 f4 25 	lds	r30, 0x25F4
     bee:	f0 91 f5 25 	lds	r31, 0x25F5
     bf2:	a0 81       	ld	r26, Z
     bf4:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     bf6:	14 96       	adiw	r26, 0x04	; 4
     bf8:	8c 91       	ld	r24, X
     bfa:	c8 17       	cp	r28, r24
     bfc:	18 f3       	brcs	.-58     	; 0xbc4 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     bfe:	cf 91       	pop	r28
     c00:	08 95       	ret

00000c02 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     c02:	ef 92       	push	r14
     c04:	ff 92       	push	r15
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     c0e:	10 92 5a 27 	sts	0x275A, r1
     c12:	10 92 5b 27 	sts	0x275B, r1
	udd_g_ctrlreq.callback = NULL;
     c16:	10 92 5c 27 	sts	0x275C, r1
     c1a:	10 92 5d 27 	sts	0x275D, r1
	udd_g_ctrlreq.over_under_run = NULL;
     c1e:	10 92 5e 27 	sts	0x275E, r1
     c22:	10 92 5f 27 	sts	0x275F, r1

	if (Udd_setup_is_in()) {
     c26:	20 91 50 27 	lds	r18, 0x2750
     c2a:	22 23       	and	r18, r18
     c2c:	0c f0       	brlt	.+2      	; 0xc30 <udc_process_setup+0x2e>
     c2e:	8b c2       	rjmp	.+1302   	; 0x1146 <udc_process_setup+0x544>
		if (udd_g_ctrlreq.req.wLength == 0) {
     c30:	80 91 56 27 	lds	r24, 0x2756
     c34:	90 91 57 27 	lds	r25, 0x2757
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	09 f0       	breq	.+2      	; 0xc3e <udc_process_setup+0x3c>
     c3c:	89 c2       	rjmp	.+1298   	; 0x1150 <udc_process_setup+0x54e>
     c3e:	7f c2       	rjmp	.+1278   	; 0x113e <udc_process_setup+0x53c>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     c40:	2f 71       	andi	r18, 0x1F	; 31
     c42:	09 f0       	breq	.+2      	; 0xc46 <udc_process_setup+0x44>
     c44:	b1 c0       	rjmp	.+354    	; 0xda8 <udc_process_setup+0x1a6>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     c46:	30 91 51 27 	lds	r19, 0x2751
     c4a:	36 30       	cpi	r19, 0x06	; 6
     c4c:	81 f0       	breq	.+32     	; 0xc6e <udc_process_setup+0x6c>
     c4e:	38 30       	cpi	r19, 0x08	; 8
     c50:	09 f4       	brne	.+2      	; 0xc54 <udc_process_setup+0x52>
     c52:	9f c0       	rjmp	.+318    	; 0xd92 <udc_process_setup+0x190>
     c54:	31 11       	cpse	r19, r1
     c56:	a8 c0       	rjmp	.+336    	; 0xda8 <udc_process_setup+0x1a6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     c58:	02 97       	sbiw	r24, 0x02	; 2
     c5a:	39 f4       	brne	.+14     	; 0xc6a <udc_process_setup+0x68>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     c5c:	62 e0       	ldi	r22, 0x02	; 2
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	8a ef       	ldi	r24, 0xFA	; 250
     c62:	95 e2       	ldi	r25, 0x25	; 37
     c64:	0a d6       	rcall	.+3092   	; 0x187a <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
     c66:	01 e0       	ldi	r16, 0x01	; 1
     c68:	ed c1       	rjmp	.+986    	; 0x1044 <udc_process_setup+0x442>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     c6a:	00 e0       	ldi	r16, 0x00	; 0
     c6c:	eb c1       	rjmp	.+982    	; 0x1044 <udc_process_setup+0x442>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     c6e:	20 91 52 27 	lds	r18, 0x2752
     c72:	30 91 53 27 	lds	r19, 0x2753

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     c76:	83 2f       	mov	r24, r19
     c78:	99 27       	eor	r25, r25
     c7a:	82 30       	cpi	r24, 0x02	; 2
     c7c:	91 05       	cpc	r25, r1
     c7e:	99 f0       	breq	.+38     	; 0xca6 <udc_process_setup+0xa4>
     c80:	1c f4       	brge	.+6      	; 0xc88 <udc_process_setup+0x86>
     c82:	01 97       	sbiw	r24, 0x01	; 1
     c84:	39 f0       	breq	.+14     	; 0xc94 <udc_process_setup+0x92>
     c86:	7b c0       	rjmp	.+246    	; 0xd7e <udc_process_setup+0x17c>
     c88:	83 30       	cpi	r24, 0x03	; 3
     c8a:	91 05       	cpc	r25, r1
     c8c:	d9 f1       	breq	.+118    	; 0xd04 <udc_process_setup+0x102>
     c8e:	0f 97       	sbiw	r24, 0x0f	; 15
     c90:	59 f1       	breq	.+86     	; 0xce8 <udc_process_setup+0xe6>
     c92:	75 c0       	rjmp	.+234    	; 0xd7e <udc_process_setup+0x17c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     c94:	80 91 20 20 	lds	r24, 0x2020
     c98:	90 91 21 20 	lds	r25, 0x2021
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     c9c:	dc 01       	movw	r26, r24
     c9e:	6c 91       	ld	r22, X
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	eb d5       	rcall	.+3030   	; 0x187a <udd_set_setup_payload>
     ca4:	5b c0       	rjmp	.+182    	; 0xd5c <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     ca6:	e0 91 20 20 	lds	r30, 0x2020
     caa:	f0 91 21 20 	lds	r31, 0x2021
     cae:	81 89       	ldd	r24, Z+17	; 0x11
     cb0:	28 17       	cp	r18, r24
     cb2:	08 f0       	brcs	.+2      	; 0xcb6 <udc_process_setup+0xb4>
     cb4:	66 c0       	rjmp	.+204    	; 0xd82 <udc_process_setup+0x180>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     cb6:	c9 01       	movw	r24, r18
     cb8:	99 27       	eor	r25, r25
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	e0 91 22 20 	lds	r30, 0x2022
     cc6:	f0 91 23 20 	lds	r31, 0x2023
     cca:	e8 0f       	add	r30, r24
     ccc:	f9 1f       	adc	r31, r25
     cce:	80 81       	ld	r24, Z
     cd0:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     cd2:	fc 01       	movw	r30, r24
     cd4:	62 81       	ldd	r22, Z+2	; 0x02
     cd6:	73 81       	ldd	r23, Z+3	; 0x03
     cd8:	d0 d5       	rcall	.+2976   	; 0x187a <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     cda:	e0 91 58 27 	lds	r30, 0x2758
     cde:	f0 91 59 27 	lds	r31, 0x2759
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	81 83       	std	Z+1, r24	; 0x01
     ce6:	3a c0       	rjmp	.+116    	; 0xd5c <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     ce8:	80 91 24 20 	lds	r24, 0x2024
     cec:	90 91 25 20 	lds	r25, 0x2025
     cf0:	00 97       	sbiw	r24, 0x00	; 0
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <udc_process_setup+0xf4>
     cf4:	48 c0       	rjmp	.+144    	; 0xd86 <udc_process_setup+0x184>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     cf6:	dc 01       	movw	r26, r24
     cf8:	12 96       	adiw	r26, 0x02	; 2
     cfa:	6d 91       	ld	r22, X+
     cfc:	7c 91       	ld	r23, X
     cfe:	13 97       	sbiw	r26, 0x03	; 3
     d00:	bc d5       	rcall	.+2936   	; 0x187a <udd_set_setup_payload>
     d02:	2c c0       	rjmp	.+88     	; 0xd5c <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     d04:	33 27       	eor	r19, r19
     d06:	21 30       	cpi	r18, 0x01	; 1
     d08:	31 05       	cpc	r19, r1
     d0a:	59 f0       	breq	.+22     	; 0xd22 <udc_process_setup+0x120>
     d0c:	20 f0       	brcs	.+8      	; 0xd16 <udc_process_setup+0x114>
     d0e:	22 30       	cpi	r18, 0x02	; 2
     d10:	31 05       	cpc	r19, r1
     d12:	59 f0       	breq	.+22     	; 0xd2a <udc_process_setup+0x128>
     d14:	3a c0       	rjmp	.+116    	; 0xd8a <udc_process_setup+0x188>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     d16:	64 e0       	ldi	r22, 0x04	; 4
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	8e eb       	ldi	r24, 0xBE	; 190
     d1c:	90 e2       	ldi	r25, 0x20	; 32
     d1e:	ad d5       	rcall	.+2906   	; 0x187a <udd_set_setup_payload>
     d20:	1d c0       	rjmp	.+58     	; 0xd5c <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
     d22:	84 eb       	ldi	r24, 0xB4	; 180
     d24:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     d26:	29 e0       	ldi	r18, 0x09	; 9
     d28:	03 c0       	rjmp	.+6      	; 0xd30 <udc_process_setup+0x12e>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
     d2a:	84 ea       	ldi	r24, 0xA4	; 164
     d2c:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     d2e:	2f e0       	ldi	r18, 0x0F	; 15
     d30:	38 2f       	mov	r19, r24
     d32:	a6 e8       	ldi	r26, 0x86	; 134
     d34:	b0 e2       	ldi	r27, 0x20	; 32
     d36:	e8 2f       	mov	r30, r24
     d38:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     d3a:	81 91       	ld	r24, Z+
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	8d 93       	st	X+, r24
     d40:	9d 93       	st	X+, r25
     d42:	8e 2f       	mov	r24, r30
     d44:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
     d46:	82 17       	cp	r24, r18
     d48:	c0 f3       	brcs	.-16     	; 0xd3a <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     d4a:	22 0f       	add	r18, r18
     d4c:	62 e0       	ldi	r22, 0x02	; 2
     d4e:	62 0f       	add	r22, r18
     d50:	60 93 84 20 	sts	0x2084, r22
		udd_set_setup_payload(
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	84 e8       	ldi	r24, 0x84	; 132
     d58:	90 e2       	ldi	r25, 0x20	; 32
     d5a:	8f d5       	rcall	.+2846   	; 0x187a <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     d5c:	80 91 56 27 	lds	r24, 0x2756
     d60:	90 91 57 27 	lds	r25, 0x2757
     d64:	20 91 5a 27 	lds	r18, 0x275A
     d68:	30 91 5b 27 	lds	r19, 0x275B
     d6c:	82 17       	cp	r24, r18
     d6e:	93 07       	cpc	r25, r19
     d70:	70 f4       	brcc	.+28     	; 0xd8e <udc_process_setup+0x18c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     d72:	80 93 5a 27 	sts	0x275A, r24
     d76:	90 93 5b 27 	sts	0x275B, r25
	}
	return true;
     d7a:	01 e0       	ldi	r16, 0x01	; 1
     d7c:	63 c1       	rjmp	.+710    	; 0x1044 <udc_process_setup+0x442>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     d7e:	00 e0       	ldi	r16, 0x00	; 0
     d80:	61 c1       	rjmp	.+706    	; 0x1044 <udc_process_setup+0x442>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
     d82:	00 e0       	ldi	r16, 0x00	; 0
     d84:	5f c1       	rjmp	.+702    	; 0x1044 <udc_process_setup+0x442>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
     d86:	00 e0       	ldi	r16, 0x00	; 0
     d88:	5d c1       	rjmp	.+698    	; 0x1044 <udc_process_setup+0x442>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
     d8a:	00 e0       	ldi	r16, 0x00	; 0
     d8c:	5b c1       	rjmp	.+694    	; 0x1044 <udc_process_setup+0x442>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
     d8e:	01 e0       	ldi	r16, 0x01	; 1
     d90:	59 c1       	rjmp	.+690    	; 0x1044 <udc_process_setup+0x442>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     d92:	01 97       	sbiw	r24, 0x01	; 1
     d94:	39 f4       	brne	.+14     	; 0xda4 <udc_process_setup+0x1a2>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     d96:	61 e0       	ldi	r22, 0x01	; 1
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	86 ef       	ldi	r24, 0xF6	; 246
     d9c:	95 e2       	ldi	r25, 0x25	; 37
     d9e:	6d d5       	rcall	.+2778   	; 0x187a <udd_set_setup_payload>
	return true;
     da0:	01 e0       	ldi	r16, 0x01	; 1
     da2:	50 c1       	rjmp	.+672    	; 0x1044 <udc_process_setup+0x442>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
     da4:	00 e0       	ldi	r16, 0x00	; 0
     da6:	4e c1       	rjmp	.+668    	; 0x1044 <udc_process_setup+0x442>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     da8:	21 30       	cpi	r18, 0x01	; 1
     daa:	09 f0       	breq	.+2      	; 0xdae <udc_process_setup+0x1ac>
     dac:	3f c0       	rjmp	.+126    	; 0xe2c <udc_process_setup+0x22a>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     dae:	30 91 51 27 	lds	r19, 0x2751
     db2:	3a 30       	cpi	r19, 0x0A	; 10
     db4:	d9 f5       	brne	.+118    	; 0xe2c <udc_process_setup+0x22a>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	99 f5       	brne	.+102    	; 0xe20 <udc_process_setup+0x21e>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     dba:	80 91 f6 25 	lds	r24, 0x25F6
     dbe:	88 23       	and	r24, r24
     dc0:	89 f1       	breq	.+98     	; 0xe24 <udc_process_setup+0x222>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     dc2:	c0 91 54 27 	lds	r28, 0x2754
     dc6:	d0 91 55 27 	lds	r29, 0x2755
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     dca:	e0 90 f4 25 	lds	r14, 0x25F4
     dce:	f0 90 f5 25 	lds	r15, 0x25F5
     dd2:	d7 01       	movw	r26, r14
     dd4:	ed 91       	ld	r30, X+
     dd6:	fc 91       	ld	r31, X
     dd8:	84 81       	ldd	r24, Z+4	; 0x04
     dda:	c8 17       	cp	r28, r24
     ddc:	28 f5       	brcc	.+74     	; 0xe28 <udc_process_setup+0x226>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	8c 2f       	mov	r24, r28
     de2:	09 de       	rcall	.-1006   	; 0x9f6 <udc_update_iface_desc>
     de4:	08 2f       	mov	r16, r24
     de6:	88 23       	and	r24, r24
     de8:	09 f4       	brne	.+2      	; 0xdec <udc_process_setup+0x1ea>
     dea:	2c c1       	rjmp	.+600    	; 0x1044 <udc_process_setup+0x442>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     dec:	ce 01       	movw	r24, r28
     dee:	99 27       	eor	r25, r25
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	d7 01       	movw	r26, r14
     df6:	12 96       	adiw	r26, 0x02	; 2
     df8:	ed 91       	ld	r30, X+
     dfa:	fc 91       	ld	r31, X
     dfc:	13 97       	sbiw	r26, 0x03	; 3
     dfe:	e8 0f       	add	r30, r24
     e00:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     e02:	01 90       	ld	r0, Z+
     e04:	f0 81       	ld	r31, Z
     e06:	e0 2d       	mov	r30, r0
     e08:	06 80       	ldd	r0, Z+6	; 0x06
     e0a:	f7 81       	ldd	r31, Z+7	; 0x07
     e0c:	e0 2d       	mov	r30, r0
     e0e:	19 95       	eicall
     e10:	80 93 f8 25 	sts	0x25F8, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     e14:	61 e0       	ldi	r22, 0x01	; 1
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	88 ef       	ldi	r24, 0xF8	; 248
     e1a:	95 e2       	ldi	r25, 0x25	; 37
     e1c:	2e d5       	rcall	.+2652   	; 0x187a <udd_set_setup_payload>
     e1e:	12 c1       	rjmp	.+548    	; 0x1044 <udc_process_setup+0x442>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
     e20:	00 e0       	ldi	r16, 0x00	; 0
     e22:	10 c1       	rjmp	.+544    	; 0x1044 <udc_process_setup+0x442>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     e24:	00 e0       	ldi	r16, 0x00	; 0
     e26:	0e c1       	rjmp	.+540    	; 0x1044 <udc_process_setup+0x442>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     e28:	00 e0       	ldi	r16, 0x00	; 0
     e2a:	0c c1       	rjmp	.+536    	; 0x1044 <udc_process_setup+0x442>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     e2c:	22 30       	cpi	r18, 0x02	; 2
     e2e:	09 f0       	breq	.+2      	; 0xe32 <udc_process_setup+0x230>
     e30:	0b c1       	rjmp	.+534    	; 0x1048 <udc_process_setup+0x446>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     e32:	20 91 51 27 	lds	r18, 0x2751
     e36:	21 11       	cpse	r18, r1
     e38:	00 c1       	rjmp	.+512    	; 0x103a <udc_process_setup+0x438>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     e3a:	02 97       	sbiw	r24, 0x02	; 2
     e3c:	79 f4       	brne	.+30     	; 0xe5c <udc_process_setup+0x25a>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     e3e:	80 91 54 27 	lds	r24, 0x2754
     e42:	85 d5       	rcall	.+2826   	; 0x194e <udd_ep_is_halted>
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	80 93 f0 25 	sts	0x25F0, r24
     e4a:	90 93 f1 25 	sts	0x25F1, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     e4e:	62 e0       	ldi	r22, 0x02	; 2
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	80 ef       	ldi	r24, 0xF0	; 240
     e54:	95 e2       	ldi	r25, 0x25	; 37
     e56:	11 d5       	rcall	.+2594   	; 0x187a <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
     e58:	01 e0       	ldi	r16, 0x01	; 1
     e5a:	f4 c0       	rjmp	.+488    	; 0x1044 <udc_process_setup+0x442>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
     e5c:	00 e0       	ldi	r16, 0x00	; 0
     e5e:	f2 c0       	rjmp	.+484    	; 0x1044 <udc_process_setup+0x442>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     e60:	2f 71       	andi	r18, 0x1F	; 31
     e62:	09 f0       	breq	.+2      	; 0xe66 <udc_process_setup+0x264>
     e64:	90 c0       	rjmp	.+288    	; 0xf86 <udc_process_setup+0x384>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     e66:	80 91 51 27 	lds	r24, 0x2751
     e6a:	83 30       	cpi	r24, 0x03	; 3
     e6c:	09 f4       	brne	.+2      	; 0xe70 <udc_process_setup+0x26e>
     e6e:	e7 c0       	rjmp	.+462    	; 0x103e <udc_process_setup+0x43c>
     e70:	18 f4       	brcc	.+6      	; 0xe78 <udc_process_setup+0x276>
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	b1 f0       	breq	.+44     	; 0xea2 <udc_process_setup+0x2a0>
     e76:	87 c0       	rjmp	.+270    	; 0xf86 <udc_process_setup+0x384>
     e78:	85 30       	cpi	r24, 0x05	; 5
     e7a:	19 f0       	breq	.+6      	; 0xe82 <udc_process_setup+0x280>
     e7c:	89 30       	cpi	r24, 0x09	; 9
     e7e:	61 f1       	breq	.+88     	; 0xed8 <udc_process_setup+0x2d6>
     e80:	82 c0       	rjmp	.+260    	; 0xf86 <udc_process_setup+0x384>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     e82:	80 91 56 27 	lds	r24, 0x2756
     e86:	90 91 57 27 	lds	r25, 0x2757
     e8a:	89 2b       	or	r24, r25
     e8c:	41 f4       	brne	.+16     	; 0xe9e <udc_process_setup+0x29c>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     e8e:	86 ef       	ldi	r24, 0xF6	; 246
     e90:	94 e0       	ldi	r25, 0x04	; 4
     e92:	80 93 5c 27 	sts	0x275C, r24
     e96:	90 93 5d 27 	sts	0x275D, r25
	return true;
     e9a:	01 e0       	ldi	r16, 0x01	; 1
     e9c:	d3 c0       	rjmp	.+422    	; 0x1044 <udc_process_setup+0x442>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     e9e:	00 e0       	ldi	r16, 0x00	; 0
     ea0:	d1 c0       	rjmp	.+418    	; 0x1044 <udc_process_setup+0x442>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     ea2:	80 91 56 27 	lds	r24, 0x2756
     ea6:	90 91 57 27 	lds	r25, 0x2757
     eaa:	89 2b       	or	r24, r25
     eac:	89 f4       	brne	.+34     	; 0xed0 <udc_process_setup+0x2ce>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     eae:	80 91 52 27 	lds	r24, 0x2752
     eb2:	90 91 53 27 	lds	r25, 0x2753
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	69 f4       	brne	.+26     	; 0xed4 <udc_process_setup+0x2d2>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     eba:	80 91 fa 25 	lds	r24, 0x25FA
     ebe:	90 91 fb 25 	lds	r25, 0x25FB
     ec2:	8d 7f       	andi	r24, 0xFD	; 253
     ec4:	80 93 fa 25 	sts	0x25FA, r24
     ec8:	90 93 fb 25 	sts	0x25FB, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
     ecc:	01 e0       	ldi	r16, 0x01	; 1
     ece:	ba c0       	rjmp	.+372    	; 0x1044 <udc_process_setup+0x442>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     ed0:	00 e0       	ldi	r16, 0x00	; 0
     ed2:	b8 c0       	rjmp	.+368    	; 0x1044 <udc_process_setup+0x442>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
     ed4:	00 e0       	ldi	r16, 0x00	; 0
     ed6:	b6 c0       	rjmp	.+364    	; 0x1044 <udc_process_setup+0x442>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     ed8:	80 91 56 27 	lds	r24, 0x2756
     edc:	90 91 57 27 	lds	r25, 0x2757
     ee0:	89 2b       	or	r24, r25
     ee2:	09 f0       	breq	.+2      	; 0xee6 <udc_process_setup+0x2e4>
     ee4:	46 c0       	rjmp	.+140    	; 0xf72 <udc_process_setup+0x370>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     ee6:	be d4       	rcall	.+2428   	; 0x1864 <udd_getaddress>
     ee8:	88 23       	and	r24, r24
     eea:	09 f4       	brne	.+2      	; 0xeee <udc_process_setup+0x2ec>
     eec:	44 c0       	rjmp	.+136    	; 0xf76 <udc_process_setup+0x374>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     eee:	20 91 52 27 	lds	r18, 0x2752
     ef2:	30 91 53 27 	lds	r19, 0x2753
     ef6:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     ef8:	e0 91 20 20 	lds	r30, 0x2020
     efc:	f0 91 21 20 	lds	r31, 0x2021
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     f00:	81 89       	ldd	r24, Z+17	; 0x11
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	82 17       	cp	r24, r18
     f06:	93 07       	cpc	r25, r19
     f08:	c0 f1       	brcs	.+112    	; 0xf7a <udc_process_setup+0x378>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     f0a:	25 de       	rcall	.-950    	; 0xb56 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     f0c:	80 91 52 27 	lds	r24, 0x2752
     f10:	90 91 53 27 	lds	r25, 0x2753
     f14:	80 93 f6 25 	sts	0x25F6, r24
	if (udc_num_configuration == 0) {
     f18:	88 23       	and	r24, r24
     f1a:	89 f1       	breq	.+98     	; 0xf7e <udc_process_setup+0x37c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     f1c:	99 27       	eor	r25, r25
     f1e:	81 50       	subi	r24, 0x01	; 1
     f20:	90 4c       	sbci	r25, 0xC0	; 192
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	e0 91 22 20 	lds	r30, 0x2022
     f2e:	f0 91 23 20 	lds	r31, 0x2023
     f32:	e8 0f       	add	r30, r24
     f34:	f9 1f       	adc	r31, r25
     f36:	e0 93 f4 25 	sts	0x25F4, r30
     f3a:	f0 93 f5 25 	sts	0x25F5, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f3e:	01 90       	ld	r0, Z+
     f40:	f0 81       	ld	r31, Z
     f42:	e0 2d       	mov	r30, r0
     f44:	84 81       	ldd	r24, Z+4	; 0x04
     f46:	88 23       	and	r24, r24
     f48:	e1 f0       	breq	.+56     	; 0xf82 <udc_process_setup+0x380>
     f4a:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	8c 2f       	mov	r24, r28
     f50:	ce dd       	rcall	.-1124   	; 0xaee <udc_iface_enable>
     f52:	08 2f       	mov	r16, r24
     f54:	88 23       	and	r24, r24
     f56:	09 f4       	brne	.+2      	; 0xf5a <udc_process_setup+0x358>
     f58:	75 c0       	rjmp	.+234    	; 0x1044 <udc_process_setup+0x442>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     f5a:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f5c:	e0 91 f4 25 	lds	r30, 0x25F4
     f60:	f0 91 f5 25 	lds	r31, 0x25F5
     f64:	01 90       	ld	r0, Z+
     f66:	f0 81       	ld	r31, Z
     f68:	e0 2d       	mov	r30, r0
     f6a:	84 81       	ldd	r24, Z+4	; 0x04
     f6c:	c8 17       	cp	r28, r24
     f6e:	70 f3       	brcs	.-36     	; 0xf4c <udc_process_setup+0x34a>
     f70:	69 c0       	rjmp	.+210    	; 0x1044 <udc_process_setup+0x442>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     f72:	00 e0       	ldi	r16, 0x00	; 0
     f74:	67 c0       	rjmp	.+206    	; 0x1044 <udc_process_setup+0x442>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
     f76:	00 e0       	ldi	r16, 0x00	; 0
     f78:	65 c0       	rjmp	.+202    	; 0x1044 <udc_process_setup+0x442>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
     f7a:	00 e0       	ldi	r16, 0x00	; 0
     f7c:	63 c0       	rjmp	.+198    	; 0x1044 <udc_process_setup+0x442>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
     f7e:	01 e0       	ldi	r16, 0x01	; 1
     f80:	61 c0       	rjmp	.+194    	; 0x1044 <udc_process_setup+0x442>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     f82:	01 e0       	ldi	r16, 0x01	; 1
     f84:	5f c0       	rjmp	.+190    	; 0x1044 <udc_process_setup+0x442>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     f86:	21 30       	cpi	r18, 0x01	; 1
     f88:	09 f5       	brne	.+66     	; 0xfcc <udc_process_setup+0x3ca>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     f8a:	80 91 51 27 	lds	r24, 0x2751
     f8e:	8b 30       	cpi	r24, 0x0B	; 11
     f90:	e9 f4       	brne	.+58     	; 0xfcc <udc_process_setup+0x3ca>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     f92:	80 91 56 27 	lds	r24, 0x2756
     f96:	90 91 57 27 	lds	r25, 0x2757
     f9a:	89 2b       	or	r24, r25
     f9c:	99 f4       	brne	.+38     	; 0xfc4 <udc_process_setup+0x3c2>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     f9e:	80 91 f6 25 	lds	r24, 0x25F6
     fa2:	88 23       	and	r24, r24
     fa4:	89 f0       	breq	.+34     	; 0xfc8 <udc_process_setup+0x3c6>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     fa6:	c0 91 54 27 	lds	r28, 0x2754
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     faa:	d0 91 52 27 	lds	r29, 0x2752

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     fae:	8c 2f       	mov	r24, r28
     fb0:	5c dd       	rcall	.-1352   	; 0xa6a <udc_iface_disable>
     fb2:	08 2f       	mov	r16, r24
     fb4:	88 23       	and	r24, r24
     fb6:	09 f4       	brne	.+2      	; 0xfba <udc_process_setup+0x3b8>
     fb8:	45 c0       	rjmp	.+138    	; 0x1044 <udc_process_setup+0x442>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     fba:	6d 2f       	mov	r22, r29
     fbc:	8c 2f       	mov	r24, r28
     fbe:	97 dd       	rcall	.-1234   	; 0xaee <udc_iface_enable>
     fc0:	08 2f       	mov	r16, r24
     fc2:	40 c0       	rjmp	.+128    	; 0x1044 <udc_process_setup+0x442>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
     fc4:	00 e0       	ldi	r16, 0x00	; 0
     fc6:	3e c0       	rjmp	.+124    	; 0x1044 <udc_process_setup+0x442>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     fc8:	00 e0       	ldi	r16, 0x00	; 0
     fca:	3c c0       	rjmp	.+120    	; 0x1044 <udc_process_setup+0x442>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     fcc:	22 30       	cpi	r18, 0x02	; 2
     fce:	09 f0       	breq	.+2      	; 0xfd2 <udc_process_setup+0x3d0>
     fd0:	3b c0       	rjmp	.+118    	; 0x1048 <udc_process_setup+0x446>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     fd2:	80 91 51 27 	lds	r24, 0x2751
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	19 f0       	breq	.+6      	; 0xfe0 <udc_process_setup+0x3de>
     fda:	83 30       	cpi	r24, 0x03	; 3
     fdc:	b1 f0       	breq	.+44     	; 0x100a <udc_process_setup+0x408>
     fde:	31 c0       	rjmp	.+98     	; 0x1042 <udc_process_setup+0x440>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     fe0:	80 91 56 27 	lds	r24, 0x2756
     fe4:	90 91 57 27 	lds	r25, 0x2757
     fe8:	89 2b       	or	r24, r25
     fea:	59 f4       	brne	.+22     	; 0x1002 <udc_process_setup+0x400>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     fec:	80 91 52 27 	lds	r24, 0x2752
     ff0:	90 91 53 27 	lds	r25, 0x2753
     ff4:	89 2b       	or	r24, r25
     ff6:	39 f4       	brne	.+14     	; 0x1006 <udc_process_setup+0x404>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     ff8:	80 91 54 27 	lds	r24, 0x2754
     ffc:	c3 d4       	rcall	.+2438   	; 0x1984 <udd_ep_clear_halt>
     ffe:	08 2f       	mov	r16, r24
    1000:	21 c0       	rjmp	.+66     	; 0x1044 <udc_process_setup+0x442>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    1002:	00 e0       	ldi	r16, 0x00	; 0
    1004:	1f c0       	rjmp	.+62     	; 0x1044 <udc_process_setup+0x442>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    1006:	00 e0       	ldi	r16, 0x00	; 0
    1008:	1d c0       	rjmp	.+58     	; 0x1044 <udc_process_setup+0x442>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    100a:	80 91 56 27 	lds	r24, 0x2756
    100e:	90 91 57 27 	lds	r25, 0x2757
    1012:	89 2b       	or	r24, r25
    1014:	71 f4       	brne	.+28     	; 0x1032 <udc_process_setup+0x430>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1016:	80 91 52 27 	lds	r24, 0x2752
    101a:	90 91 53 27 	lds	r25, 0x2753
    101e:	89 2b       	or	r24, r25
    1020:	51 f4       	brne	.+20     	; 0x1036 <udc_process_setup+0x434>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1022:	c4 e5       	ldi	r28, 0x54	; 84
    1024:	d7 e2       	ldi	r29, 0x27	; 39
    1026:	88 81       	ld	r24, Y
    1028:	5f d5       	rcall	.+2750   	; 0x1ae8 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    102a:	88 81       	ld	r24, Y
    102c:	b3 d5       	rcall	.+2918   	; 0x1b94 <udd_ep_set_halt>
    102e:	08 2f       	mov	r16, r24
    1030:	09 c0       	rjmp	.+18     	; 0x1044 <udc_process_setup+0x442>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    1032:	00 e0       	ldi	r16, 0x00	; 0
    1034:	07 c0       	rjmp	.+14     	; 0x1044 <udc_process_setup+0x442>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    1036:	00 e0       	ldi	r16, 0x00	; 0
    1038:	05 c0       	rjmp	.+10     	; 0x1044 <udc_process_setup+0x442>
				break;
			}
		}
#endif
	}
	return false;
    103a:	00 e0       	ldi	r16, 0x00	; 0
    103c:	03 c0       	rjmp	.+6      	; 0x1044 <udc_process_setup+0x442>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    103e:	00 e0       	ldi	r16, 0x00	; 0
    1040:	01 c0       	rjmp	.+2      	; 0x1044 <udc_process_setup+0x442>
				break;
			}
		}
#endif
	}
	return false;
    1042:	00 e0       	ldi	r16, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1044:	01 11       	cpse	r16, r1
    1046:	89 c0       	rjmp	.+274    	; 0x115a <udc_process_setup+0x558>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1048:	80 91 50 27 	lds	r24, 0x2750
    104c:	8f 71       	andi	r24, 0x1F	; 31
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	c1 f5       	brne	.+112    	; 0x10c2 <udc_process_setup+0x4c0>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1052:	80 91 f6 25 	lds	r24, 0x25F6
    1056:	88 23       	and	r24, r24
    1058:	a1 f1       	breq	.+104    	; 0x10c2 <udc_process_setup+0x4c0>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    105a:	c0 91 54 27 	lds	r28, 0x2754
    105e:	d0 91 55 27 	lds	r29, 0x2755
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1062:	00 91 f4 25 	lds	r16, 0x25F4
    1066:	10 91 f5 25 	lds	r17, 0x25F5
    106a:	d8 01       	movw	r26, r16
    106c:	ed 91       	ld	r30, X+
    106e:	fc 91       	ld	r31, X
    1070:	84 81       	ldd	r24, Z+4	; 0x04
    1072:	c8 17       	cp	r28, r24
    1074:	30 f5       	brcc	.+76     	; 0x10c2 <udc_process_setup+0x4c0>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	8c 2f       	mov	r24, r28
    107a:	bd dc       	rcall	.-1670   	; 0x9f6 <udc_update_iface_desc>
    107c:	88 23       	and	r24, r24
    107e:	09 f1       	breq	.+66     	; 0x10c2 <udc_process_setup+0x4c0>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1080:	ce 01       	movw	r24, r28
    1082:	99 27       	eor	r25, r25
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	d8 01       	movw	r26, r16
    108a:	12 96       	adiw	r26, 0x02	; 2
    108c:	ed 91       	ld	r30, X+
    108e:	fc 91       	ld	r31, X
    1090:	13 97       	sbiw	r26, 0x03	; 3
    1092:	e8 0f       	add	r30, r24
    1094:	f9 1f       	adc	r31, r25
    1096:	00 81       	ld	r16, Z
    1098:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    109a:	d8 01       	movw	r26, r16
    109c:	16 96       	adiw	r26, 0x06	; 6
    109e:	ed 91       	ld	r30, X+
    10a0:	fc 91       	ld	r31, X
    10a2:	17 97       	sbiw	r26, 0x07	; 7
    10a4:	19 95       	eicall
    10a6:	68 2f       	mov	r22, r24
    10a8:	8c 2f       	mov	r24, r28
    10aa:	a5 dc       	rcall	.-1718   	; 0x9f6 <udc_update_iface_desc>
    10ac:	88 23       	and	r24, r24
    10ae:	49 f0       	breq	.+18     	; 0x10c2 <udc_process_setup+0x4c0>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    10b0:	d8 01       	movw	r26, r16
    10b2:	14 96       	adiw	r26, 0x04	; 4
    10b4:	ed 91       	ld	r30, X+
    10b6:	fc 91       	ld	r31, X
    10b8:	15 97       	sbiw	r26, 0x05	; 5
    10ba:	19 95       	eicall
    10bc:	08 2f       	mov	r16, r24
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    10be:	81 11       	cpse	r24, r1
    10c0:	4c c0       	rjmp	.+152    	; 0x115a <udc_process_setup+0x558>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    10c2:	80 91 50 27 	lds	r24, 0x2750
    10c6:	8f 71       	andi	r24, 0x1F	; 31
    10c8:	82 30       	cpi	r24, 0x02	; 2
    10ca:	d9 f5       	brne	.+118    	; 0x1142 <udc_process_setup+0x540>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    10cc:	80 91 f6 25 	lds	r24, 0x25F6
    10d0:	88 23       	and	r24, r24
    10d2:	89 f1       	breq	.+98     	; 0x1136 <udc_process_setup+0x534>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    10d4:	e0 91 f4 25 	lds	r30, 0x25F4
    10d8:	f0 91 f5 25 	lds	r31, 0x25F5
    10dc:	a0 81       	ld	r26, Z
    10de:	b1 81       	ldd	r27, Z+1	; 0x01
    10e0:	14 96       	adiw	r26, 0x04	; 4
    10e2:	8c 91       	ld	r24, X
    10e4:	88 23       	and	r24, r24
    10e6:	49 f1       	breq	.+82     	; 0x113a <udc_process_setup+0x538>
    10e8:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    10ea:	21 2f       	mov	r18, r17
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	22 0f       	add	r18, r18
    10f0:	33 1f       	adc	r19, r19
    10f2:	02 80       	ldd	r0, Z+2	; 0x02
    10f4:	f3 81       	ldd	r31, Z+3	; 0x03
    10f6:	e0 2d       	mov	r30, r0
    10f8:	e2 0f       	add	r30, r18
    10fa:	f3 1f       	adc	r31, r19
    10fc:	c0 81       	ld	r28, Z
    10fe:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1100:	ee 81       	ldd	r30, Y+6	; 0x06
    1102:	ff 81       	ldd	r31, Y+7	; 0x07
    1104:	19 95       	eicall
    1106:	68 2f       	mov	r22, r24
    1108:	81 2f       	mov	r24, r17
    110a:	75 dc       	rcall	.-1814   	; 0x9f6 <udc_update_iface_desc>
    110c:	08 2f       	mov	r16, r24
    110e:	88 23       	and	r24, r24
    1110:	21 f1       	breq	.+72     	; 0x115a <udc_process_setup+0x558>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1112:	ec 81       	ldd	r30, Y+4	; 0x04
    1114:	fd 81       	ldd	r31, Y+5	; 0x05
    1116:	19 95       	eicall
    1118:	08 2f       	mov	r16, r24
    111a:	81 11       	cpse	r24, r1
    111c:	1e c0       	rjmp	.+60     	; 0x115a <udc_process_setup+0x558>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    111e:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1120:	e0 91 f4 25 	lds	r30, 0x25F4
    1124:	f0 91 f5 25 	lds	r31, 0x25F5
    1128:	a0 81       	ld	r26, Z
    112a:	b1 81       	ldd	r27, Z+1	; 0x01
    112c:	14 96       	adiw	r26, 0x04	; 4
    112e:	8c 91       	ld	r24, X
    1130:	18 17       	cp	r17, r24
    1132:	d8 f2       	brcs	.-74     	; 0x10ea <udc_process_setup+0x4e8>
    1134:	12 c0       	rjmp	.+36     	; 0x115a <udc_process_setup+0x558>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1136:	00 e0       	ldi	r16, 0x00	; 0
    1138:	10 c0       	rjmp	.+32     	; 0x115a <udc_process_setup+0x558>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    113a:	00 e0       	ldi	r16, 0x00	; 0
    113c:	0e c0       	rjmp	.+28     	; 0x115a <udc_process_setup+0x558>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    113e:	00 e0       	ldi	r16, 0x00	; 0
    1140:	0c c0       	rjmp	.+24     	; 0x115a <udc_process_setup+0x558>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1142:	00 e0       	ldi	r16, 0x00	; 0
    1144:	0a c0       	rjmp	.+20     	; 0x115a <udc_process_setup+0x558>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1146:	82 2f       	mov	r24, r18
    1148:	80 76       	andi	r24, 0x60	; 96
    114a:	09 f0       	breq	.+2      	; 0x114e <udc_process_setup+0x54c>
    114c:	7d cf       	rjmp	.-262    	; 0x1048 <udc_process_setup+0x446>
    114e:	88 ce       	rjmp	.-752    	; 0xe60 <udc_process_setup+0x25e>
    1150:	32 2f       	mov	r19, r18
    1152:	30 76       	andi	r19, 0x60	; 96
    1154:	09 f0       	breq	.+2      	; 0x1158 <udc_process_setup+0x556>
    1156:	78 cf       	rjmp	.-272    	; 0x1048 <udc_process_setup+0x446>
    1158:	73 cd       	rjmp	.-1306   	; 0xc40 <udc_process_setup+0x3e>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    115a:	80 2f       	mov	r24, r16
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	ff 90       	pop	r15
    1166:	ef 90       	pop	r14
    1168:	08 95       	ret

0000116a <rtc_set_time>:
	if ((count_low == 0) && (RTC.INTFLAGS & RTC_OVFIF_bm))
		count_high++;
	cpu_irq_restore(flags);

	return ((uint32_t)count_high << 16) | count_low;
}
    116a:	10 92 00 04 	sts	0x0400, r1
    116e:	e0 e0       	ldi	r30, 0x00	; 0
    1170:	f4 e0       	ldi	r31, 0x04	; 4
    1172:	21 81       	ldd	r18, Z+1	; 0x01
    1174:	20 fd       	sbrc	r18, 0
    1176:	fd cf       	rjmp	.-6      	; 0x1172 <rtc_set_time+0x8>
    1178:	e0 e0       	ldi	r30, 0x00	; 0
    117a:	f4 e0       	ldi	r31, 0x04	; 4
    117c:	60 87       	std	Z+8, r22	; 0x08
    117e:	71 87       	std	Z+9, r23	; 0x09
    1180:	80 93 48 27 	sts	0x2748, r24
    1184:	90 93 49 27 	sts	0x2749, r25
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	80 83       	st	Z, r24
    118c:	08 95       	ret

0000118e <rtc_set_alarm>:
 * \param time Absolute time value. See also \ref rtc_min_alarm_time
 * \pre Needs interrupts disabled if used from several contexts
 */
void rtc_set_alarm(uint32_t time)
{
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    118e:	e0 e0       	ldi	r30, 0x00	; 0
    1190:	f4 e0       	ldi	r31, 0x04	; 4
    1192:	21 e0       	ldi	r18, 0x01	; 1
    1194:	22 83       	std	Z+2, r18	; 0x02
	RTC.COMP = time;
    1196:	64 87       	std	Z+12, r22	; 0x0c
    1198:	75 87       	std	Z+13, r23	; 0x0d
	rtc_data.alarm_low = time;
    119a:	60 93 4c 27 	sts	0x274C, r22
    119e:	70 93 4d 27 	sts	0x274D, r23
	rtc_data.alarm_high = time >> 16;
    11a2:	80 93 4a 27 	sts	0x274A, r24
    11a6:	90 93 4b 27 	sts	0x274B, r25
 * \brief Check if RTC is busy synchronizing
 */
__always_inline bool rtc_is_busy(void);
__always_inline bool rtc_is_busy(void)
{
	return RTC.STATUS & RTC_SYNCBUSY_bm;
    11aa:	81 81       	ldd	r24, Z+1	; 0x01
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
	RTC.COMP = time;
	rtc_data.alarm_low = time;
	rtc_data.alarm_high = time >> 16;

	while (rtc_is_busy());
    11ac:	80 fd       	sbrc	r24, 0
    11ae:	fd cf       	rjmp	.-6      	; 0x11aa <rtc_set_alarm+0x1c>

	RTC.INTFLAGS = RTC_COMPIF_bm;
    11b0:	e0 e0       	ldi	r30, 0x00	; 0
    11b2:	f4 e0       	ldi	r31, 0x04	; 4
    11b4:	82 e0       	ldi	r24, 0x02	; 2
    11b6:	83 83       	std	Z+3, r24	; 0x03
	RTC.INTCTRL = (uint8_t)RTC_COMPARE_INT_LEVEL
    11b8:	85 e0       	ldi	r24, 0x05	; 5
    11ba:	82 83       	std	Z+2, r24	; 0x02
    11bc:	08 95       	ret

000011be <rtc_set_callback>:
 *
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
    11be:	80 93 4e 27 	sts	0x274E, r24
    11c2:	90 93 4f 27 	sts	0x274F, r25
    11c6:	08 95       	ret

000011c8 <rtc_init>:
 * \note The RTC clock source used by the RTC module should be set up before
 *       calling this function. 
 */
void rtc_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    11c8:	64 e0       	ldi	r22, 0x04	; 4
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	0e 94 3a 14 	call	0x2874	; 0x2874 <sysclk_enable_module>
	RTC.PER = 0xffff;
    11d0:	e0 e0       	ldi	r30, 0x00	; 0
    11d2:	f4 e0       	ldi	r31, 0x04	; 4
    11d4:	8f ef       	ldi	r24, 0xFF	; 255
    11d6:	9f ef       	ldi	r25, 0xFF	; 255
    11d8:	82 87       	std	Z+10, r24	; 0x0a
    11da:	93 87       	std	Z+11, r25	; 0x0b
	RTC.CNT = 0;
    11dc:	10 86       	std	Z+8, r1	; 0x08
    11de:	11 86       	std	Z+9, r1	; 0x09

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    11e0:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    11e2:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    11e4:	e5 e4       	ldi	r30, 0x45	; 69
    11e6:	f7 e2       	ldi	r31, 0x27	; 39
    11e8:	90 81       	ld	r25, Z
    11ea:	9f 5f       	subi	r25, 0xFF	; 255
    11ec:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    11ee:	8f bf       	out	0x3f, r24	; 63
	/* Since overflow interrupt is needed all the time we limit sleep to
	 * power-save.
	 */
	sleepmgr_lock_mode(SLEEPMGR_PSAVE);
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    11f0:	e0 e0       	ldi	r30, 0x00	; 0
    11f2:	f4 e0       	ldi	r31, 0x04	; 4
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	82 83       	std	Z+2, r24	; 0x02
	RTC.CTRL = CONFIG_RTC_PRESCALER;
    11f8:	80 83       	st	Z, r24
    11fa:	08 95       	ret

000011fc <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    11fc:	81 11       	cpse	r24, r1
    11fe:	18 c0       	rjmp	.+48     	; 0x1230 <udd_sleep_mode+0x34>
    1200:	90 91 40 27 	lds	r25, 0x2740
    1204:	99 23       	and	r25, r25
    1206:	89 f0       	breq	.+34     	; 0x122a <udd_sleep_mode+0x2e>
    1208:	9f b7       	in	r25, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	e3 e4       	ldi	r30, 0x43	; 67
    120e:	f7 e2       	ldi	r31, 0x27	; 39
    1210:	20 81       	ld	r18, Z
    1212:	21 50       	subi	r18, 0x01	; 1
    1214:	20 83       	st	Z, r18
    1216:	9f bf       	out	0x3f, r25	; 63
    1218:	08 c0       	rjmp	.+16     	; 0x122a <udd_sleep_mode+0x2e>
    121a:	9f b7       	in	r25, 0x3f	; 63
    121c:	f8 94       	cli
    121e:	e3 e4       	ldi	r30, 0x43	; 67
    1220:	f7 e2       	ldi	r31, 0x27	; 39
    1222:	20 81       	ld	r18, Z
    1224:	2f 5f       	subi	r18, 0xFF	; 255
    1226:	20 83       	st	Z, r18
    1228:	9f bf       	out	0x3f, r25	; 63
    122a:	80 93 40 27 	sts	0x2740, r24
    122e:	08 95       	ret
    1230:	90 91 40 27 	lds	r25, 0x2740
    1234:	99 23       	and	r25, r25
    1236:	89 f3       	breq	.-30     	; 0x121a <udd_sleep_mode+0x1e>
    1238:	f8 cf       	rjmp	.-16     	; 0x122a <udd_sleep_mode+0x2e>

0000123a <udd_ctrl_init>:
    123a:	0f 93       	push	r16
    123c:	e8 ec       	ldi	r30, 0xC8	; 200
    123e:	f4 e0       	ldi	r31, 0x04	; 4
    1240:	80 81       	ld	r24, Z
    1242:	8f 7d       	andi	r24, 0xDF	; 223
    1244:	80 83       	st	Z, r24
    1246:	80 81       	ld	r24, Z
    1248:	8f 7d       	andi	r24, 0xDF	; 223
    124a:	80 83       	st	Z, r24
    124c:	e8 e0       	ldi	r30, 0x08	; 8
    124e:	f7 e2       	ldi	r31, 0x27	; 39
    1250:	02 e0       	ldi	r16, 0x02	; 2
    1252:	05 93       	las	Z, r16
    1254:	10 92 0a 27 	sts	0x270A, r1
    1258:	10 92 0b 27 	sts	0x270B, r1
    125c:	00 e2       	ldi	r16, 0x20	; 32
    125e:	06 93       	lac	Z, r16
    1260:	00 e4       	ldi	r16, 0x40	; 64
    1262:	06 93       	lac	Z, r16
    1264:	e0 e0       	ldi	r30, 0x00	; 0
    1266:	f7 e2       	ldi	r31, 0x27	; 39
    1268:	00 e2       	ldi	r16, 0x20	; 32
    126a:	06 93       	lac	Z, r16
    126c:	00 e4       	ldi	r16, 0x40	; 64
    126e:	06 93       	lac	Z, r16
    1270:	10 92 5c 27 	sts	0x275C, r1
    1274:	10 92 5d 27 	sts	0x275D, r1
    1278:	10 92 5e 27 	sts	0x275E, r1
    127c:	10 92 5f 27 	sts	0x275F, r1
    1280:	10 92 5a 27 	sts	0x275A, r1
    1284:	10 92 5b 27 	sts	0x275B, r1
    1288:	10 92 e5 26 	sts	0x26E5, r1
    128c:	0f 91       	pop	r16
    128e:	08 95       	ret

00001290 <udd_ctrl_stall_data>:
    1290:	0f 93       	push	r16
    1292:	85 e0       	ldi	r24, 0x05	; 5
    1294:	80 93 e5 26 	sts	0x26E5, r24
    1298:	e9 e0       	ldi	r30, 0x09	; 9
    129a:	f7 e2       	ldi	r31, 0x27	; 39
    129c:	04 e0       	ldi	r16, 0x04	; 4
    129e:	05 93       	las	Z, r16
    12a0:	e1 e0       	ldi	r30, 0x01	; 1
    12a2:	f7 e2       	ldi	r31, 0x27	; 39
    12a4:	04 e0       	ldi	r16, 0x04	; 4
    12a6:	05 93       	las	Z, r16
    12a8:	0f 91       	pop	r16
    12aa:	08 95       	ret

000012ac <udd_ctrl_send_zlp_in>:
    12ac:	0f 93       	push	r16
    12ae:	83 e0       	ldi	r24, 0x03	; 3
    12b0:	80 93 e5 26 	sts	0x26E5, r24
    12b4:	10 92 0a 27 	sts	0x270A, r1
    12b8:	10 92 0b 27 	sts	0x270B, r1
    12bc:	e8 e0       	ldi	r30, 0x08	; 8
    12be:	f7 e2       	ldi	r31, 0x27	; 39
    12c0:	02 e0       	ldi	r16, 0x02	; 2
    12c2:	06 93       	lac	Z, r16
    12c4:	0f 91       	pop	r16
    12c6:	08 95       	ret

000012c8 <udd_ctrl_endofrequest>:
    12c8:	e0 91 5c 27 	lds	r30, 0x275C
    12cc:	f0 91 5d 27 	lds	r31, 0x275D
    12d0:	30 97       	sbiw	r30, 0x00	; 0
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <udd_ctrl_endofrequest+0xe>
    12d4:	19 95       	eicall
    12d6:	08 95       	ret

000012d8 <udd_ctrl_in_sent>:
    12d8:	0f 93       	push	r16
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	80 91 e5 26 	lds	r24, 0x26E5
    12e2:	83 30       	cpi	r24, 0x03	; 3
    12e4:	19 f4       	brne	.+6      	; 0x12ec <udd_ctrl_in_sent+0x14>
    12e6:	f0 df       	rcall	.-32     	; 0x12c8 <udd_ctrl_endofrequest>
    12e8:	a8 df       	rcall	.-176    	; 0x123a <udd_ctrl_init>
    12ea:	60 c0       	rjmp	.+192    	; 0x13ac <udd_ctrl_in_sent+0xd4>
    12ec:	80 91 e1 26 	lds	r24, 0x26E1
    12f0:	90 91 e2 26 	lds	r25, 0x26E2
    12f4:	c0 91 5a 27 	lds	r28, 0x275A
    12f8:	d0 91 5b 27 	lds	r29, 0x275B
    12fc:	c8 1b       	sub	r28, r24
    12fe:	d9 0b       	sbc	r29, r25
    1300:	71 f5       	brne	.+92     	; 0x135e <udd_ctrl_in_sent+0x86>
    1302:	20 91 e3 26 	lds	r18, 0x26E3
    1306:	30 91 e4 26 	lds	r19, 0x26E4
    130a:	82 0f       	add	r24, r18
    130c:	93 1f       	adc	r25, r19
    130e:	80 93 e3 26 	sts	0x26E3, r24
    1312:	90 93 e4 26 	sts	0x26E4, r25
    1316:	20 91 56 27 	lds	r18, 0x2756
    131a:	30 91 57 27 	lds	r19, 0x2757
    131e:	82 17       	cp	r24, r18
    1320:	93 07       	cpc	r25, r19
    1322:	21 f0       	breq	.+8      	; 0x132c <udd_ctrl_in_sent+0x54>
    1324:	80 91 fc 25 	lds	r24, 0x25FC
    1328:	88 23       	and	r24, r24
    132a:	41 f0       	breq	.+16     	; 0x133c <udd_ctrl_in_sent+0x64>
    132c:	84 e0       	ldi	r24, 0x04	; 4
    132e:	80 93 e5 26 	sts	0x26E5, r24
    1332:	e0 e0       	ldi	r30, 0x00	; 0
    1334:	f7 e2       	ldi	r31, 0x27	; 39
    1336:	02 e0       	ldi	r16, 0x02	; 2
    1338:	06 93       	lac	Z, r16
    133a:	38 c0       	rjmp	.+112    	; 0x13ac <udd_ctrl_in_sent+0xd4>
    133c:	e0 91 5e 27 	lds	r30, 0x275E
    1340:	f0 91 5f 27 	lds	r31, 0x275F
    1344:	30 97       	sbiw	r30, 0x00	; 0
    1346:	99 f0       	breq	.+38     	; 0x136e <udd_ctrl_in_sent+0x96>
    1348:	19 95       	eicall
    134a:	88 23       	and	r24, r24
    134c:	81 f0       	breq	.+32     	; 0x136e <udd_ctrl_in_sent+0x96>
    134e:	10 92 e1 26 	sts	0x26E1, r1
    1352:	10 92 e2 26 	sts	0x26E2, r1
    1356:	c0 91 5a 27 	lds	r28, 0x275A
    135a:	d0 91 5b 27 	lds	r29, 0x275B
    135e:	c0 34       	cpi	r28, 0x40	; 64
    1360:	d1 05       	cpc	r29, r1
    1362:	28 f0       	brcs	.+10     	; 0x136e <udd_ctrl_in_sent+0x96>
    1364:	10 92 fc 25 	sts	0x25FC, r1
    1368:	c0 e4       	ldi	r28, 0x40	; 64
    136a:	d0 e0       	ldi	r29, 0x00	; 0
    136c:	03 c0       	rjmp	.+6      	; 0x1374 <udd_ctrl_in_sent+0x9c>
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	80 93 fc 25 	sts	0x25FC, r24
    1374:	c0 93 0a 27 	sts	0x270A, r28
    1378:	d0 93 0b 27 	sts	0x270B, r29
    137c:	80 91 e1 26 	lds	r24, 0x26E1
    1380:	90 91 e2 26 	lds	r25, 0x26E2
    1384:	20 91 58 27 	lds	r18, 0x2758
    1388:	30 91 59 27 	lds	r19, 0x2759
    138c:	28 0f       	add	r18, r24
    138e:	39 1f       	adc	r19, r25
    1390:	20 93 0c 27 	sts	0x270C, r18
    1394:	30 93 0d 27 	sts	0x270D, r19
    1398:	c8 0f       	add	r28, r24
    139a:	d9 1f       	adc	r29, r25
    139c:	c0 93 e1 26 	sts	0x26E1, r28
    13a0:	d0 93 e2 26 	sts	0x26E2, r29
    13a4:	e8 e0       	ldi	r30, 0x08	; 8
    13a6:	f7 e2       	ldi	r31, 0x27	; 39
    13a8:	02 e0       	ldi	r16, 0x02	; 2
    13aa:	06 93       	lac	Z, r16
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	0f 91       	pop	r16
    13b2:	08 95       	ret

000013b4 <udd_ep_get_size>:
    13b4:	fc 01       	movw	r30, r24
    13b6:	81 81       	ldd	r24, Z+1	; 0x01
    13b8:	87 70       	andi	r24, 0x07	; 7
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	fc 01       	movw	r30, r24
    13be:	31 97       	sbiw	r30, 0x01	; 1
    13c0:	e7 30       	cpi	r30, 0x07	; 7
    13c2:	f1 05       	cpc	r31, r1
    13c4:	20 f4       	brcc	.+8      	; 0x13ce <udd_ep_get_size+0x1a>
    13c6:	e2 50       	subi	r30, 0x02	; 2
    13c8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ca:	0c 94 5e 16 	jmp	0x2cbc	; 0x2cbc <__tablejump2__>
    13ce:	88 e0       	ldi	r24, 0x08	; 8
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	08 95       	ret
    13d4:	80 e2       	ldi	r24, 0x20	; 32
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	08 95       	ret
    13da:	80 e4       	ldi	r24, 0x40	; 64
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	08 95       	ret
    13e0:	80 e8       	ldi	r24, 0x80	; 128
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	08 95       	ret
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	91 e0       	ldi	r25, 0x01	; 1
    13ea:	08 95       	ret
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	92 e0       	ldi	r25, 0x02	; 2
    13f0:	08 95       	ret
    13f2:	8f ef       	ldi	r24, 0xFF	; 255
    13f4:	93 e0       	ldi	r25, 0x03	; 3
    13f6:	08 95       	ret
    13f8:	80 e1       	ldi	r24, 0x10	; 16
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	08 95       	ret

000013fe <udd_ep_get_job>:
    13fe:	28 2f       	mov	r18, r24
    1400:	2f 70       	andi	r18, 0x0F	; 15
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	22 0f       	add	r18, r18
    1406:	33 1f       	adc	r19, r19
    1408:	99 27       	eor	r25, r25
    140a:	87 fd       	sbrc	r24, 7
    140c:	90 95       	com	r25
    140e:	88 27       	eor	r24, r24
    1410:	99 0f       	add	r25, r25
    1412:	88 1f       	adc	r24, r24
    1414:	99 27       	eor	r25, r25
    1416:	82 0f       	add	r24, r18
    1418:	93 1f       	adc	r25, r19
    141a:	02 97       	sbiw	r24, 0x02	; 2
    141c:	9c 01       	movw	r18, r24
    141e:	22 0f       	add	r18, r18
    1420:	33 1f       	adc	r19, r19
    1422:	22 0f       	add	r18, r18
    1424:	33 1f       	adc	r19, r19
    1426:	22 0f       	add	r18, r18
    1428:	33 1f       	adc	r19, r19
    142a:	82 0f       	add	r24, r18
    142c:	93 1f       	adc	r25, r19
    142e:	83 58       	subi	r24, 0x83	; 131
    1430:	99 4d       	sbci	r25, 0xD9	; 217
    1432:	08 95       	ret

00001434 <udd_ctrl_interrupt_tc_setup>:
    1434:	0f 93       	push	r16
    1436:	cf 93       	push	r28
    1438:	80 91 cc 04 	lds	r24, 0x04CC
    143c:	80 ff       	sbrs	r24, 0
    143e:	62 c0       	rjmp	.+196    	; 0x1504 <udd_ctrl_interrupt_tc_setup+0xd0>
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	80 93 cc 04 	sts	0x04CC, r24
    1446:	e0 e0       	ldi	r30, 0x00	; 0
    1448:	f7 e2       	ldi	r31, 0x27	; 39
    144a:	00 e8       	ldi	r16, 0x80	; 128
    144c:	06 93       	lac	Z, r16
    144e:	e8 e0       	ldi	r30, 0x08	; 8
    1450:	f7 e2       	ldi	r31, 0x27	; 39
    1452:	00 e8       	ldi	r16, 0x80	; 128
    1454:	06 93       	lac	Z, r16
    1456:	80 93 ca 04 	sts	0x04CA, r24
    145a:	e0 e0       	ldi	r30, 0x00	; 0
    145c:	f7 e2       	ldi	r31, 0x27	; 39
    145e:	00 e1       	ldi	r16, 0x10	; 16
    1460:	06 93       	lac	Z, r16
    1462:	80 91 e5 26 	lds	r24, 0x26E5
    1466:	88 23       	and	r24, r24
    1468:	29 f0       	breq	.+10     	; 0x1474 <udd_ctrl_interrupt_tc_setup+0x40>
    146a:	83 50       	subi	r24, 0x03	; 3
    146c:	82 30       	cpi	r24, 0x02	; 2
    146e:	08 f4       	brcc	.+2      	; 0x1472 <udd_ctrl_interrupt_tc_setup+0x3e>
    1470:	2b df       	rcall	.-426    	; 0x12c8 <udd_ctrl_endofrequest>
    1472:	e3 de       	rcall	.-570    	; 0x123a <udd_ctrl_init>
    1474:	80 91 02 27 	lds	r24, 0x2702
    1478:	90 91 03 27 	lds	r25, 0x2703
    147c:	08 97       	sbiw	r24, 0x08	; 8
    147e:	09 f0       	breq	.+2      	; 0x1482 <udd_ctrl_interrupt_tc_setup+0x4e>
    1480:	43 c0       	rjmp	.+134    	; 0x1508 <udd_ctrl_interrupt_tc_setup+0xd4>
    1482:	88 e0       	ldi	r24, 0x08	; 8
    1484:	e1 ea       	ldi	r30, 0xA1	; 161
    1486:	f6 e2       	ldi	r31, 0x26	; 38
    1488:	a0 e5       	ldi	r26, 0x50	; 80
    148a:	b7 e2       	ldi	r27, 0x27	; 39
    148c:	01 90       	ld	r0, Z+
    148e:	0d 92       	st	X+, r0
    1490:	8a 95       	dec	r24
    1492:	e1 f7       	brne	.-8      	; 0x148c <udd_ctrl_interrupt_tc_setup+0x58>
    1494:	e8 ec       	ldi	r30, 0xC8	; 200
    1496:	f4 e0       	ldi	r31, 0x04	; 4
    1498:	80 81       	ld	r24, Z
    149a:	80 62       	ori	r24, 0x20	; 32
    149c:	80 83       	st	Z, r24
    149e:	80 81       	ld	r24, Z
    14a0:	80 62       	ori	r24, 0x20	; 32
    14a2:	80 83       	st	Z, r24
    14a4:	ae db       	rcall	.-2212   	; 0xc02 <udc_process_setup>
    14a6:	c8 2f       	mov	r28, r24
    14a8:	81 11       	cpse	r24, r1
    14aa:	03 c0       	rjmp	.+6      	; 0x14b2 <udd_ctrl_interrupt_tc_setup+0x7e>
    14ac:	f1 de       	rcall	.-542    	; 0x1290 <udd_ctrl_stall_data>
    14ae:	c1 e0       	ldi	r28, 0x01	; 1
    14b0:	2c c0       	rjmp	.+88     	; 0x150a <udd_ctrl_interrupt_tc_setup+0xd6>
    14b2:	80 91 50 27 	lds	r24, 0x2750
    14b6:	88 23       	and	r24, r24
    14b8:	6c f4       	brge	.+26     	; 0x14d4 <udd_ctrl_interrupt_tc_setup+0xa0>
    14ba:	10 92 e3 26 	sts	0x26E3, r1
    14be:	10 92 e4 26 	sts	0x26E4, r1
    14c2:	10 92 e1 26 	sts	0x26E1, r1
    14c6:	10 92 e2 26 	sts	0x26E2, r1
    14ca:	82 e0       	ldi	r24, 0x02	; 2
    14cc:	80 93 e5 26 	sts	0x26E5, r24
    14d0:	03 df       	rcall	.-506    	; 0x12d8 <udd_ctrl_in_sent>
    14d2:	1b c0       	rjmp	.+54     	; 0x150a <udd_ctrl_interrupt_tc_setup+0xd6>
    14d4:	20 91 56 27 	lds	r18, 0x2756
    14d8:	30 91 57 27 	lds	r19, 0x2757
    14dc:	23 2b       	or	r18, r19
    14de:	11 f4       	brne	.+4      	; 0x14e4 <udd_ctrl_interrupt_tc_setup+0xb0>
    14e0:	e5 de       	rcall	.-566    	; 0x12ac <udd_ctrl_send_zlp_in>
    14e2:	13 c0       	rjmp	.+38     	; 0x150a <udd_ctrl_interrupt_tc_setup+0xd6>
    14e4:	10 92 e3 26 	sts	0x26E3, r1
    14e8:	10 92 e4 26 	sts	0x26E4, r1
    14ec:	10 92 e1 26 	sts	0x26E1, r1
    14f0:	10 92 e2 26 	sts	0x26E2, r1
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	80 93 e5 26 	sts	0x26E5, r24
    14fa:	e0 e0       	ldi	r30, 0x00	; 0
    14fc:	f7 e2       	ldi	r31, 0x27	; 39
    14fe:	02 e0       	ldi	r16, 0x02	; 2
    1500:	06 93       	lac	Z, r16
    1502:	03 c0       	rjmp	.+6      	; 0x150a <udd_ctrl_interrupt_tc_setup+0xd6>
    1504:	c0 e0       	ldi	r28, 0x00	; 0
    1506:	01 c0       	rjmp	.+2      	; 0x150a <udd_ctrl_interrupt_tc_setup+0xd6>
    1508:	c1 e0       	ldi	r28, 0x01	; 1
    150a:	8c 2f       	mov	r24, r28
    150c:	cf 91       	pop	r28
    150e:	0f 91       	pop	r16
    1510:	08 95       	ret

00001512 <udd_ep_trans_complet>:
    1512:	bf 92       	push	r11
    1514:	cf 92       	push	r12
    1516:	df 92       	push	r13
    1518:	ef 92       	push	r14
    151a:	ff 92       	push	r15
    151c:	0f 93       	push	r16
    151e:	1f 93       	push	r17
    1520:	cf 93       	push	r28
    1522:	df 93       	push	r29
    1524:	b8 2e       	mov	r11, r24
    1526:	6b df       	rcall	.-298    	; 0x13fe <udd_ep_get_job>
    1528:	ec 01       	movw	r28, r24
    152a:	1b 2d       	mov	r17, r11
    152c:	11 1f       	adc	r17, r17
    152e:	11 27       	eor	r17, r17
    1530:	11 1f       	adc	r17, r17
    1532:	8b 2d       	mov	r24, r11
    1534:	8f 70       	andi	r24, 0x0F	; 15
    1536:	e8 2e       	mov	r14, r24
    1538:	f1 2c       	mov	r15, r1
    153a:	ee 0c       	add	r14, r14
    153c:	ff 1c       	adc	r15, r15
    153e:	e1 0e       	add	r14, r17
    1540:	f1 1c       	adc	r15, r1
    1542:	c7 01       	movw	r24, r14
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	9c 01       	movw	r18, r24
    1552:	20 50       	subi	r18, 0x00	; 0
    1554:	39 4d       	sbci	r19, 0xD9	; 217
    1556:	79 01       	movw	r14, r18
    1558:	c9 01       	movw	r24, r18
    155a:	2c df       	rcall	.-424    	; 0x13b4 <udd_ep_get_size>
    155c:	6c 01       	movw	r12, r24
    155e:	11 23       	and	r17, r17
    1560:	09 f4       	brne	.+2      	; 0x1564 <udd_ep_trans_complet+0x52>
    1562:	5b c0       	rjmp	.+182    	; 0x161a <udd_ep_trans_complet+0x108>
    1564:	d7 01       	movw	r26, r14
    1566:	16 96       	adiw	r26, 0x06	; 6
    1568:	2d 91       	ld	r18, X+
    156a:	3c 91       	ld	r19, X
    156c:	17 97       	sbiw	r26, 0x07	; 7
    156e:	8d 81       	ldd	r24, Y+5	; 0x05
    1570:	9e 81       	ldd	r25, Y+6	; 0x06
    1572:	28 0f       	add	r18, r24
    1574:	39 1f       	adc	r19, r25
    1576:	2d 83       	std	Y+5, r18	; 0x05
    1578:	3e 83       	std	Y+6, r19	; 0x06
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	9c 81       	ldd	r25, Y+4	; 0x04
    157e:	28 17       	cp	r18, r24
    1580:	39 07       	cpc	r19, r25
    1582:	c9 f1       	breq	.+114    	; 0x15f6 <udd_ep_trans_complet+0xe4>
    1584:	fc 01       	movw	r30, r24
    1586:	e2 1b       	sub	r30, r18
    1588:	f3 0b       	sbc	r31, r19
    158a:	9f 01       	movw	r18, r30
    158c:	21 15       	cp	r18, r1
    158e:	f4 e0       	ldi	r31, 0x04	; 4
    1590:	3f 07       	cpc	r19, r31
    1592:	40 f0       	brcs	.+16     	; 0x15a4 <udd_ep_trans_complet+0x92>
    1594:	2f ef       	ldi	r18, 0xFF	; 255
    1596:	33 e0       	ldi	r19, 0x03	; 3
    1598:	c9 01       	movw	r24, r18
    159a:	b6 01       	movw	r22, r12
    159c:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__udivmodhi4>
    15a0:	28 1b       	sub	r18, r24
    15a2:	39 0b       	sbc	r19, r25
    15a4:	88 81       	ld	r24, Y
    15a6:	81 ff       	sbrs	r24, 1
    15a8:	0a c0       	rjmp	.+20     	; 0x15be <udd_ep_trans_complet+0xac>
    15aa:	c9 01       	movw	r24, r18
    15ac:	b6 01       	movw	r22, r12
    15ae:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__udivmodhi4>
    15b2:	41 e0       	ldi	r20, 0x01	; 1
    15b4:	89 2b       	or	r24, r25
    15b6:	09 f0       	breq	.+2      	; 0x15ba <udd_ep_trans_complet+0xa8>
    15b8:	40 e0       	ldi	r20, 0x00	; 0
    15ba:	94 2f       	mov	r25, r20
    15bc:	01 c0       	rjmp	.+2      	; 0x15c0 <udd_ep_trans_complet+0xae>
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	88 81       	ld	r24, Y
    15c2:	90 fb       	bst	r25, 0
    15c4:	81 f9       	bld	r24, 1
    15c6:	88 83       	st	Y, r24
    15c8:	d7 01       	movw	r26, r14
    15ca:	16 96       	adiw	r26, 0x06	; 6
    15cc:	1d 92       	st	X+, r1
    15ce:	1c 92       	st	X, r1
    15d0:	17 97       	sbiw	r26, 0x07	; 7
    15d2:	12 96       	adiw	r26, 0x02	; 2
    15d4:	2d 93       	st	X+, r18
    15d6:	3c 93       	st	X, r19
    15d8:	13 97       	sbiw	r26, 0x03	; 3
    15da:	29 81       	ldd	r18, Y+1	; 0x01
    15dc:	3a 81       	ldd	r19, Y+2	; 0x02
    15de:	8d 81       	ldd	r24, Y+5	; 0x05
    15e0:	9e 81       	ldd	r25, Y+6	; 0x06
    15e2:	82 0f       	add	r24, r18
    15e4:	93 1f       	adc	r25, r19
    15e6:	14 96       	adiw	r26, 0x04	; 4
    15e8:	8d 93       	st	X+, r24
    15ea:	9c 93       	st	X, r25
    15ec:	15 97       	sbiw	r26, 0x05	; 5
    15ee:	f7 01       	movw	r30, r14
    15f0:	02 e0       	ldi	r16, 0x02	; 2
    15f2:	06 93       	lac	Z, r16
    15f4:	98 c0       	rjmp	.+304    	; 0x1726 <udd_ep_trans_complet+0x214>
    15f6:	88 81       	ld	r24, Y
    15f8:	81 ff       	sbrs	r24, 1
    15fa:	87 c0       	rjmp	.+270    	; 0x170a <udd_ep_trans_complet+0x1f8>
    15fc:	8d 7f       	andi	r24, 0xFD	; 253
    15fe:	88 83       	st	Y, r24
    1600:	d7 01       	movw	r26, r14
    1602:	16 96       	adiw	r26, 0x06	; 6
    1604:	1d 92       	st	X+, r1
    1606:	1c 92       	st	X, r1
    1608:	17 97       	sbiw	r26, 0x07	; 7
    160a:	12 96       	adiw	r26, 0x02	; 2
    160c:	1d 92       	st	X+, r1
    160e:	1c 92       	st	X, r1
    1610:	13 97       	sbiw	r26, 0x03	; 3
    1612:	f7 01       	movw	r30, r14
    1614:	02 e0       	ldi	r16, 0x02	; 2
    1616:	06 93       	lac	Z, r16
    1618:	86 c0       	rjmp	.+268    	; 0x1726 <udd_ep_trans_complet+0x214>
    161a:	d7 01       	movw	r26, r14
    161c:	12 96       	adiw	r26, 0x02	; 2
    161e:	0d 91       	ld	r16, X+
    1620:	1c 91       	ld	r17, X
    1622:	13 97       	sbiw	r26, 0x03	; 3
    1624:	88 81       	ld	r24, Y
    1626:	82 ff       	sbrs	r24, 2
    1628:	15 c0       	rjmp	.+42     	; 0x1654 <udd_ep_trans_complet+0x142>
    162a:	e9 81       	ldd	r30, Y+1	; 0x01
    162c:	fa 81       	ldd	r31, Y+2	; 0x02
    162e:	2d 81       	ldd	r18, Y+5	; 0x05
    1630:	3e 81       	ldd	r19, Y+6	; 0x06
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	9c 81       	ldd	r25, Y+4	; 0x04
    1636:	b6 01       	movw	r22, r12
    1638:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__udivmodhi4>
    163c:	b0 e4       	ldi	r27, 0x40	; 64
    163e:	bb 9e       	mul	r11, r27
    1640:	b0 01       	movw	r22, r0
    1642:	11 24       	eor	r1, r1
    1644:	63 54       	subi	r22, 0x43	; 67
    1646:	7a 4d       	sbci	r23, 0xDA	; 218
    1648:	ac 01       	movw	r20, r24
    164a:	cf 01       	movw	r24, r30
    164c:	82 0f       	add	r24, r18
    164e:	93 1f       	adc	r25, r19
    1650:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <memcpy>
    1654:	2d 81       	ldd	r18, Y+5	; 0x05
    1656:	3e 81       	ldd	r19, Y+6	; 0x06
    1658:	20 0f       	add	r18, r16
    165a:	31 1f       	adc	r19, r17
    165c:	2d 83       	std	Y+5, r18	; 0x05
    165e:	3e 83       	std	Y+6, r19	; 0x06
    1660:	eb 81       	ldd	r30, Y+3	; 0x03
    1662:	fc 81       	ldd	r31, Y+4	; 0x04
    1664:	e2 17       	cp	r30, r18
    1666:	f3 07       	cpc	r31, r19
    1668:	10 f4       	brcc	.+4      	; 0x166e <udd_ep_trans_complet+0x15c>
    166a:	ed 83       	std	Y+5, r30	; 0x05
    166c:	fe 83       	std	Y+6, r31	; 0x06
    166e:	d7 01       	movw	r26, r14
    1670:	16 96       	adiw	r26, 0x06	; 6
    1672:	8d 91       	ld	r24, X+
    1674:	9c 91       	ld	r25, X
    1676:	17 97       	sbiw	r26, 0x07	; 7
    1678:	80 17       	cp	r24, r16
    167a:	91 07       	cpc	r25, r17
    167c:	09 f0       	breq	.+2      	; 0x1680 <udd_ep_trans_complet+0x16e>
    167e:	45 c0       	rjmp	.+138    	; 0x170a <udd_ep_trans_complet+0x1f8>
    1680:	8d 81       	ldd	r24, Y+5	; 0x05
    1682:	9e 81       	ldd	r25, Y+6	; 0x06
    1684:	e8 17       	cp	r30, r24
    1686:	f9 07       	cpc	r31, r25
    1688:	09 f4       	brne	.+2      	; 0x168c <udd_ep_trans_complet+0x17a>
    168a:	3f c0       	rjmp	.+126    	; 0x170a <udd_ep_trans_complet+0x1f8>
    168c:	e8 1b       	sub	r30, r24
    168e:	f9 0b       	sbc	r31, r25
    1690:	e1 15       	cp	r30, r1
    1692:	b4 e0       	ldi	r27, 0x04	; 4
    1694:	fb 07       	cpc	r31, r27
    1696:	48 f0       	brcs	.+18     	; 0x16aa <udd_ep_trans_complet+0x198>
    1698:	ef ef       	ldi	r30, 0xFF	; 255
    169a:	f3 e0       	ldi	r31, 0x03	; 3
    169c:	cf 01       	movw	r24, r30
    169e:	b6 01       	movw	r22, r12
    16a0:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__udivmodhi4>
    16a4:	e8 1b       	sub	r30, r24
    16a6:	f9 0b       	sbc	r31, r25
    16a8:	06 c0       	rjmp	.+12     	; 0x16b6 <udd_ep_trans_complet+0x1a4>
    16aa:	cf 01       	movw	r24, r30
    16ac:	b6 01       	movw	r22, r12
    16ae:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__udivmodhi4>
    16b2:	e8 1b       	sub	r30, r24
    16b4:	f9 0b       	sbc	r31, r25
    16b6:	d7 01       	movw	r26, r14
    16b8:	12 96       	adiw	r26, 0x02	; 2
    16ba:	1d 92       	st	X+, r1
    16bc:	1c 92       	st	X, r1
    16be:	13 97       	sbiw	r26, 0x03	; 3
    16c0:	ec 15       	cp	r30, r12
    16c2:	fd 05       	cpc	r31, r13
    16c4:	78 f4       	brcc	.+30     	; 0x16e4 <udd_ep_trans_complet+0x1d2>
    16c6:	88 81       	ld	r24, Y
    16c8:	84 60       	ori	r24, 0x04	; 4
    16ca:	88 83       	st	Y, r24
    16cc:	b0 e4       	ldi	r27, 0x40	; 64
    16ce:	bb 9e       	mul	r11, r27
    16d0:	c0 01       	movw	r24, r0
    16d2:	11 24       	eor	r1, r1
    16d4:	83 54       	subi	r24, 0x43	; 67
    16d6:	9a 4d       	sbci	r25, 0xDA	; 218
    16d8:	f7 01       	movw	r30, r14
    16da:	84 83       	std	Z+4, r24	; 0x04
    16dc:	95 83       	std	Z+5, r25	; 0x05
    16de:	c6 82       	std	Z+6, r12	; 0x06
    16e0:	d7 82       	std	Z+7, r13	; 0x07
    16e2:	0f c0       	rjmp	.+30     	; 0x1702 <udd_ep_trans_complet+0x1f0>
    16e4:	29 81       	ldd	r18, Y+1	; 0x01
    16e6:	3a 81       	ldd	r19, Y+2	; 0x02
    16e8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ea:	9e 81       	ldd	r25, Y+6	; 0x06
    16ec:	82 0f       	add	r24, r18
    16ee:	93 1f       	adc	r25, r19
    16f0:	d7 01       	movw	r26, r14
    16f2:	14 96       	adiw	r26, 0x04	; 4
    16f4:	8d 93       	st	X+, r24
    16f6:	9c 93       	st	X, r25
    16f8:	15 97       	sbiw	r26, 0x05	; 5
    16fa:	16 96       	adiw	r26, 0x06	; 6
    16fc:	ed 93       	st	X+, r30
    16fe:	fc 93       	st	X, r31
    1700:	17 97       	sbiw	r26, 0x07	; 7
    1702:	f7 01       	movw	r30, r14
    1704:	02 e0       	ldi	r16, 0x02	; 2
    1706:	06 93       	lac	Z, r16
    1708:	0e c0       	rjmp	.+28     	; 0x1726 <udd_ep_trans_complet+0x214>
    170a:	88 81       	ld	r24, Y
    170c:	80 ff       	sbrs	r24, 0
    170e:	0b c0       	rjmp	.+22     	; 0x1726 <udd_ep_trans_complet+0x214>
    1710:	8e 7f       	andi	r24, 0xFE	; 254
    1712:	88 83       	st	Y, r24
    1714:	ef 81       	ldd	r30, Y+7	; 0x07
    1716:	f8 85       	ldd	r31, Y+8	; 0x08
    1718:	30 97       	sbiw	r30, 0x00	; 0
    171a:	29 f0       	breq	.+10     	; 0x1726 <udd_ep_trans_complet+0x214>
    171c:	6d 81       	ldd	r22, Y+5	; 0x05
    171e:	7e 81       	ldd	r23, Y+6	; 0x06
    1720:	4b 2d       	mov	r20, r11
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	19 95       	eicall
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
    172a:	1f 91       	pop	r17
    172c:	0f 91       	pop	r16
    172e:	ff 90       	pop	r15
    1730:	ef 90       	pop	r14
    1732:	df 90       	pop	r13
    1734:	cf 90       	pop	r12
    1736:	bf 90       	pop	r11
    1738:	08 95       	ret

0000173a <udd_attach>:
    173a:	cf 93       	push	r28
    173c:	cf b7       	in	r28, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	5c dd       	rcall	.-1352   	; 0x11fc <udd_sleep_mode>
    1744:	ea ec       	ldi	r30, 0xCA	; 202
    1746:	f4 e0       	ldi	r31, 0x04	; 4
    1748:	80 e4       	ldi	r24, 0x40	; 64
    174a:	80 83       	st	Z, r24
    174c:	80 e2       	ldi	r24, 0x20	; 32
    174e:	80 83       	st	Z, r24
    1750:	e1 ec       	ldi	r30, 0xC1	; 193
    1752:	f4 e0       	ldi	r31, 0x04	; 4
    1754:	80 81       	ld	r24, Z
    1756:	81 60       	ori	r24, 0x01	; 1
    1758:	80 83       	st	Z, r24
    175a:	a9 ec       	ldi	r26, 0xC9	; 201
    175c:	b4 e0       	ldi	r27, 0x04	; 4
    175e:	8c 91       	ld	r24, X
    1760:	82 60       	ori	r24, 0x02	; 2
    1762:	8c 93       	st	X, r24
    1764:	e8 ec       	ldi	r30, 0xC8	; 200
    1766:	f4 e0       	ldi	r31, 0x04	; 4
    1768:	80 81       	ld	r24, Z
    176a:	80 64       	ori	r24, 0x40	; 64
    176c:	80 83       	st	Z, r24
    176e:	8c 91       	ld	r24, X
    1770:	81 60       	ori	r24, 0x01	; 1
    1772:	8c 93       	st	X, r24
    1774:	80 81       	ld	r24, Z
    1776:	80 68       	ori	r24, 0x80	; 128
    1778:	80 83       	st	Z, r24
    177a:	cf bf       	out	0x3f, r28	; 63
    177c:	cf 91       	pop	r28
    177e:	08 95       	ret

00001780 <udd_enable>:
    1780:	cf 93       	push	r28
    1782:	80 e3       	ldi	r24, 0x30	; 48
    1784:	0e 94 51 14 	call	0x28a2	; 0x28a2 <sysclk_enable_usb>
    1788:	e0 ec       	ldi	r30, 0xC0	; 192
    178a:	f4 e0       	ldi	r31, 0x04	; 4
    178c:	80 81       	ld	r24, Z
    178e:	80 64       	ori	r24, 0x40	; 64
    1790:	80 83       	st	Z, r24
    1792:	cf b7       	in	r28, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	10 92 01 27 	sts	0x2701, r1
    179a:	10 92 09 27 	sts	0x2709, r1
    179e:	10 92 11 27 	sts	0x2711, r1
    17a2:	10 92 19 27 	sts	0x2719, r1
    17a6:	10 92 21 27 	sts	0x2721, r1
    17aa:	10 92 29 27 	sts	0x2729, r1
    17ae:	ed e7       	ldi	r30, 0x7D	; 125
    17b0:	f6 e2       	ldi	r31, 0x26	; 38
    17b2:	80 81       	ld	r24, Z
    17b4:	8e 7f       	andi	r24, 0xFE	; 254
    17b6:	80 83       	st	Z, r24
    17b8:	e6 e8       	ldi	r30, 0x86	; 134
    17ba:	f6 e2       	ldi	r31, 0x26	; 38
    17bc:	80 81       	ld	r24, Z
    17be:	8e 7f       	andi	r24, 0xFE	; 254
    17c0:	80 83       	st	Z, r24
    17c2:	ef e8       	ldi	r30, 0x8F	; 143
    17c4:	f6 e2       	ldi	r31, 0x26	; 38
    17c6:	80 81       	ld	r24, Z
    17c8:	8e 7f       	andi	r24, 0xFE	; 254
    17ca:	80 83       	st	Z, r24
    17cc:	e8 e9       	ldi	r30, 0x98	; 152
    17ce:	f6 e2       	ldi	r31, 0x26	; 38
    17d0:	80 81       	ld	r24, Z
    17d2:	8e 7f       	andi	r24, 0xFE	; 254
    17d4:	80 83       	st	Z, r24
    17d6:	6a e1       	ldi	r22, 0x1A	; 26
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	82 e0       	ldi	r24, 0x02	; 2
    17dc:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <nvm_read_byte>
    17e0:	8f 3f       	cpi	r24, 0xFF	; 255
    17e2:	19 f0       	breq	.+6      	; 0x17ea <udd_enable+0x6a>
    17e4:	80 93 fa 04 	sts	0x04FA, r24
    17e8:	03 c0       	rjmp	.+6      	; 0x17f0 <udd_enable+0x70>
    17ea:	8f e1       	ldi	r24, 0x1F	; 31
    17ec:	80 93 fa 04 	sts	0x04FA, r24
    17f0:	6b e1       	ldi	r22, 0x1B	; 27
    17f2:	70 e0       	ldi	r23, 0x00	; 0
    17f4:	82 e0       	ldi	r24, 0x02	; 2
    17f6:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <nvm_read_byte>
    17fa:	8f 3f       	cpi	r24, 0xFF	; 255
    17fc:	19 f0       	breq	.+6      	; 0x1804 <udd_enable+0x84>
    17fe:	80 93 fb 04 	sts	0x04FB, r24
    1802:	03 c0       	rjmp	.+6      	; 0x180a <udd_enable+0x8a>
    1804:	8f e1       	ldi	r24, 0x1F	; 31
    1806:	80 93 fb 04 	sts	0x04FB, r24
    180a:	e0 ec       	ldi	r30, 0xC0	; 192
    180c:	f4 e0       	ldi	r31, 0x04	; 4
    180e:	80 81       	ld	r24, Z
    1810:	82 60       	ori	r24, 0x02	; 2
    1812:	80 83       	st	Z, r24
    1814:	80 81       	ld	r24, Z
    1816:	80 68       	ori	r24, 0x80	; 128
    1818:	80 83       	st	Z, r24
    181a:	80 81       	ld	r24, Z
    181c:	80 61       	ori	r24, 0x10	; 16
    181e:	80 83       	st	Z, r24
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	97 e2       	ldi	r25, 0x27	; 39
    1824:	86 83       	std	Z+6, r24	; 0x06
    1826:	97 83       	std	Z+7, r25	; 0x07
    1828:	80 81       	ld	r24, Z
    182a:	80 62       	ori	r24, 0x20	; 32
    182c:	80 83       	st	Z, r24
    182e:	8f ef       	ldi	r24, 0xFF	; 255
    1830:	80 93 c5 04 	sts	0x04C5, r24
    1834:	e8 ec       	ldi	r30, 0xC8	; 200
    1836:	f4 e0       	ldi	r31, 0x04	; 4
    1838:	80 81       	ld	r24, Z
    183a:	81 60       	ori	r24, 0x01	; 1
    183c:	80 83       	st	Z, r24
    183e:	10 92 40 27 	sts	0x2740, r1
    1842:	8f b7       	in	r24, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	e7 e4       	ldi	r30, 0x47	; 71
    1848:	f7 e2       	ldi	r31, 0x27	; 39
    184a:	90 81       	ld	r25, Z
    184c:	9f 5f       	subi	r25, 0xFF	; 255
    184e:	90 83       	st	Z, r25
    1850:	8f bf       	out	0x3f, r24	; 63
    1852:	73 df       	rcall	.-282    	; 0x173a <udd_attach>
    1854:	cf bf       	out	0x3f, r28	; 63
    1856:	cf 91       	pop	r28
    1858:	08 95       	ret

0000185a <udd_is_high_speed>:
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	08 95       	ret

0000185e <udd_set_address>:
    185e:	80 93 c3 04 	sts	0x04C3, r24
    1862:	08 95       	ret

00001864 <udd_getaddress>:
    1864:	80 91 c3 04 	lds	r24, 0x04C3
    1868:	08 95       	ret

0000186a <udd_get_frame_number>:
    186a:	80 91 30 27 	lds	r24, 0x2730
    186e:	90 91 31 27 	lds	r25, 0x2731
    1872:	08 95       	ret

00001874 <udd_get_micro_frame_number>:
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	08 95       	ret

0000187a <udd_set_setup_payload>:
    187a:	80 93 58 27 	sts	0x2758, r24
    187e:	90 93 59 27 	sts	0x2759, r25
    1882:	60 93 5a 27 	sts	0x275A, r22
    1886:	70 93 5b 27 	sts	0x275B, r23
    188a:	08 95       	ret

0000188c <udd_ep_alloc>:
    188c:	e8 2f       	mov	r30, r24
    188e:	ef 70       	andi	r30, 0x0F	; 15
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	ee 0f       	add	r30, r30
    1894:	ff 1f       	adc	r31, r31
    1896:	99 27       	eor	r25, r25
    1898:	87 fd       	sbrc	r24, 7
    189a:	90 95       	com	r25
    189c:	88 27       	eor	r24, r24
    189e:	99 0f       	add	r25, r25
    18a0:	88 1f       	adc	r24, r24
    18a2:	99 27       	eor	r25, r25
    18a4:	e8 0f       	add	r30, r24
    18a6:	f9 1f       	adc	r31, r25
    18a8:	ee 0f       	add	r30, r30
    18aa:	ff 1f       	adc	r31, r31
    18ac:	ee 0f       	add	r30, r30
    18ae:	ff 1f       	adc	r31, r31
    18b0:	ee 0f       	add	r30, r30
    18b2:	ff 1f       	adc	r31, r31
    18b4:	e0 50       	subi	r30, 0x00	; 0
    18b6:	f9 4d       	sbci	r31, 0xD9	; 217
    18b8:	81 81       	ldd	r24, Z+1	; 0x01
    18ba:	80 7c       	andi	r24, 0xC0	; 192
    18bc:	09 f0       	breq	.+2      	; 0x18c0 <udd_ep_alloc+0x34>
    18be:	43 c0       	rjmp	.+134    	; 0x1946 <udd_ep_alloc+0xba>
    18c0:	63 70       	andi	r22, 0x03	; 3
    18c2:	61 30       	cpi	r22, 0x01	; 1
    18c4:	29 f0       	breq	.+10     	; 0x18d0 <udd_ep_alloc+0x44>
    18c6:	10 f4       	brcc	.+4      	; 0x18cc <udd_ep_alloc+0x40>
    18c8:	80 e4       	ldi	r24, 0x40	; 64
    18ca:	03 c0       	rjmp	.+6      	; 0x18d2 <udd_ep_alloc+0x46>
    18cc:	80 e8       	ldi	r24, 0x80	; 128
    18ce:	01 c0       	rjmp	.+2      	; 0x18d2 <udd_ep_alloc+0x46>
    18d0:	80 ec       	ldi	r24, 0xC0	; 192
    18d2:	40 38       	cpi	r20, 0x80	; 128
    18d4:	51 05       	cpc	r21, r1
    18d6:	e1 f0       	breq	.+56     	; 0x1910 <udd_ep_alloc+0x84>
    18d8:	50 f4       	brcc	.+20     	; 0x18ee <udd_ep_alloc+0x62>
    18da:	40 32       	cpi	r20, 0x20	; 32
    18dc:	51 05       	cpc	r21, r1
    18de:	a1 f0       	breq	.+40     	; 0x1908 <udd_ep_alloc+0x7c>
    18e0:	40 34       	cpi	r20, 0x40	; 64
    18e2:	51 05       	cpc	r21, r1
    18e4:	99 f0       	breq	.+38     	; 0x190c <udd_ep_alloc+0x80>
    18e6:	40 31       	cpi	r20, 0x10	; 16
    18e8:	51 05       	cpc	r21, r1
    18ea:	61 f4       	brne	.+24     	; 0x1904 <udd_ep_alloc+0x78>
    18ec:	19 c0       	rjmp	.+50     	; 0x1920 <udd_ep_alloc+0x94>
    18ee:	41 15       	cp	r20, r1
    18f0:	92 e0       	ldi	r25, 0x02	; 2
    18f2:	59 07       	cpc	r21, r25
    18f4:	89 f0       	breq	.+34     	; 0x1918 <udd_ep_alloc+0x8c>
    18f6:	4f 3f       	cpi	r20, 0xFF	; 255
    18f8:	93 e0       	ldi	r25, 0x03	; 3
    18fa:	59 07       	cpc	r21, r25
    18fc:	79 f0       	breq	.+30     	; 0x191c <udd_ep_alloc+0x90>
    18fe:	41 15       	cp	r20, r1
    1900:	51 40       	sbci	r21, 0x01	; 1
    1902:	41 f0       	breq	.+16     	; 0x1914 <udd_ep_alloc+0x88>
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	0d c0       	rjmp	.+26     	; 0x1922 <udd_ep_alloc+0x96>
    1908:	22 e0       	ldi	r18, 0x02	; 2
    190a:	0b c0       	rjmp	.+22     	; 0x1922 <udd_ep_alloc+0x96>
    190c:	23 e0       	ldi	r18, 0x03	; 3
    190e:	09 c0       	rjmp	.+18     	; 0x1922 <udd_ep_alloc+0x96>
    1910:	24 e0       	ldi	r18, 0x04	; 4
    1912:	07 c0       	rjmp	.+14     	; 0x1922 <udd_ep_alloc+0x96>
    1914:	25 e0       	ldi	r18, 0x05	; 5
    1916:	05 c0       	rjmp	.+10     	; 0x1922 <udd_ep_alloc+0x96>
    1918:	26 e0       	ldi	r18, 0x06	; 6
    191a:	03 c0       	rjmp	.+6      	; 0x1922 <udd_ep_alloc+0x96>
    191c:	27 e0       	ldi	r18, 0x07	; 7
    191e:	01 c0       	rjmp	.+2      	; 0x1922 <udd_ep_alloc+0x96>
    1920:	21 e0       	ldi	r18, 0x01	; 1
    1922:	11 82       	std	Z+1, r1	; 0x01
    1924:	96 e0       	ldi	r25, 0x06	; 6
    1926:	90 83       	st	Z, r25
    1928:	82 2b       	or	r24, r18
    192a:	81 83       	std	Z+1, r24	; 0x01
    192c:	81 81       	ldd	r24, Z+1	; 0x01
    192e:	80 7c       	andi	r24, 0xC0	; 192
    1930:	80 3c       	cpi	r24, 0xC0	; 192
    1932:	21 f4       	brne	.+8      	; 0x193c <udd_ep_alloc+0xb0>
    1934:	81 81       	ldd	r24, Z+1	; 0x01
    1936:	87 70       	andi	r24, 0x07	; 7
    1938:	87 30       	cpi	r24, 0x07	; 7
    193a:	39 f0       	breq	.+14     	; 0x194a <udd_ep_alloc+0xbe>
    193c:	81 81       	ldd	r24, Z+1	; 0x01
    193e:	80 62       	ori	r24, 0x20	; 32
    1940:	81 83       	std	Z+1, r24	; 0x01
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	08 95       	ret
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	08 95       	ret
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	08 95       	ret

0000194e <udd_ep_is_halted>:
    194e:	e8 2f       	mov	r30, r24
    1950:	ef 70       	andi	r30, 0x0F	; 15
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	ee 0f       	add	r30, r30
    1956:	ff 1f       	adc	r31, r31
    1958:	99 27       	eor	r25, r25
    195a:	87 fd       	sbrc	r24, 7
    195c:	90 95       	com	r25
    195e:	88 27       	eor	r24, r24
    1960:	99 0f       	add	r25, r25
    1962:	88 1f       	adc	r24, r24
    1964:	99 27       	eor	r25, r25
    1966:	e8 0f       	add	r30, r24
    1968:	f9 1f       	adc	r31, r25
    196a:	ee 0f       	add	r30, r30
    196c:	ff 1f       	adc	r31, r31
    196e:	ee 0f       	add	r30, r30
    1970:	ff 1f       	adc	r31, r31
    1972:	ee 0f       	add	r30, r30
    1974:	ff 1f       	adc	r31, r31
    1976:	e0 50       	subi	r30, 0x00	; 0
    1978:	f9 4d       	sbci	r31, 0xD9	; 217
    197a:	81 81       	ldd	r24, Z+1	; 0x01
    197c:	82 fb       	bst	r24, 2
    197e:	88 27       	eor	r24, r24
    1980:	80 f9       	bld	r24, 0
    1982:	08 95       	ret

00001984 <udd_ep_clear_halt>:
    1984:	e8 2f       	mov	r30, r24
    1986:	ef 70       	andi	r30, 0x0F	; 15
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	ee 0f       	add	r30, r30
    198c:	ff 1f       	adc	r31, r31
    198e:	28 2f       	mov	r18, r24
    1990:	33 27       	eor	r19, r19
    1992:	27 fd       	sbrc	r18, 7
    1994:	30 95       	com	r19
    1996:	22 27       	eor	r18, r18
    1998:	33 0f       	add	r19, r19
    199a:	22 1f       	adc	r18, r18
    199c:	33 27       	eor	r19, r19
    199e:	e2 0f       	add	r30, r18
    19a0:	f3 1f       	adc	r31, r19
    19a2:	ee 0f       	add	r30, r30
    19a4:	ff 1f       	adc	r31, r31
    19a6:	ee 0f       	add	r30, r30
    19a8:	ff 1f       	adc	r31, r31
    19aa:	ee 0f       	add	r30, r30
    19ac:	ff 1f       	adc	r31, r31
    19ae:	e0 50       	subi	r30, 0x00	; 0
    19b0:	f9 4d       	sbci	r31, 0xD9	; 217
    19b2:	91 81       	ldd	r25, Z+1	; 0x01
    19b4:	92 ff       	sbrs	r25, 2
    19b6:	0e c0       	rjmp	.+28     	; 0x19d4 <udd_ep_clear_halt+0x50>
    19b8:	91 81       	ldd	r25, Z+1	; 0x01
    19ba:	9b 7f       	andi	r25, 0xFB	; 251
    19bc:	91 83       	std	Z+1, r25	; 0x01
    19be:	1f dd       	rcall	.-1474   	; 0x13fe <udd_ep_get_job>
    19c0:	fc 01       	movw	r30, r24
    19c2:	80 81       	ld	r24, Z
    19c4:	80 ff       	sbrs	r24, 0
    19c6:	06 c0       	rjmp	.+12     	; 0x19d4 <udd_ep_clear_halt+0x50>
    19c8:	8e 7f       	andi	r24, 0xFE	; 254
    19ca:	80 83       	st	Z, r24
    19cc:	07 80       	ldd	r0, Z+7	; 0x07
    19ce:	f0 85       	ldd	r31, Z+8	; 0x08
    19d0:	e0 2d       	mov	r30, r0
    19d2:	19 95       	eicall
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	08 95       	ret

000019d8 <udd_ep_run>:
    19d8:	7f 92       	push	r7
    19da:	8f 92       	push	r8
    19dc:	9f 92       	push	r9
    19de:	af 92       	push	r10
    19e0:	bf 92       	push	r11
    19e2:	cf 92       	push	r12
    19e4:	df 92       	push	r13
    19e6:	ef 92       	push	r14
    19e8:	ff 92       	push	r15
    19ea:	0f 93       	push	r16
    19ec:	1f 93       	push	r17
    19ee:	cf 93       	push	r28
    19f0:	df 93       	push	r29
    19f2:	98 2e       	mov	r9, r24
    19f4:	86 2e       	mov	r8, r22
    19f6:	5a 01       	movw	r10, r20
    19f8:	69 01       	movw	r12, r18
    19fa:	01 dd       	rcall	.-1534   	; 0x13fe <udd_ep_get_job>
    19fc:	7c 01       	movw	r14, r24
    19fe:	79 2c       	mov	r7, r9
    1a00:	77 1c       	adc	r7, r7
    1a02:	77 24       	eor	r7, r7
    1a04:	77 1c       	adc	r7, r7
    1a06:	c9 2d       	mov	r28, r9
    1a08:	cf 70       	andi	r28, 0x0F	; 15
    1a0a:	d0 e0       	ldi	r29, 0x00	; 0
    1a0c:	cc 0f       	add	r28, r28
    1a0e:	dd 1f       	adc	r29, r29
    1a10:	c7 0d       	add	r28, r7
    1a12:	d1 1d       	adc	r29, r1
    1a14:	cc 0f       	add	r28, r28
    1a16:	dd 1f       	adc	r29, r29
    1a18:	cc 0f       	add	r28, r28
    1a1a:	dd 1f       	adc	r29, r29
    1a1c:	cc 0f       	add	r28, r28
    1a1e:	dd 1f       	adc	r29, r29
    1a20:	c0 50       	subi	r28, 0x00	; 0
    1a22:	d9 4d       	sbci	r29, 0xD9	; 217
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	80 7c       	andi	r24, 0xC0	; 192
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <udd_ep_run+0x54>
    1a2a:	4c c0       	rjmp	.+152    	; 0x1ac4 <udd_ep_run+0xec>
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	80 7c       	andi	r24, 0xC0	; 192
    1a30:	80 3c       	cpi	r24, 0xC0	; 192
    1a32:	19 f0       	breq	.+6      	; 0x1a3a <udd_ep_run+0x62>
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	82 fd       	sbrc	r24, 2
    1a38:	47 c0       	rjmp	.+142    	; 0x1ac8 <udd_ep_run+0xf0>
    1a3a:	8f b7       	in	r24, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	f7 01       	movw	r30, r14
    1a40:	90 81       	ld	r25, Z
    1a42:	90 ff       	sbrs	r25, 0
    1a44:	03 c0       	rjmp	.+6      	; 0x1a4c <udd_ep_run+0x74>
    1a46:	8f bf       	out	0x3f, r24	; 63
    1a48:	71 2c       	mov	r7, r1
    1a4a:	3f c0       	rjmp	.+126    	; 0x1aca <udd_ep_run+0xf2>
    1a4c:	f7 01       	movw	r30, r14
    1a4e:	90 81       	ld	r25, Z
    1a50:	91 60       	ori	r25, 0x01	; 1
    1a52:	90 83       	st	Z, r25
    1a54:	8f bf       	out	0x3f, r24	; 63
    1a56:	f7 01       	movw	r30, r14
    1a58:	a1 82       	std	Z+1, r10	; 0x01
    1a5a:	b2 82       	std	Z+2, r11	; 0x02
    1a5c:	c3 82       	std	Z+3, r12	; 0x03
    1a5e:	d4 82       	std	Z+4, r13	; 0x04
    1a60:	15 82       	std	Z+5, r1	; 0x05
    1a62:	16 82       	std	Z+6, r1	; 0x06
    1a64:	07 83       	std	Z+7, r16	; 0x07
    1a66:	10 87       	std	Z+8, r17	; 0x08
    1a68:	81 10       	cpse	r8, r1
    1a6a:	06 c0       	rjmp	.+12     	; 0x1a78 <udd_ep_run+0xa0>
    1a6c:	91 e0       	ldi	r25, 0x01	; 1
    1a6e:	c1 14       	cp	r12, r1
    1a70:	d1 04       	cpc	r13, r1
    1a72:	19 f0       	breq	.+6      	; 0x1a7a <udd_ep_run+0xa2>
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	01 c0       	rjmp	.+2      	; 0x1a7a <udd_ep_run+0xa2>
    1a78:	91 e0       	ldi	r25, 0x01	; 1
    1a7a:	f7 01       	movw	r30, r14
    1a7c:	80 81       	ld	r24, Z
    1a7e:	90 fb       	bst	r25, 0
    1a80:	81 f9       	bld	r24, 1
    1a82:	8b 7f       	andi	r24, 0xFB	; 251
    1a84:	80 83       	st	Z, r24
    1a86:	77 20       	and	r7, r7
    1a88:	19 f0       	breq	.+6      	; 0x1a90 <udd_ep_run+0xb8>
    1a8a:	1e 82       	std	Y+6, r1	; 0x06
    1a8c:	1f 82       	std	Y+7, r1	; 0x07
    1a8e:	15 c0       	rjmp	.+42     	; 0x1aba <udd_ep_run+0xe2>
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	80 7c       	andi	r24, 0xC0	; 192
    1a94:	80 3c       	cpi	r24, 0xC0	; 192
    1a96:	69 f4       	brne	.+26     	; 0x1ab2 <udd_ep_run+0xda>
    1a98:	ce 01       	movw	r24, r28
    1a9a:	8c dc       	rcall	.-1768   	; 0x13b4 <udd_ep_get_size>
    1a9c:	bc 01       	movw	r22, r24
    1a9e:	c6 01       	movw	r24, r12
    1aa0:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__udivmodhi4>
    1aa4:	89 2b       	or	r24, r25
    1aa6:	29 f0       	breq	.+10     	; 0x1ab2 <udd_ep_run+0xda>
    1aa8:	f7 01       	movw	r30, r14
    1aaa:	80 81       	ld	r24, Z
    1aac:	8e 7f       	andi	r24, 0xFE	; 254
    1aae:	80 83       	st	Z, r24
    1ab0:	0c c0       	rjmp	.+24     	; 0x1aca <udd_ep_run+0xf2>
    1ab2:	1a 82       	std	Y+2, r1	; 0x02
    1ab4:	1b 82       	std	Y+3, r1	; 0x03
    1ab6:	1e 82       	std	Y+6, r1	; 0x06
    1ab8:	1f 82       	std	Y+7, r1	; 0x07
    1aba:	89 2d       	mov	r24, r9
    1abc:	2a dd       	rcall	.-1452   	; 0x1512 <udd_ep_trans_complet>
    1abe:	77 24       	eor	r7, r7
    1ac0:	73 94       	inc	r7
    1ac2:	03 c0       	rjmp	.+6      	; 0x1aca <udd_ep_run+0xf2>
    1ac4:	71 2c       	mov	r7, r1
    1ac6:	01 c0       	rjmp	.+2      	; 0x1aca <udd_ep_run+0xf2>
    1ac8:	71 2c       	mov	r7, r1
    1aca:	87 2d       	mov	r24, r7
    1acc:	df 91       	pop	r29
    1ace:	cf 91       	pop	r28
    1ad0:	1f 91       	pop	r17
    1ad2:	0f 91       	pop	r16
    1ad4:	ff 90       	pop	r15
    1ad6:	ef 90       	pop	r14
    1ad8:	df 90       	pop	r13
    1ada:	cf 90       	pop	r12
    1adc:	bf 90       	pop	r11
    1ade:	af 90       	pop	r10
    1ae0:	9f 90       	pop	r9
    1ae2:	8f 90       	pop	r8
    1ae4:	7f 90       	pop	r7
    1ae6:	08 95       	ret

00001ae8 <udd_ep_abort>:
    1ae8:	ff 92       	push	r15
    1aea:	0f 93       	push	r16
    1aec:	1f 93       	push	r17
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    1af2:	18 2f       	mov	r17, r24
    1af4:	f8 2e       	mov	r15, r24
    1af6:	ff 1c       	adc	r15, r15
    1af8:	ff 24       	eor	r15, r15
    1afa:	ff 1c       	adc	r15, r15
    1afc:	c8 2f       	mov	r28, r24
    1afe:	cf 70       	andi	r28, 0x0F	; 15
    1b00:	d0 e0       	ldi	r29, 0x00	; 0
    1b02:	cc 0f       	add	r28, r28
    1b04:	dd 1f       	adc	r29, r29
    1b06:	cf 0d       	add	r28, r15
    1b08:	d1 1d       	adc	r29, r1
    1b0a:	cc 0f       	add	r28, r28
    1b0c:	dd 1f       	adc	r29, r29
    1b0e:	cc 0f       	add	r28, r28
    1b10:	dd 1f       	adc	r29, r29
    1b12:	cc 0f       	add	r28, r28
    1b14:	dd 1f       	adc	r29, r29
    1b16:	c0 50       	subi	r28, 0x00	; 0
    1b18:	d9 4d       	sbci	r29, 0xD9	; 217
    1b1a:	71 dc       	rcall	.-1822   	; 0x13fe <udd_ep_get_job>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	fe 01       	movw	r30, r28
    1b20:	02 e0       	ldi	r16, 0x02	; 2
    1b22:	05 93       	las	Z, r16
    1b24:	8c 91       	ld	r24, X
    1b26:	80 ff       	sbrs	r24, 0
    1b28:	12 c0       	rjmp	.+36     	; 0x1b4e <udd_ep_abort+0x66>
    1b2a:	8e 7f       	andi	r24, 0xFE	; 254
    1b2c:	8c 93       	st	X, r24
    1b2e:	17 96       	adiw	r26, 0x07	; 7
    1b30:	ed 91       	ld	r30, X+
    1b32:	fc 91       	ld	r31, X
    1b34:	18 97       	sbiw	r26, 0x08	; 8
    1b36:	30 97       	sbiw	r30, 0x00	; 0
    1b38:	51 f0       	breq	.+20     	; 0x1b4e <udd_ep_abort+0x66>
    1b3a:	ff 20       	and	r15, r15
    1b3c:	19 f0       	breq	.+6      	; 0x1b44 <udd_ep_abort+0x5c>
    1b3e:	6e 81       	ldd	r22, Y+6	; 0x06
    1b40:	7f 81       	ldd	r23, Y+7	; 0x07
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <udd_ep_abort+0x60>
    1b44:	6a 81       	ldd	r22, Y+2	; 0x02
    1b46:	7b 81       	ldd	r23, Y+3	; 0x03
    1b48:	41 2f       	mov	r20, r17
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	19 95       	eicall
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	1f 91       	pop	r17
    1b54:	0f 91       	pop	r16
    1b56:	ff 90       	pop	r15
    1b58:	08 95       	ret

00001b5a <udd_ep_free>:
    1b5a:	cf 93       	push	r28
    1b5c:	c8 2f       	mov	r28, r24
    1b5e:	c4 df       	rcall	.-120    	; 0x1ae8 <udd_ep_abort>
    1b60:	ec 2f       	mov	r30, r28
    1b62:	ef 70       	andi	r30, 0x0F	; 15
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	ee 0f       	add	r30, r30
    1b68:	ff 1f       	adc	r31, r31
    1b6a:	8c 2f       	mov	r24, r28
    1b6c:	99 27       	eor	r25, r25
    1b6e:	87 fd       	sbrc	r24, 7
    1b70:	90 95       	com	r25
    1b72:	88 27       	eor	r24, r24
    1b74:	99 0f       	add	r25, r25
    1b76:	88 1f       	adc	r24, r24
    1b78:	99 27       	eor	r25, r25
    1b7a:	e8 0f       	add	r30, r24
    1b7c:	f9 1f       	adc	r31, r25
    1b7e:	ee 0f       	add	r30, r30
    1b80:	ff 1f       	adc	r31, r31
    1b82:	ee 0f       	add	r30, r30
    1b84:	ff 1f       	adc	r31, r31
    1b86:	ee 0f       	add	r30, r30
    1b88:	ff 1f       	adc	r31, r31
    1b8a:	e0 50       	subi	r30, 0x00	; 0
    1b8c:	f9 4d       	sbci	r31, 0xD9	; 217
    1b8e:	11 82       	std	Z+1, r1	; 0x01
    1b90:	cf 91       	pop	r28
    1b92:	08 95       	ret

00001b94 <udd_ep_set_halt>:
    1b94:	0f 93       	push	r16
    1b96:	e8 2f       	mov	r30, r24
    1b98:	ef 70       	andi	r30, 0x0F	; 15
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	ee 0f       	add	r30, r30
    1b9e:	ff 1f       	adc	r31, r31
    1ba0:	28 2f       	mov	r18, r24
    1ba2:	33 27       	eor	r19, r19
    1ba4:	27 fd       	sbrc	r18, 7
    1ba6:	30 95       	com	r19
    1ba8:	22 27       	eor	r18, r18
    1baa:	33 0f       	add	r19, r19
    1bac:	22 1f       	adc	r18, r18
    1bae:	33 27       	eor	r19, r19
    1bb0:	e2 0f       	add	r30, r18
    1bb2:	f3 1f       	adc	r31, r19
    1bb4:	ee 0f       	add	r30, r30
    1bb6:	ff 1f       	adc	r31, r31
    1bb8:	ee 0f       	add	r30, r30
    1bba:	ff 1f       	adc	r31, r31
    1bbc:	ee 0f       	add	r30, r30
    1bbe:	ff 1f       	adc	r31, r31
    1bc0:	e0 50       	subi	r30, 0x00	; 0
    1bc2:	f9 4d       	sbci	r31, 0xD9	; 217
    1bc4:	91 81       	ldd	r25, Z+1	; 0x01
    1bc6:	94 60       	ori	r25, 0x04	; 4
    1bc8:	91 83       	std	Z+1, r25	; 0x01
    1bca:	01 e0       	ldi	r16, 0x01	; 1
    1bcc:	06 93       	lac	Z, r16
    1bce:	8c df       	rcall	.-232    	; 0x1ae8 <udd_ep_abort>
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	0f 91       	pop	r16
    1bd4:	08 95       	ret

00001bd6 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    1bd6:	1f 92       	push	r1
    1bd8:	0f 92       	push	r0
    1bda:	0f b6       	in	r0, 0x3f	; 63
    1bdc:	0f 92       	push	r0
    1bde:	11 24       	eor	r1, r1
    1be0:	08 b6       	in	r0, 0x38	; 56
    1be2:	0f 92       	push	r0
    1be4:	18 be       	out	0x38, r1	; 56
    1be6:	09 b6       	in	r0, 0x39	; 57
    1be8:	0f 92       	push	r0
    1bea:	19 be       	out	0x39, r1	; 57
    1bec:	0b b6       	in	r0, 0x3b	; 59
    1bee:	0f 92       	push	r0
    1bf0:	1b be       	out	0x3b, r1	; 59
    1bf2:	0f 93       	push	r16
    1bf4:	2f 93       	push	r18
    1bf6:	3f 93       	push	r19
    1bf8:	4f 93       	push	r20
    1bfa:	5f 93       	push	r21
    1bfc:	6f 93       	push	r22
    1bfe:	7f 93       	push	r23
    1c00:	8f 93       	push	r24
    1c02:	9f 93       	push	r25
    1c04:	af 93       	push	r26
    1c06:	bf 93       	push	r27
    1c08:	ef 93       	push	r30
    1c0a:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    1c0c:	80 91 cb 04 	lds	r24, 0x04CB
    1c10:	88 23       	and	r24, r24
    1c12:	3c f4       	brge	.+14     	; 0x1c22 <__vector_125+0x4c>
		udd_ack_start_of_frame_event();
    1c14:	80 e8       	ldi	r24, 0x80	; 128
    1c16:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    1c1a:	0e 94 d2 05 	call	0xba4	; 0xba4 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    1c1e:	fd d7       	rcall	.+4090   	; 0x2c1a <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    1c20:	8a c0       	rjmp	.+276    	; 0x1d36 <__vector_125+0x160>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    1c22:	80 91 cb 04 	lds	r24, 0x04CB
    1c26:	82 ff       	sbrs	r24, 2
    1c28:	20 c0       	rjmp	.+64     	; 0x1c6a <__vector_125+0x94>
		udd_ack_underflow_event();
    1c2a:	84 e0       	ldi	r24, 0x04	; 4
    1c2c:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    1c30:	80 91 08 27 	lds	r24, 0x2708
    1c34:	86 ff       	sbrs	r24, 6
    1c36:	7f c0       	rjmp	.+254    	; 0x1d36 <__vector_125+0x160>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1c38:	80 91 cc 04 	lds	r24, 0x04CC
    1c3c:	81 fd       	sbrc	r24, 1
    1c3e:	7b c0       	rjmp	.+246    	; 0x1d36 <__vector_125+0x160>
    1c40:	f9 db       	rcall	.-2062   	; 0x1434 <udd_ctrl_interrupt_tc_setup>
    1c42:	81 11       	cpse	r24, r1
    1c44:	78 c0       	rjmp	.+240    	; 0x1d36 <__vector_125+0x160>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1c46:	80 91 e5 26 	lds	r24, 0x26E5
    1c4a:	81 30       	cpi	r24, 0x01	; 1
    1c4c:	11 f4       	brne	.+4      	; 0x1c52 <__vector_125+0x7c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    1c4e:	2e db       	rcall	.-2468   	; 0x12ac <udd_ctrl_send_zlp_in>
    1c50:	72 c0       	rjmp	.+228    	; 0x1d36 <__vector_125+0x160>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1c52:	84 30       	cpi	r24, 0x04	; 4
    1c54:	09 f0       	breq	.+2      	; 0x1c58 <__vector_125+0x82>
    1c56:	6f c0       	rjmp	.+222    	; 0x1d36 <__vector_125+0x160>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    1c58:	e9 e0       	ldi	r30, 0x09	; 9
    1c5a:	f7 e2       	ldi	r31, 0x27	; 39
    1c5c:	04 e0       	ldi	r16, 0x04	; 4
    1c5e:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1c60:	e1 e0       	ldi	r30, 0x01	; 1
    1c62:	f7 e2       	ldi	r31, 0x27	; 39
    1c64:	04 e0       	ldi	r16, 0x04	; 4
    1c66:	05 93       	las	Z, r16
    1c68:	66 c0       	rjmp	.+204    	; 0x1d36 <__vector_125+0x160>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    1c6a:	80 91 cb 04 	lds	r24, 0x04CB
    1c6e:	81 ff       	sbrs	r24, 1
    1c70:	5d c0       	rjmp	.+186    	; 0x1d2c <__vector_125+0x156>
		udd_ack_overflow_event();
    1c72:	82 e0       	ldi	r24, 0x02	; 2
    1c74:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    1c78:	80 91 00 27 	lds	r24, 0x2700
    1c7c:	86 ff       	sbrs	r24, 6
    1c7e:	5b c0       	rjmp	.+182    	; 0x1d36 <__vector_125+0x160>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1c80:	80 91 cc 04 	lds	r24, 0x04CC
    1c84:	81 fd       	sbrc	r24, 1
    1c86:	57 c0       	rjmp	.+174    	; 0x1d36 <__vector_125+0x160>
    1c88:	d5 db       	rcall	.-2134   	; 0x1434 <udd_ctrl_interrupt_tc_setup>
    1c8a:	81 11       	cpse	r24, r1
    1c8c:	54 c0       	rjmp	.+168    	; 0x1d36 <__vector_125+0x160>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1c8e:	80 91 e5 26 	lds	r24, 0x26E5
    1c92:	82 30       	cpi	r24, 0x02	; 2
    1c94:	41 f4       	brne	.+16     	; 0x1ca6 <__vector_125+0xd0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1c96:	84 e0       	ldi	r24, 0x04	; 4
    1c98:	80 93 e5 26 	sts	0x26E5, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    1c9c:	e0 e0       	ldi	r30, 0x00	; 0
    1c9e:	f7 e2       	ldi	r31, 0x27	; 39
    1ca0:	02 e0       	ldi	r16, 0x02	; 2
    1ca2:	06 93       	lac	Z, r16
    1ca4:	48 c0       	rjmp	.+144    	; 0x1d36 <__vector_125+0x160>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1ca6:	83 30       	cpi	r24, 0x03	; 3
    1ca8:	09 f0       	breq	.+2      	; 0x1cac <__vector_125+0xd6>
    1caa:	45 c0       	rjmp	.+138    	; 0x1d36 <__vector_125+0x160>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    1cac:	e9 e0       	ldi	r30, 0x09	; 9
    1cae:	f7 e2       	ldi	r31, 0x27	; 39
    1cb0:	04 e0       	ldi	r16, 0x04	; 4
    1cb2:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1cb4:	e1 e0       	ldi	r30, 0x01	; 1
    1cb6:	f7 e2       	ldi	r31, 0x27	; 39
    1cb8:	04 e0       	ldi	r16, 0x04	; 4
    1cba:	05 93       	las	Z, r16
    1cbc:	3c c0       	rjmp	.+120    	; 0x1d36 <__vector_125+0x160>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    1cbe:	80 e1       	ldi	r24, 0x10	; 16
    1cc0:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	10 df       	rcall	.-480    	; 0x1ae8 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    1cc8:	81 e8       	ldi	r24, 0x81	; 129
    1cca:	0e df       	rcall	.-484    	; 0x1ae8 <udd_ep_abort>
		}
#endif
		udc_reset();
    1ccc:	0e 94 ab 05 	call	0xb56	; 0xb56 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    1cd0:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1cd4:	e1 e0       	ldi	r30, 0x01	; 1
    1cd6:	f7 e2       	ldi	r31, 0x27	; 39
    1cd8:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    1cda:	96 e0       	ldi	r25, 0x06	; 6
    1cdc:	90 93 00 27 	sts	0x2700, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1ce0:	83 e4       	ldi	r24, 0x43	; 67
    1ce2:	80 83       	st	Z, r24
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1ce4:	e9 e0       	ldi	r30, 0x09	; 9
    1ce6:	f7 e2       	ldi	r31, 0x27	; 39
    1ce8:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    1cea:	90 93 08 27 	sts	0x2708, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1cee:	80 83       	st	Z, r24
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    1cf0:	81 ea       	ldi	r24, 0xA1	; 161
    1cf2:	96 e2       	ldi	r25, 0x26	; 38
    1cf4:	80 93 04 27 	sts	0x2704, r24
    1cf8:	90 93 05 27 	sts	0x2705, r25
		// Reset endpoint control management
		udd_ctrl_init();
    1cfc:	9e da       	rcall	.-2756   	; 0x123a <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    1cfe:	1b c0       	rjmp	.+54     	; 0x1d36 <__vector_125+0x160>
	}

	if (udd_is_suspend_event()) {
    1d00:	80 91 cb 04 	lds	r24, 0x04CB
    1d04:	86 ff       	sbrs	r24, 6
    1d06:	07 c0       	rjmp	.+14     	; 0x1d16 <__vector_125+0x140>
		udd_ack_suspend_event();
    1d08:	80 e4       	ldi	r24, 0x40	; 64
    1d0a:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	75 da       	rcall	.-2838   	; 0x11fc <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    1d12:	7d d7       	rcall	.+3834   	; 0x2c0e <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    1d14:	10 c0       	rjmp	.+32     	; 0x1d36 <__vector_125+0x160>
	}

	if (udd_is_resume_event()) {
    1d16:	80 91 cb 04 	lds	r24, 0x04CB
    1d1a:	85 ff       	sbrs	r24, 5
    1d1c:	0c c0       	rjmp	.+24     	; 0x1d36 <__vector_125+0x160>
		udd_ack_resume_event();
    1d1e:	80 e2       	ldi	r24, 0x20	; 32
    1d20:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	6a da       	rcall	.-2860   	; 0x11fc <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    1d28:	75 d7       	rcall	.+3818   	; 0x2c14 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    1d2a:	05 c0       	rjmp	.+10     	; 0x1d36 <__vector_125+0x160>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    1d2c:	80 91 cb 04 	lds	r24, 0x04CB
    1d30:	84 ff       	sbrs	r24, 4
    1d32:	e6 cf       	rjmp	.-52     	; 0x1d00 <__vector_125+0x12a>
    1d34:	c4 cf       	rjmp	.-120    	; 0x1cbe <__vector_125+0xe8>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    1d36:	ff 91       	pop	r31
    1d38:	ef 91       	pop	r30
    1d3a:	bf 91       	pop	r27
    1d3c:	af 91       	pop	r26
    1d3e:	9f 91       	pop	r25
    1d40:	8f 91       	pop	r24
    1d42:	7f 91       	pop	r23
    1d44:	6f 91       	pop	r22
    1d46:	5f 91       	pop	r21
    1d48:	4f 91       	pop	r20
    1d4a:	3f 91       	pop	r19
    1d4c:	2f 91       	pop	r18
    1d4e:	0f 91       	pop	r16
    1d50:	0f 90       	pop	r0
    1d52:	0b be       	out	0x3b, r0	; 59
    1d54:	0f 90       	pop	r0
    1d56:	09 be       	out	0x39, r0	; 57
    1d58:	0f 90       	pop	r0
    1d5a:	08 be       	out	0x38, r0	; 56
    1d5c:	0f 90       	pop	r0
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	0f 90       	pop	r0
    1d62:	1f 90       	pop	r1
    1d64:	18 95       	reti

00001d66 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    1d66:	1f 92       	push	r1
    1d68:	0f 92       	push	r0
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	0f 92       	push	r0
    1d6e:	11 24       	eor	r1, r1
    1d70:	08 b6       	in	r0, 0x38	; 56
    1d72:	0f 92       	push	r0
    1d74:	18 be       	out	0x38, r1	; 56
    1d76:	09 b6       	in	r0, 0x39	; 57
    1d78:	0f 92       	push	r0
    1d7a:	19 be       	out	0x39, r1	; 57
    1d7c:	0a b6       	in	r0, 0x3a	; 58
    1d7e:	0f 92       	push	r0
    1d80:	1a be       	out	0x3a, r1	; 58
    1d82:	0b b6       	in	r0, 0x3b	; 59
    1d84:	0f 92       	push	r0
    1d86:	1b be       	out	0x3b, r1	; 59
    1d88:	0f 93       	push	r16
    1d8a:	1f 93       	push	r17
    1d8c:	2f 93       	push	r18
    1d8e:	3f 93       	push	r19
    1d90:	4f 93       	push	r20
    1d92:	5f 93       	push	r21
    1d94:	6f 93       	push	r22
    1d96:	7f 93       	push	r23
    1d98:	8f 93       	push	r24
    1d9a:	9f 93       	push	r25
    1d9c:	af 93       	push	r26
    1d9e:	bf 93       	push	r27
    1da0:	cf 93       	push	r28
    1da2:	df 93       	push	r29
    1da4:	ef 93       	push	r30
    1da6:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    1da8:	80 91 cc 04 	lds	r24, 0x04CC
    1dac:	81 fd       	sbrc	r24, 1
    1dae:	03 c0       	rjmp	.+6      	; 0x1db6 <__vector_126+0x50>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    1db0:	41 db       	rcall	.-2430   	; 0x1434 <udd_ctrl_interrupt_tc_setup>
    1db2:	81 11       	cpse	r24, r1
    1db4:	b9 c0       	rjmp	.+370    	; 0x1f28 <__vector_126+0x1c2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    1db6:	82 e0       	ldi	r24, 0x02	; 2
    1db8:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    1dbc:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    1dc0:	81 95       	neg	r24
    1dc2:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    1dc4:	e0 e0       	ldi	r30, 0x00	; 0
    1dc6:	f7 e2       	ldi	r31, 0x27	; 39
    1dc8:	e8 1b       	sub	r30, r24
    1dca:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    1dcc:	20 81       	ld	r18, Z
    1dce:	31 81       	ldd	r19, Z+1	; 0x01
    1dd0:	20 50       	subi	r18, 0x00	; 0
    1dd2:	37 42       	sbci	r19, 0x27	; 39
    1dd4:	36 95       	lsr	r19
    1dd6:	27 95       	ror	r18
    1dd8:	36 95       	lsr	r19
    1dda:	27 95       	ror	r18
    1ddc:	36 95       	lsr	r19
    1dde:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    1de0:	82 2f       	mov	r24, r18
    1de2:	86 95       	lsr	r24
    1de4:	20 ff       	sbrs	r18, 0
    1de6:	02 c0       	rjmp	.+4      	; 0x1dec <__vector_126+0x86>
    1de8:	90 e8       	ldi	r25, 0x80	; 128
    1dea:	01 c0       	rjmp	.+2      	; 0x1dee <__vector_126+0x88>
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1df0:	e8 2f       	mov	r30, r24
    1df2:	ef 70       	andi	r30, 0x0F	; 15
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	ee 0f       	add	r30, r30
    1df8:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	33 27       	eor	r19, r19
    1dfe:	27 fd       	sbrc	r18, 7
    1e00:	30 95       	com	r19
    1e02:	22 27       	eor	r18, r18
    1e04:	33 0f       	add	r19, r19
    1e06:	22 1f       	adc	r18, r18
    1e08:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1e0a:	e2 0f       	add	r30, r18
    1e0c:	f3 1f       	adc	r31, r19
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    1e0e:	ee 0f       	add	r30, r30
    1e10:	ff 1f       	adc	r31, r31
    1e12:	ee 0f       	add	r30, r30
    1e14:	ff 1f       	adc	r31, r31
    1e16:	ee 0f       	add	r30, r30
    1e18:	ff 1f       	adc	r31, r31
    1e1a:	e0 50       	subi	r30, 0x00	; 0
    1e1c:	f9 4d       	sbci	r31, 0xD9	; 217
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    1e1e:	90 81       	ld	r25, Z
    1e20:	95 ff       	sbrs	r25, 5
    1e22:	82 c0       	rjmp	.+260    	; 0x1f28 <__vector_126+0x1c2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    1e24:	00 e2       	ldi	r16, 0x20	; 32
    1e26:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    1e28:	81 11       	cpse	r24, r1
    1e2a:	79 c0       	rjmp	.+242    	; 0x1f1e <__vector_126+0x1b8>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1e2c:	80 91 e5 26 	lds	r24, 0x26E5
    1e30:	84 30       	cpi	r24, 0x04	; 4
    1e32:	19 f4       	brne	.+6      	; 0x1e3a <__vector_126+0xd4>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    1e34:	49 da       	rcall	.-2926   	; 0x12c8 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    1e36:	01 da       	rcall	.-3070   	; 0x123a <udd_ctrl_init>
    1e38:	77 c0       	rjmp	.+238    	; 0x1f28 <__vector_126+0x1c2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    1e3a:	c0 91 02 27 	lds	r28, 0x2702
    1e3e:	d0 91 03 27 	lds	r29, 0x2703

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    1e42:	80 91 5a 27 	lds	r24, 0x275A
    1e46:	90 91 5b 27 	lds	r25, 0x275B
    1e4a:	00 91 e1 26 	lds	r16, 0x26E1
    1e4e:	10 91 e2 26 	lds	r17, 0x26E2
    1e52:	98 01       	movw	r18, r16
    1e54:	2c 0f       	add	r18, r28
    1e56:	3d 1f       	adc	r19, r29
    1e58:	82 17       	cp	r24, r18
    1e5a:	93 07       	cpc	r25, r19
    1e5c:	18 f4       	brcc	.+6      	; 0x1e64 <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1e5e:	ec 01       	movw	r28, r24
    1e60:	c0 1b       	sub	r28, r16
    1e62:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    1e64:	80 91 58 27 	lds	r24, 0x2758
    1e68:	90 91 59 27 	lds	r25, 0x2759
    1e6c:	ae 01       	movw	r20, r28
    1e6e:	61 ea       	ldi	r22, 0xA1	; 161
    1e70:	76 e2       	ldi	r23, 0x26	; 38
    1e72:	80 0f       	add	r24, r16
    1e74:	91 1f       	adc	r25, r17
    1e76:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    1e7a:	0c 0f       	add	r16, r28
    1e7c:	1d 1f       	adc	r17, r29
    1e7e:	00 93 e1 26 	sts	0x26E1, r16
    1e82:	10 93 e2 26 	sts	0x26E2, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1e86:	c0 34       	cpi	r28, 0x40	; 64
    1e88:	d1 05       	cpc	r29, r1
    1e8a:	69 f4       	brne	.+26     	; 0x1ea6 <__vector_126+0x140>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    1e8c:	80 91 e3 26 	lds	r24, 0x26E3
    1e90:	90 91 e4 26 	lds	r25, 0x26E4
    1e94:	80 0f       	add	r24, r16
    1e96:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1e98:	20 91 56 27 	lds	r18, 0x2756
    1e9c:	30 91 57 27 	lds	r19, 0x2757
    1ea0:	82 17       	cp	r24, r18
    1ea2:	93 07       	cpc	r25, r19
    1ea4:	88 f0       	brcs	.+34     	; 0x1ec8 <__vector_126+0x162>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    1ea6:	00 93 5a 27 	sts	0x275A, r16
    1eaa:	10 93 5b 27 	sts	0x275B, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    1eae:	e0 91 5e 27 	lds	r30, 0x275E
    1eb2:	f0 91 5f 27 	lds	r31, 0x275F
    1eb6:	30 97       	sbiw	r30, 0x00	; 0
    1eb8:	29 f0       	breq	.+10     	; 0x1ec4 <__vector_126+0x15e>
			if (!udd_g_ctrlreq.over_under_run()) {
    1eba:	19 95       	eicall
    1ebc:	81 11       	cpse	r24, r1
    1ebe:	02 c0       	rjmp	.+4      	; 0x1ec4 <__vector_126+0x15e>
				// Stall ZLP
				udd_ctrl_stall_data();
    1ec0:	e7 d9       	rcall	.-3122   	; 0x1290 <udd_ctrl_stall_data>
    1ec2:	32 c0       	rjmp	.+100    	; 0x1f28 <__vector_126+0x1c2>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    1ec4:	f3 d9       	rcall	.-3098   	; 0x12ac <udd_ctrl_send_zlp_in>
    1ec6:	30 c0       	rjmp	.+96     	; 0x1f28 <__vector_126+0x1c2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    1ec8:	80 91 5a 27 	lds	r24, 0x275A
    1ecc:	90 91 5b 27 	lds	r25, 0x275B
    1ed0:	08 17       	cp	r16, r24
    1ed2:	19 07       	cpc	r17, r25
    1ed4:	f9 f4       	brne	.+62     	; 0x1f14 <__vector_126+0x1ae>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    1ed6:	e0 91 5e 27 	lds	r30, 0x275E
    1eda:	f0 91 5f 27 	lds	r31, 0x275F
    1ede:	30 97       	sbiw	r30, 0x00	; 0
    1ee0:	11 f4       	brne	.+4      	; 0x1ee6 <__vector_126+0x180>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    1ee2:	d6 d9       	rcall	.-3156   	; 0x1290 <udd_ctrl_stall_data>
    1ee4:	21 c0       	rjmp	.+66     	; 0x1f28 <__vector_126+0x1c2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    1ee6:	19 95       	eicall
    1ee8:	81 11       	cpse	r24, r1
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <__vector_126+0x18a>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    1eec:	d1 d9       	rcall	.-3166   	; 0x1290 <udd_ctrl_stall_data>
    1eee:	1c c0       	rjmp	.+56     	; 0x1f28 <__vector_126+0x1c2>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1ef0:	20 91 e3 26 	lds	r18, 0x26E3
    1ef4:	30 91 e4 26 	lds	r19, 0x26E4
    1ef8:	80 91 e1 26 	lds	r24, 0x26E1
    1efc:	90 91 e2 26 	lds	r25, 0x26E2
    1f00:	82 0f       	add	r24, r18
    1f02:	93 1f       	adc	r25, r19
    1f04:	80 93 e3 26 	sts	0x26E3, r24
    1f08:	90 93 e4 26 	sts	0x26E4, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    1f0c:	10 92 e1 26 	sts	0x26E1, r1
    1f10:	10 92 e2 26 	sts	0x26E2, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    1f14:	e0 e0       	ldi	r30, 0x00	; 0
    1f16:	f7 e2       	ldi	r31, 0x27	; 39
    1f18:	02 e0       	ldi	r16, 0x02	; 2
    1f1a:	06 93       	lac	Z, r16
    1f1c:	05 c0       	rjmp	.+10     	; 0x1f28 <__vector_126+0x1c2>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    1f1e:	80 38       	cpi	r24, 0x80	; 128
    1f20:	11 f4       	brne	.+4      	; 0x1f26 <__vector_126+0x1c0>
		udd_ctrl_in_sent();
    1f22:	da d9       	rcall	.-3148   	; 0x12d8 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    1f24:	01 c0       	rjmp	.+2      	; 0x1f28 <__vector_126+0x1c2>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    1f26:	f5 da       	rcall	.-2582   	; 0x1512 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    1f28:	ff 91       	pop	r31
    1f2a:	ef 91       	pop	r30
    1f2c:	df 91       	pop	r29
    1f2e:	cf 91       	pop	r28
    1f30:	bf 91       	pop	r27
    1f32:	af 91       	pop	r26
    1f34:	9f 91       	pop	r25
    1f36:	8f 91       	pop	r24
    1f38:	7f 91       	pop	r23
    1f3a:	6f 91       	pop	r22
    1f3c:	5f 91       	pop	r21
    1f3e:	4f 91       	pop	r20
    1f40:	3f 91       	pop	r19
    1f42:	2f 91       	pop	r18
    1f44:	1f 91       	pop	r17
    1f46:	0f 91       	pop	r16
    1f48:	0f 90       	pop	r0
    1f4a:	0b be       	out	0x3b, r0	; 59
    1f4c:	0f 90       	pop	r0
    1f4e:	0a be       	out	0x3a, r0	; 58
    1f50:	0f 90       	pop	r0
    1f52:	09 be       	out	0x39, r0	; 57
    1f54:	0f 90       	pop	r0
    1f56:	08 be       	out	0x38, r0	; 56
    1f58:	0f 90       	pop	r0
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	0f 90       	pop	r0
    1f5e:	1f 90       	pop	r1
    1f60:	18 95       	reti

00001f62 <uart_config>:
#include "uart.h"
#include "main.h"
#include "ui.h"

void uart_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
    1f62:	ff 92       	push	r15
    1f64:	0f 93       	push	r16
    1f66:	1f 93       	push	r17
    1f68:	cf 93       	push	r28
    1f6a:	df 93       	push	r29
    1f6c:	8b 01       	movw	r16, r22
	uint8_t reg_ctrlc;
	uint16_t bsel;

	reg_ctrlc = USART_CMODE_ASYNCHRONOUS_gc;

	switch (cfg->bCharFormat) {
    1f6e:	fb 01       	movw	r30, r22
    1f70:	84 81       	ldd	r24, Z+4	; 0x04
    1f72:	82 30       	cpi	r24, 0x02	; 2
    1f74:	11 f0       	breq	.+4      	; 0x1f7a <uart_config+0x18>
void uart_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
	uint8_t reg_ctrlc;
	uint16_t bsel;

	reg_ctrlc = USART_CMODE_ASYNCHRONOUS_gc;
    1f76:	f1 2c       	mov	r15, r1
    1f78:	03 c0       	rjmp	.+6      	; 0x1f80 <uart_config+0x1e>

	switch (cfg->bCharFormat) {
	case CDC_STOP_BITS_2:
		reg_ctrlc |= USART_SBMODE_bm;
    1f7a:	68 94       	set
    1f7c:	ff 24       	eor	r15, r15
    1f7e:	f3 f8       	bld	r15, 3
	default:
		// Default stop bit = 1 stop bit
		break;
	}

	switch (cfg->bParityType) {
    1f80:	f8 01       	movw	r30, r16
    1f82:	85 81       	ldd	r24, Z+5	; 0x05
    1f84:	81 30       	cpi	r24, 0x01	; 1
    1f86:	31 f0       	breq	.+12     	; 0x1f94 <uart_config+0x32>
    1f88:	82 30       	cpi	r24, 0x02	; 2
    1f8a:	39 f4       	brne	.+14     	; 0x1f9a <uart_config+0x38>
	case CDC_PAR_EVEN:
		reg_ctrlc |= USART_PMODE_EVEN_gc;
    1f8c:	ff 2d       	mov	r31, r15
    1f8e:	f0 62       	ori	r31, 0x20	; 32
    1f90:	ff 2e       	mov	r15, r31
		break;
    1f92:	03 c0       	rjmp	.+6      	; 0x1f9a <uart_config+0x38>
	case CDC_PAR_ODD:
		reg_ctrlc |= USART_PMODE_ODD_gc;
    1f94:	8f 2d       	mov	r24, r15
    1f96:	80 63       	ori	r24, 0x30	; 48
    1f98:	f8 2e       	mov	r15, r24
	case CDC_PAR_NONE:
		reg_ctrlc |= USART_PMODE_DISABLED_gc;
		break;
	}

	switch (cfg->bDataBits) {
    1f9a:	f8 01       	movw	r30, r16
    1f9c:	86 81       	ldd	r24, Z+6	; 0x06
    1f9e:	86 30       	cpi	r24, 0x06	; 6
    1fa0:	49 f0       	breq	.+18     	; 0x1fb4 <uart_config+0x52>
    1fa2:	18 f4       	brcc	.+6      	; 0x1faa <uart_config+0x48>
    1fa4:	85 30       	cpi	r24, 0x05	; 5
    1fa6:	a9 f0       	breq	.+42     	; 0x1fd2 <uart_config+0x70>
    1fa8:	0d c0       	rjmp	.+26     	; 0x1fc4 <uart_config+0x62>
    1faa:	87 30       	cpi	r24, 0x07	; 7
    1fac:	39 f0       	breq	.+14     	; 0x1fbc <uart_config+0x5a>
    1fae:	89 30       	cpi	r24, 0x09	; 9
    1fb0:	69 f0       	breq	.+26     	; 0x1fcc <uart_config+0x6a>
    1fb2:	08 c0       	rjmp	.+16     	; 0x1fc4 <uart_config+0x62>
	case 5:
		reg_ctrlc |= USART_CHSIZE_5BIT_gc;
		break;
	case 6:
		reg_ctrlc |= USART_CHSIZE_6BIT_gc;
    1fb4:	ff 2d       	mov	r31, r15
    1fb6:	f1 60       	ori	r31, 0x01	; 1
    1fb8:	ff 2e       	mov	r15, r31
		break;
    1fba:	0b c0       	rjmp	.+22     	; 0x1fd2 <uart_config+0x70>
	case 7:
		reg_ctrlc |= USART_CHSIZE_7BIT_gc;
    1fbc:	8f 2d       	mov	r24, r15
    1fbe:	82 60       	ori	r24, 0x02	; 2
    1fc0:	f8 2e       	mov	r15, r24
		break;
    1fc2:	07 c0       	rjmp	.+14     	; 0x1fd2 <uart_config+0x70>
	default:
	case 8:
		reg_ctrlc |= USART_CHSIZE_8BIT_gc;
    1fc4:	ef 2d       	mov	r30, r15
    1fc6:	e3 60       	ori	r30, 0x03	; 3
    1fc8:	fe 2e       	mov	r15, r30
		break;
    1fca:	03 c0       	rjmp	.+6      	; 0x1fd2 <uart_config+0x70>
	case 9:
		reg_ctrlc |= USART_CHSIZE_9BIT_gc;
    1fcc:	ff 2d       	mov	r31, r15
    1fce:	f7 60       	ori	r31, 0x07	; 7
    1fd0:	ff 2e       	mov	r15, r31
		break;
	}

	sysclk_enable_module(USART_PORT_SYSCLK, USART_SYSCLK);
    1fd2:	60 e1       	ldi	r22, 0x10	; 16
    1fd4:	85 e0       	ldi	r24, 0x05	; 5
    1fd6:	4e d4       	rcall	.+2204   	; 0x2874 <sysclk_enable_module>
	// Set configuration
	USART.CTRLC = reg_ctrlc;
    1fd8:	c0 ea       	ldi	r28, 0xA0	; 160
    1fda:	da e0       	ldi	r29, 0x0A	; 10
    1fdc:	fd 82       	std	Y+5, r15	; 0x05
	// Update baudrate
	bsel = (uint16_t) (((((((uint32_t) sysclk_get_cpu_hz()) << 1) / ((uint32_t)
		le32_to_cpu(cfg->dwDTERate) * 8)) + 1) >> 1) - 1);
    1fde:	f8 01       	movw	r30, r16
    1fe0:	80 81       	ld	r24, Z
    1fe2:	91 81       	ldd	r25, Z+1	; 0x01
    1fe4:	a2 81       	ldd	r26, Z+2	; 0x02
    1fe6:	b3 81       	ldd	r27, Z+3	; 0x03
    1fe8:	88 0f       	add	r24, r24
    1fea:	99 1f       	adc	r25, r25
    1fec:	aa 1f       	adc	r26, r26
    1fee:	bb 1f       	adc	r27, r27
    1ff0:	88 0f       	add	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	aa 1f       	adc	r26, r26
    1ff6:	bb 1f       	adc	r27, r27
    1ff8:	9c 01       	movw	r18, r24
    1ffa:	ad 01       	movw	r20, r26
    1ffc:	22 0f       	add	r18, r18
    1ffe:	33 1f       	adc	r19, r19
    2000:	44 1f       	adc	r20, r20
    2002:	55 1f       	adc	r21, r21

	sysclk_enable_module(USART_PORT_SYSCLK, USART_SYSCLK);
	// Set configuration
	USART.CTRLC = reg_ctrlc;
	// Update baudrate
	bsel = (uint16_t) (((((((uint32_t) sysclk_get_cpu_hz()) << 1) / ((uint32_t)
    2004:	60 e0       	ldi	r22, 0x00	; 0
    2006:	79 e0       	ldi	r23, 0x09	; 9
    2008:	8d e3       	ldi	r24, 0x3D	; 61
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	35 d6       	rcall	.+3178   	; 0x2c78 <__udivmodsi4>
		le32_to_cpu(cfg->dwDTERate) * 8)) + 1) >> 1) - 1);
    200e:	da 01       	movw	r26, r20
    2010:	c9 01       	movw	r24, r18
    2012:	01 96       	adiw	r24, 0x01	; 1
    2014:	a1 1d       	adc	r26, r1
    2016:	b1 1d       	adc	r27, r1
    2018:	b6 95       	lsr	r27
    201a:	a7 95       	ror	r26
    201c:	97 95       	ror	r25
    201e:	87 95       	ror	r24

	sysclk_enable_module(USART_PORT_SYSCLK, USART_SYSCLK);
	// Set configuration
	USART.CTRLC = reg_ctrlc;
	// Update baudrate
	bsel = (uint16_t) (((((((uint32_t) sysclk_get_cpu_hz()) << 1) / ((uint32_t)
    2020:	9c 01       	movw	r18, r24
    2022:	21 50       	subi	r18, 0x01	; 1
    2024:	31 09       	sbc	r19, r1
		le32_to_cpu(cfg->dwDTERate) * 8)) + 1) >> 1) - 1);
	USART.BAUDCTRLA = bsel & 0xFF;
    2026:	2e 83       	std	Y+6, r18	; 0x06
	USART.BAUDCTRLB = bsel >> 8;
    2028:	3f 83       	std	Y+7, r19	; 0x07
	/*sysclk_enable_module(V_USART_PORT_SYSCLK, USART_SYSCLK);
	V_USART.CTRLC = reg_ctrlc;
	V_USART.BAUDCTRLA = bsel & 0xFF;
	V_USART.BAUDCTRLB = bsel >> 8;*/
	
}
    202a:	df 91       	pop	r29
    202c:	cf 91       	pop	r28
    202e:	1f 91       	pop	r17
    2030:	0f 91       	pop	r16
    2032:	ff 90       	pop	r15
    2034:	08 95       	ret

00002036 <uart_open>:

void uart_open(uint8_t port)
{
	sysclk_enable_module(USART_PORT_SYSCLK, USART_SYSCLK);
    2036:	60 e1       	ldi	r22, 0x10	; 16
    2038:	85 e0       	ldi	r24, 0x05	; 5
    203a:	1c d4       	rcall	.+2104   	; 0x2874 <sysclk_enable_module>
	// Open UART communication
	USART_PORT.DIRSET = USART_PORT_PIN_TX; // TX as output.
    203c:	e0 e8       	ldi	r30, 0x80	; 128
    203e:	f6 e0       	ldi	r31, 0x06	; 6
    2040:	83 e2       	ldi	r24, 0x23	; 35
    2042:	81 83       	std	Z+1, r24	; 0x01
	USART_PORT.DIRCLR = USART_PORT_PIN_RX; // RX as input.
    2044:	82 e2       	ldi	r24, 0x22	; 34
    2046:	82 83       	std	Z+2, r24	; 0x02

	// Enable both RX and TX
	USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_CLK2X_bm;
    2048:	e0 ea       	ldi	r30, 0xA0	; 160
    204a:	fa e0       	ldi	r31, 0x0A	; 10
    204c:	8c e1       	ldi	r24, 0x1C	; 28
    204e:	84 83       	std	Z+4, r24	; 0x04
	// Enable interrupt with priority higher than USB
	USART.CTRLA = (register8_t) USART_RXCINTLVL_HI_gc | (register8_t)
    2050:	80 e3       	ldi	r24, 0x30	; 48
    2052:	83 83       	std	Z+3, r24	; 0x03
    2054:	08 95       	ret

00002056 <uart_close>:
			USART_DREINTLVL_OFF_gc;
}

void uart_close(uint8_t port)
{
	sysclk_disable_module(USART_PORT_SYSCLK, USART_SYSCLK);
    2056:	60 e1       	ldi	r22, 0x10	; 16
    2058:	85 e0       	ldi	r24, 0x05	; 5
    205a:	18 d4       	rcall	.+2096   	; 0x288c <sysclk_disable_module>
	// Disable interrupts
	USART.CTRLA = 0;
    205c:	e0 ea       	ldi	r30, 0xA0	; 160
    205e:	fa e0       	ldi	r31, 0x0A	; 10
    2060:	13 82       	std	Z+3, r1	; 0x03
	// Close RS232 communication
	USART.CTRLB = 0;
    2062:	14 82       	std	Z+4, r1	; 0x04
    2064:	08 95       	ret

00002066 <uart_rx_notify>:
}

void uart_rx_notify(uint8_t port)
{
	// If UART is open
	if (USART.CTRLA!=0) {
    2066:	e0 ea       	ldi	r30, 0xA0	; 160
    2068:	fa e0       	ldi	r31, 0x0A	; 10
    206a:	83 81       	ldd	r24, Z+3	; 0x03
    206c:	88 23       	and	r24, r24
    206e:	11 f0       	breq	.+4      	; 0x2074 <uart_rx_notify+0xe>
		// Enable UART TX interrupt to send values
		USART.CTRLA = (register8_t) USART_RXCINTLVL_HI_gc | (register8_t)
    2070:	83 e3       	ldi	r24, 0x33	; 51
    2072:	83 83       	std	Z+3, r24	; 0x03
    2074:	08 95       	ret

00002076 <__vector_58>:
	}
}


ISR(USART_RX_Vect)
{
    2076:	1f 92       	push	r1
    2078:	0f 92       	push	r0
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	0f 92       	push	r0
    207e:	11 24       	eor	r1, r1
    2080:	08 b6       	in	r0, 0x38	; 56
    2082:	0f 92       	push	r0
    2084:	18 be       	out	0x38, r1	; 56
    2086:	09 b6       	in	r0, 0x39	; 57
    2088:	0f 92       	push	r0
    208a:	19 be       	out	0x39, r1	; 57
    208c:	0b b6       	in	r0, 0x3b	; 59
    208e:	0f 92       	push	r0
    2090:	1b be       	out	0x3b, r1	; 59
    2092:	2f 93       	push	r18
    2094:	3f 93       	push	r19
    2096:	4f 93       	push	r20
    2098:	5f 93       	push	r21
    209a:	6f 93       	push	r22
    209c:	7f 93       	push	r23
    209e:	8f 93       	push	r24
    20a0:	9f 93       	push	r25
    20a2:	af 93       	push	r26
    20a4:	bf 93       	push	r27
    20a6:	cf 93       	push	r28
    20a8:	ef 93       	push	r30
    20aa:	ff 93       	push	r31
	uint8_t value;

	// Data received
	ui_com_tx_start();
    20ac:	0e 94 33 01 	call	0x266	; 0x266 <ui_com_tx_start>

	if (0 != (USART.STATUS & (USART_FERR_bm | USART_BUFOVF_bm))) {
    20b0:	e0 ea       	ldi	r30, 0xA0	; 160
    20b2:	fa e0       	ldi	r31, 0x0A	; 10
    20b4:	81 81       	ldd	r24, Z+1	; 0x01
    20b6:	88 71       	andi	r24, 0x18	; 24
    20b8:	21 f0       	breq	.+8      	; 0x20c2 <__vector_58+0x4c>
		udi_cdc_signal_framing_error();
    20ba:	0e 94 1f 03 	call	0x63e	; 0x63e <udi_cdc_signal_framing_error>
		ui_com_error();
    20be:	0e 94 35 01 	call	0x26a	; 0x26a <ui_com_error>
	}

	// Transfer UART RX fifo to CDC TX
	value = USART.DATA;
    20c2:	c0 91 a0 0a 	lds	r28, 0x0AA0
	if (!udi_cdc_is_tx_ready()) {
    20c6:	0e 94 72 04 	call	0x8e4	; 0x8e4 <udi_cdc_is_tx_ready>
    20ca:	81 11       	cpse	r24, r1
    20cc:	05 c0       	rjmp	.+10     	; 0x20d8 <__vector_58+0x62>
		// Fifo full
		udi_cdc_signal_overrun();
    20ce:	0e 94 25 03 	call	0x64a	; 0x64a <udi_cdc_signal_overrun>
		ui_com_overflow();
    20d2:	0e 94 36 01 	call	0x26c	; 0x26c <ui_com_overflow>
    20d6:	04 c0       	rjmp	.+8      	; 0x20e0 <__vector_58+0x6a>
	}else{
		udi_cdc_putc(value);
    20d8:	8c 2f       	mov	r24, r28
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	0e 94 bd 04 	call	0x97a	; 0x97a <udi_cdc_putc>
	}
	ui_com_tx_stop();
    20e0:	0e 94 34 01 	call	0x268	; 0x268 <ui_com_tx_stop>
}
    20e4:	ff 91       	pop	r31
    20e6:	ef 91       	pop	r30
    20e8:	cf 91       	pop	r28
    20ea:	bf 91       	pop	r27
    20ec:	af 91       	pop	r26
    20ee:	9f 91       	pop	r25
    20f0:	8f 91       	pop	r24
    20f2:	7f 91       	pop	r23
    20f4:	6f 91       	pop	r22
    20f6:	5f 91       	pop	r21
    20f8:	4f 91       	pop	r20
    20fa:	3f 91       	pop	r19
    20fc:	2f 91       	pop	r18
    20fe:	0f 90       	pop	r0
    2100:	0b be       	out	0x3b, r0	; 59
    2102:	0f 90       	pop	r0
    2104:	09 be       	out	0x39, r0	; 57
    2106:	0f 90       	pop	r0
    2108:	08 be       	out	0x38, r0	; 56
    210a:	0f 90       	pop	r0
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	0f 90       	pop	r0
    2110:	1f 90       	pop	r1
    2112:	18 95       	reti

00002114 <__vector_59>:

ISR(USART_DRE_Vect)
{
    2114:	1f 92       	push	r1
    2116:	0f 92       	push	r0
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	0f 92       	push	r0
    211c:	11 24       	eor	r1, r1
    211e:	08 b6       	in	r0, 0x38	; 56
    2120:	0f 92       	push	r0
    2122:	18 be       	out	0x38, r1	; 56
    2124:	09 b6       	in	r0, 0x39	; 57
    2126:	0f 92       	push	r0
    2128:	19 be       	out	0x39, r1	; 57
    212a:	0b b6       	in	r0, 0x3b	; 59
    212c:	0f 92       	push	r0
    212e:	1b be       	out	0x3b, r1	; 59
    2130:	2f 93       	push	r18
    2132:	3f 93       	push	r19
    2134:	4f 93       	push	r20
    2136:	5f 93       	push	r21
    2138:	6f 93       	push	r22
    213a:	7f 93       	push	r23
    213c:	8f 93       	push	r24
    213e:	9f 93       	push	r25
    2140:	af 93       	push	r26
    2142:	bf 93       	push	r27
    2144:	ef 93       	push	r30
    2146:	ff 93       	push	r31
	// Data send
	if (udi_cdc_is_rx_ready()) {
    2148:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <udi_cdc_is_rx_ready>
    214c:	88 23       	and	r24, r24
    214e:	39 f0       	breq	.+14     	; 0x215e <__vector_59+0x4a>
		// Transmit next data
		ui_com_rx_start();
    2150:	0e 94 31 01 	call	0x262	; 0x262 <ui_com_rx_start>
		USART.DATA = udi_cdc_getc();
    2154:	0e 94 41 04 	call	0x882	; 0x882 <udi_cdc_getc>
    2158:	80 93 a0 0a 	sts	0x0AA0, r24
    215c:	06 c0       	rjmp	.+12     	; 0x216a <__vector_59+0x56>
	} else {
		// Fifo empty then Stop UART transmission
		USART.CTRLA = (register8_t) USART_RXCINTLVL_HI_gc |
    215e:	80 e3       	ldi	r24, 0x30	; 48
    2160:	e0 ea       	ldi	r30, 0xA0	; 160
    2162:	fa e0       	ldi	r31, 0x0A	; 10
    2164:	83 83       	std	Z+3, r24	; 0x03
				(register8_t) USART_DREINTLVL_OFF_gc;
		ui_com_rx_stop();
    2166:	0e 94 32 01 	call	0x264	; 0x264 <ui_com_rx_stop>
	}
}
    216a:	ff 91       	pop	r31
    216c:	ef 91       	pop	r30
    216e:	bf 91       	pop	r27
    2170:	af 91       	pop	r26
    2172:	9f 91       	pop	r25
    2174:	8f 91       	pop	r24
    2176:	7f 91       	pop	r23
    2178:	6f 91       	pop	r22
    217a:	5f 91       	pop	r21
    217c:	4f 91       	pop	r20
    217e:	3f 91       	pop	r19
    2180:	2f 91       	pop	r18
    2182:	0f 90       	pop	r0
    2184:	0b be       	out	0x3b, r0	; 59
    2186:	0f 90       	pop	r0
    2188:	09 be       	out	0x39, r0	; 57
    218a:	0f 90       	pop	r0
    218c:	08 be       	out	0x38, r0	; 56
    218e:	0f 90       	pop	r0
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	0f 90       	pop	r0
    2194:	1f 90       	pop	r1
    2196:	18 95       	reti

00002198 <init_power_seq>:
 */ 

#include "sequence.h"


void init_power_seq() {
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    219c:	43 e0       	ldi	r20, 0x03	; 3
    219e:	50 e0       	ldi	r21, 0x00	; 0
    21a0:	60 e8       	ldi	r22, 0x80	; 128
    21a2:	80 e4       	ldi	r24, 0x40	; 64
    21a4:	96 e0       	ldi	r25, 0x06	; 6
    21a6:	98 d3       	rcall	.+1840   	; 0x28d8 <ioport_configure_port_pin>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    21a8:	c0 e4       	ldi	r28, 0x40	; 64
    21aa:	d6 e0       	ldi	r29, 0x06	; 6
    21ac:	80 e8       	ldi	r24, 0x80	; 128
    21ae:	8e 83       	std	Y+6, r24	; 0x06
    21b0:	43 e0       	ldi	r20, 0x03	; 3
    21b2:	50 e0       	ldi	r21, 0x00	; 0
    21b4:	60 e2       	ldi	r22, 0x20	; 32
    21b6:	80 e4       	ldi	r24, 0x40	; 64
    21b8:	96 e0       	ldi	r25, 0x06	; 6
    21ba:	8e d3       	rcall	.+1820   	; 0x28d8 <ioport_configure_port_pin>
    21bc:	80 e2       	ldi	r24, 0x20	; 32
    21be:	8e 83       	std	Y+6, r24	; 0x06
    21c0:	43 e0       	ldi	r20, 0x03	; 3
    21c2:	50 e0       	ldi	r21, 0x00	; 0
    21c4:	62 e0       	ldi	r22, 0x02	; 2
    21c6:	80 e4       	ldi	r24, 0x40	; 64
    21c8:	96 e0       	ldi	r25, 0x06	; 6
    21ca:	86 d3       	rcall	.+1804   	; 0x28d8 <ioport_configure_port_pin>
    21cc:	82 e0       	ldi	r24, 0x02	; 2
    21ce:	8e 83       	std	Y+6, r24	; 0x06
    21d0:	43 e0       	ldi	r20, 0x03	; 3
    21d2:	50 e0       	ldi	r21, 0x00	; 0
    21d4:	61 e0       	ldi	r22, 0x01	; 1
    21d6:	80 e4       	ldi	r24, 0x40	; 64
    21d8:	96 e0       	ldi	r25, 0x06	; 6
    21da:	7e d3       	rcall	.+1788   	; 0x28d8 <ioport_configure_port_pin>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	8d 83       	std	Y+5, r24	; 0x05
	ioport_configure_pin(SR_LATCH, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
	gpio_set_pin_low(SR_LATCH);
	ioport_configure_pin(SR_CLEAR, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
	gpio_set_pin_high(SR_CLEAR);
	
}
    21e0:	df 91       	pop	r29
    21e2:	cf 91       	pop	r28
    21e4:	08 95       	ret

000021e6 <init_vrtc>:
	else if (!earliest->next) {
		(earliest->prev)->next = NULL;
	}

	return earliest;
}
    21e6:	87 e0       	ldi	r24, 0x07	; 7
    21e8:	e0 ea       	ldi	r30, 0xA0	; 160
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	82 83       	std	Z+2, r24	; 0x02
    21ee:	fb d2       	rcall	.+1526   	; 0x27e6 <sysclk_init>
    21f0:	10 92 42 27 	sts	0x2742, r1
    21f4:	10 92 43 27 	sts	0x2743, r1
    21f8:	10 92 44 27 	sts	0x2744, r1
    21fc:	10 92 45 27 	sts	0x2745, r1
    2200:	10 92 46 27 	sts	0x2746, r1
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	80 93 47 27 	sts	0x2747, r24
    220a:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <rtc_init>
    220e:	78 94       	sei
    2210:	10 92 64 27 	sts	0x2764, r1
    2214:	10 92 65 27 	sts	0x2765, r1
    2218:	10 92 62 27 	sts	0x2762, r1
    221c:	10 92 63 27 	sts	0x2763, r1
    2220:	08 95       	ret

00002222 <setEpochTime>:
    2222:	cf 92       	push	r12
    2224:	df 92       	push	r13
    2226:	ef 92       	push	r14
    2228:	ff 92       	push	r15
    222a:	0f 93       	push	r16
    222c:	1f 93       	push	r17
    222e:	6b 01       	movw	r12, r22
    2230:	7c 01       	movw	r14, r24
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	b6 95       	lsr	r27
    2238:	a7 95       	ror	r26
    223a:	97 95       	ror	r25
    223c:	87 95       	ror	r24
    223e:	dc 01       	movw	r26, r24
    2240:	99 27       	eor	r25, r25
    2242:	88 27       	eor	r24, r24
    2244:	b7 01       	movw	r22, r14
    2246:	a6 01       	movw	r20, r12
    2248:	41 70       	andi	r20, 0x01	; 1
    224a:	55 27       	eor	r21, r21
    224c:	66 27       	eor	r22, r22
    224e:	77 27       	eor	r23, r23
    2250:	03 2e       	mov	r0, r19
    2252:	3f e0       	ldi	r19, 0x0F	; 15
    2254:	44 0f       	add	r20, r20
    2256:	55 1f       	adc	r21, r21
    2258:	66 1f       	adc	r22, r22
    225a:	77 1f       	adc	r23, r23
    225c:	3a 95       	dec	r19
    225e:	d1 f7       	brne	.-12     	; 0x2254 <setEpochTime+0x32>
    2260:	30 2d       	mov	r19, r0
    2262:	8a 01       	movw	r16, r20
    2264:	9b 01       	movw	r18, r22
    2266:	08 0f       	add	r16, r24
    2268:	19 1f       	adc	r17, r25
    226a:	2a 1f       	adc	r18, r26
    226c:	3b 1f       	adc	r19, r27
    226e:	c9 01       	movw	r24, r18
    2270:	b8 01       	movw	r22, r16
    2272:	0e 94 b5 08 	call	0x116a	; 0x116a <rtc_set_time>
    2276:	0b 2e       	mov	r0, r27
    2278:	b1 e1       	ldi	r27, 0x11	; 17
    227a:	f6 94       	lsr	r15
    227c:	e7 94       	ror	r14
    227e:	d7 94       	ror	r13
    2280:	c7 94       	ror	r12
    2282:	ba 95       	dec	r27
    2284:	d1 f7       	brne	.-12     	; 0x227a <setEpochTime+0x58>
    2286:	b0 2d       	mov	r27, r0
    2288:	c0 92 64 27 	sts	0x2764, r12
    228c:	d0 92 65 27 	sts	0x2765, r13
    2290:	1f 91       	pop	r17
    2292:	0f 91       	pop	r16
    2294:	ff 90       	pop	r15
    2296:	ef 90       	pop	r14
    2298:	df 90       	pop	r13
    229a:	cf 90       	pop	r12
    229c:	08 95       	ret

0000229e <peakNextAlarmNode>:
    229e:	40 91 64 27 	lds	r20, 0x2764
    22a2:	50 91 65 27 	lds	r21, 0x2765
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	70 e0       	ldi	r23, 0x00	; 0
    22aa:	ba 01       	movw	r22, r20
    22ac:	55 27       	eor	r21, r21
    22ae:	44 27       	eor	r20, r20
    22b0:	20 91 4a 27 	lds	r18, 0x274A
    22b4:	30 91 4b 27 	lds	r19, 0x274B
    22b8:	42 0f       	add	r20, r18
    22ba:	53 1f       	adc	r21, r19
    22bc:	61 1d       	adc	r22, r1
    22be:	71 1d       	adc	r23, r1
    22c0:	dc 01       	movw	r26, r24
    22c2:	ed 91       	ld	r30, X+
    22c4:	fc 91       	ld	r31, X
    22c6:	30 97       	sbiw	r30, 0x00	; 0
    22c8:	09 f1       	breq	.+66     	; 0x230c <peakNextAlarmNode+0x6e>
    22ca:	80 81       	ld	r24, Z
    22cc:	81 11       	cpse	r24, r1
    22ce:	16 c0       	rjmp	.+44     	; 0x22fc <peakNextAlarmNode+0x5e>
    22d0:	81 81       	ldd	r24, Z+1	; 0x01
    22d2:	92 81       	ldd	r25, Z+2	; 0x02
    22d4:	a3 81       	ldd	r26, Z+3	; 0x03
    22d6:	b4 81       	ldd	r27, Z+4	; 0x04
    22d8:	84 17       	cp	r24, r20
    22da:	95 07       	cpc	r25, r21
    22dc:	a6 07       	cpc	r26, r22
    22de:	b7 07       	cpc	r27, r23
    22e0:	68 f0       	brcs	.+26     	; 0x22fc <peakNextAlarmNode+0x5e>
    22e2:	17 c0       	rjmp	.+46     	; 0x2312 <peakNextAlarmNode+0x74>
    22e4:	80 81       	ld	r24, Z
    22e6:	81 11       	cpse	r24, r1
    22e8:	09 c0       	rjmp	.+18     	; 0x22fc <peakNextAlarmNode+0x5e>
    22ea:	81 81       	ldd	r24, Z+1	; 0x01
    22ec:	92 81       	ldd	r25, Z+2	; 0x02
    22ee:	a3 81       	ldd	r26, Z+3	; 0x03
    22f0:	b4 81       	ldd	r27, Z+4	; 0x04
    22f2:	84 17       	cp	r24, r20
    22f4:	95 07       	cpc	r25, r21
    22f6:	a6 07       	cpc	r26, r22
    22f8:	b7 07       	cpc	r27, r23
    22fa:	70 f4       	brcc	.+28     	; 0x2318 <peakNextAlarmNode+0x7a>
    22fc:	01 84       	ldd	r0, Z+9	; 0x09
    22fe:	f2 85       	ldd	r31, Z+10	; 0x0a
    2300:	e0 2d       	mov	r30, r0
    2302:	30 97       	sbiw	r30, 0x00	; 0
    2304:	79 f7       	brne	.-34     	; 0x22e4 <peakNextAlarmNode+0x46>
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	08 95       	ret
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	08 95       	ret
    2312:	8e 2f       	mov	r24, r30
    2314:	9f 2f       	mov	r25, r31
    2316:	08 95       	ret
    2318:	8e 2f       	mov	r24, r30
    231a:	9f 2f       	mov	r25, r31
    231c:	08 95       	ret

0000231e <setNextAlarmRoutine>:
    231e:	cf 93       	push	r28
    2320:	df 93       	push	r29
    2322:	82 e6       	ldi	r24, 0x62	; 98
    2324:	97 e2       	ldi	r25, 0x27	; 39
    2326:	bb df       	rcall	.-138    	; 0x229e <peakNextAlarmNode>
    2328:	ec 01       	movw	r28, r24
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	59 f0       	breq	.+22     	; 0x2344 <setNextAlarmRoutine+0x26>
    232e:	8d 81       	ldd	r24, Y+5	; 0x05
    2330:	9e 81       	ldd	r25, Y+6	; 0x06
    2332:	0e 94 df 08 	call	0x11be	; 0x11be <rtc_set_callback>
    2336:	69 81       	ldd	r22, Y+1	; 0x01
    2338:	7a 81       	ldd	r23, Y+2	; 0x02
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	9c 81       	ldd	r25, Y+4	; 0x04
    233e:	0e 94 c7 08 	call	0x118e	; 0x118e <rtc_set_alarm>
    2342:	04 c0       	rjmp	.+8      	; 0x234c <setNextAlarmRoutine+0x2e>
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	0e 94 df 08 	call	0x11be	; 0x11be <rtc_set_callback>
    234c:	c0 93 60 27 	sts	0x2760, r28
    2350:	d0 93 61 27 	sts	0x2761, r29
    2354:	df 91       	pop	r29
    2356:	cf 91       	pop	r28
    2358:	08 95       	ret

0000235a <removeExpiredAlarms>:
    235a:	cf 92       	push	r12
    235c:	df 92       	push	r13
    235e:	ef 92       	push	r14
    2360:	ff 92       	push	r15
    2362:	e0 91 62 27 	lds	r30, 0x2762
    2366:	f0 91 63 27 	lds	r31, 0x2763
    236a:	30 97       	sbiw	r30, 0x00	; 0
    236c:	99 f1       	breq	.+102    	; 0x23d4 <removeExpiredAlarms+0x7a>
    236e:	c0 90 64 27 	lds	r12, 0x2764
    2372:	d0 90 65 27 	lds	r13, 0x2765
    2376:	e1 2c       	mov	r14, r1
    2378:	f1 2c       	mov	r15, r1
    237a:	76 01       	movw	r14, r12
    237c:	dd 24       	eor	r13, r13
    237e:	cc 24       	eor	r12, r12
    2380:	80 91 48 27 	lds	r24, 0x2748
    2384:	90 91 49 27 	lds	r25, 0x2749
    2388:	c8 0e       	add	r12, r24
    238a:	d9 1e       	adc	r13, r25
    238c:	e1 1c       	adc	r14, r1
    238e:	f1 1c       	adc	r15, r1
    2390:	41 81       	ldd	r20, Z+1	; 0x01
    2392:	52 81       	ldd	r21, Z+2	; 0x02
    2394:	63 81       	ldd	r22, Z+3	; 0x03
    2396:	74 81       	ldd	r23, Z+4	; 0x04
    2398:	c4 16       	cp	r12, r20
    239a:	d5 06       	cpc	r13, r21
    239c:	e6 06       	cpc	r14, r22
    239e:	f7 06       	cpc	r15, r23
    23a0:	c8 f0       	brcs	.+50     	; 0x23d4 <removeExpiredAlarms+0x7a>
    23a2:	81 85       	ldd	r24, Z+9	; 0x09
    23a4:	92 85       	ldd	r25, Z+10	; 0x0a
    23a6:	00 97       	sbiw	r24, 0x00	; 0
    23a8:	79 f0       	breq	.+30     	; 0x23c8 <removeExpiredAlarms+0x6e>
    23aa:	80 93 62 27 	sts	0x2762, r24
    23ae:	90 93 63 27 	sts	0x2763, r25
    23b2:	cf 01       	movw	r24, r30
    23b4:	21 d5       	rcall	.+2626   	; 0x2df8 <free>
    23b6:	e0 91 62 27 	lds	r30, 0x2762
    23ba:	f0 91 63 27 	lds	r31, 0x2763
    23be:	17 82       	std	Z+7, r1	; 0x07
    23c0:	10 86       	std	Z+8, r1	; 0x08
    23c2:	30 97       	sbiw	r30, 0x00	; 0
    23c4:	29 f7       	brne	.-54     	; 0x2390 <removeExpiredAlarms+0x36>
    23c6:	06 c0       	rjmp	.+12     	; 0x23d4 <removeExpiredAlarms+0x7a>
    23c8:	cf 01       	movw	r24, r30
    23ca:	16 d5       	rcall	.+2604   	; 0x2df8 <free>
    23cc:	10 92 62 27 	sts	0x2762, r1
    23d0:	10 92 63 27 	sts	0x2763, r1
    23d4:	ff 90       	pop	r15
    23d6:	ef 90       	pop	r14
    23d8:	df 90       	pop	r13
    23da:	cf 90       	pop	r12
    23dc:	08 95       	ret

000023de <addAlarm>:
    23de:	cf 92       	push	r12
    23e0:	df 92       	push	r13
    23e2:	ef 92       	push	r14
    23e4:	ff 92       	push	r15
    23e6:	0f 93       	push	r16
    23e8:	1f 93       	push	r17
    23ea:	cf 93       	push	r28
    23ec:	df 93       	push	r29
    23ee:	6b 01       	movw	r12, r22
    23f0:	7c 01       	movw	r14, r24
    23f2:	8a 01       	movw	r16, r20
    23f4:	b2 df       	rcall	.-156    	; 0x235a <removeExpiredAlarms>
    23f6:	8b e0       	ldi	r24, 0x0B	; 11
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	66 d4       	rcall	.+2252   	; 0x2cc8 <malloc>
    23fc:	dc 01       	movw	r26, r24
    23fe:	11 96       	adiw	r26, 0x01	; 1
    2400:	cd 92       	st	X+, r12
    2402:	dd 92       	st	X+, r13
    2404:	ed 92       	st	X+, r14
    2406:	fc 92       	st	X, r15
    2408:	14 97       	sbiw	r26, 0x04	; 4
    240a:	15 96       	adiw	r26, 0x05	; 5
    240c:	0d 93       	st	X+, r16
    240e:	1c 93       	st	X, r17
    2410:	16 97       	sbiw	r26, 0x06	; 6
    2412:	1c 92       	st	X, r1
    2414:	c0 91 62 27 	lds	r28, 0x2762
    2418:	d0 91 63 27 	lds	r29, 0x2763
    241c:	20 97       	sbiw	r28, 0x00	; 0
    241e:	f1 f4       	brne	.+60     	; 0x245c <addAlarm+0x7e>
    2420:	80 93 62 27 	sts	0x2762, r24
    2424:	90 93 63 27 	sts	0x2763, r25
    2428:	19 96       	adiw	r26, 0x09	; 9
    242a:	1d 92       	st	X+, r1
    242c:	1c 92       	st	X, r1
    242e:	1a 97       	sbiw	r26, 0x0a	; 10
    2430:	17 96       	adiw	r26, 0x07	; 7
    2432:	1d 92       	st	X+, r1
    2434:	1c 92       	st	X, r1
    2436:	18 97       	sbiw	r26, 0x08	; 8
    2438:	80 93 60 27 	sts	0x2760, r24
    243c:	90 93 61 27 	sts	0x2761, r25
    2440:	c8 01       	movw	r24, r16
    2442:	0e 94 df 08 	call	0x11be	; 0x11be <rtc_set_callback>
    2446:	e0 91 62 27 	lds	r30, 0x2762
    244a:	f0 91 63 27 	lds	r31, 0x2763
    244e:	61 81       	ldd	r22, Z+1	; 0x01
    2450:	72 81       	ldd	r23, Z+2	; 0x02
    2452:	83 81       	ldd	r24, Z+3	; 0x03
    2454:	94 81       	ldd	r25, Z+4	; 0x04
    2456:	0e 94 c7 08 	call	0x118e	; 0x118e <rtc_set_alarm>
    245a:	42 c0       	rjmp	.+132    	; 0x24e0 <addAlarm+0x102>
    245c:	49 81       	ldd	r20, Y+1	; 0x01
    245e:	5a 81       	ldd	r21, Y+2	; 0x02
    2460:	6b 81       	ldd	r22, Y+3	; 0x03
    2462:	7c 81       	ldd	r23, Y+4	; 0x04
    2464:	c4 16       	cp	r12, r20
    2466:	d5 06       	cpc	r13, r21
    2468:	e6 06       	cpc	r14, r22
    246a:	f7 06       	cpc	r15, r23
    246c:	58 f5       	brcc	.+86     	; 0x24c4 <addAlarm+0xe6>
    246e:	8f 83       	std	Y+7, r24	; 0x07
    2470:	98 87       	std	Y+8, r25	; 0x08
    2472:	17 96       	adiw	r26, 0x07	; 7
    2474:	1d 92       	st	X+, r1
    2476:	1c 92       	st	X, r1
    2478:	18 97       	sbiw	r26, 0x08	; 8
    247a:	19 96       	adiw	r26, 0x09	; 9
    247c:	cd 93       	st	X+, r28
    247e:	dc 93       	st	X, r29
    2480:	1a 97       	sbiw	r26, 0x0a	; 10
    2482:	80 93 62 27 	sts	0x2762, r24
    2486:	90 93 63 27 	sts	0x2763, r25
    248a:	2a c0       	rjmp	.+84     	; 0x24e0 <addAlarm+0x102>
    248c:	41 81       	ldd	r20, Z+1	; 0x01
    248e:	52 81       	ldd	r21, Z+2	; 0x02
    2490:	63 81       	ldd	r22, Z+3	; 0x03
    2492:	74 81       	ldd	r23, Z+4	; 0x04
    2494:	c4 16       	cp	r12, r20
    2496:	d5 06       	cpc	r13, r21
    2498:	e6 06       	cpc	r14, r22
    249a:	f7 06       	cpc	r15, r23
    249c:	10 f0       	brcs	.+4      	; 0x24a2 <addAlarm+0xc4>
    249e:	ef 01       	movw	r28, r30
    24a0:	11 c0       	rjmp	.+34     	; 0x24c4 <addAlarm+0xe6>
    24a2:	19 96       	adiw	r26, 0x09	; 9
    24a4:	ed 93       	st	X+, r30
    24a6:	fc 93       	st	X, r31
    24a8:	1a 97       	sbiw	r26, 0x0a	; 10
    24aa:	87 81       	ldd	r24, Z+7	; 0x07
    24ac:	90 85       	ldd	r25, Z+8	; 0x08
    24ae:	17 96       	adiw	r26, 0x07	; 7
    24b0:	8d 93       	st	X+, r24
    24b2:	9c 93       	st	X, r25
    24b4:	18 97       	sbiw	r26, 0x08	; 8
    24b6:	c7 81       	ldd	r28, Z+7	; 0x07
    24b8:	d0 85       	ldd	r29, Z+8	; 0x08
    24ba:	a9 87       	std	Y+9, r26	; 0x09
    24bc:	ba 87       	std	Y+10, r27	; 0x0a
    24be:	a7 83       	std	Z+7, r26	; 0x07
    24c0:	b0 87       	std	Z+8, r27	; 0x08
    24c2:	0e c0       	rjmp	.+28     	; 0x24e0 <addAlarm+0x102>
    24c4:	e9 85       	ldd	r30, Y+9	; 0x09
    24c6:	fa 85       	ldd	r31, Y+10	; 0x0a
    24c8:	30 97       	sbiw	r30, 0x00	; 0
    24ca:	01 f7       	brne	.-64     	; 0x248c <addAlarm+0xae>
    24cc:	a9 87       	std	Y+9, r26	; 0x09
    24ce:	ba 87       	std	Y+10, r27	; 0x0a
    24d0:	17 96       	adiw	r26, 0x07	; 7
    24d2:	cd 93       	st	X+, r28
    24d4:	dc 93       	st	X, r29
    24d6:	18 97       	sbiw	r26, 0x08	; 8
    24d8:	19 96       	adiw	r26, 0x09	; 9
    24da:	1d 92       	st	X+, r1
    24dc:	1c 92       	st	X, r1
    24de:	1a 97       	sbiw	r26, 0x0a	; 10
    24e0:	df 91       	pop	r29
    24e2:	cf 91       	pop	r28
    24e4:	1f 91       	pop	r17
    24e6:	0f 91       	pop	r16
    24e8:	ff 90       	pop	r15
    24ea:	ef 90       	pop	r14
    24ec:	df 90       	pop	r13
    24ee:	cf 90       	pop	r12
    24f0:	08 95       	ret

000024f2 <__vector_10>:

//Redefined from rtc.c
ISR(RTC_OVF_vect)
{
    24f2:	1f 92       	push	r1
    24f4:	0f 92       	push	r0
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	0f 92       	push	r0
    24fa:	11 24       	eor	r1, r1
    24fc:	08 b6       	in	r0, 0x38	; 56
    24fe:	0f 92       	push	r0
    2500:	18 be       	out	0x38, r1	; 56
    2502:	0b b6       	in	r0, 0x3b	; 59
    2504:	0f 92       	push	r0
    2506:	1b be       	out	0x3b, r1	; 59
    2508:	8f 93       	push	r24
    250a:	9f 93       	push	r25
    250c:	ef 93       	push	r30
    250e:	ff 93       	push	r31
	if (++(rtc_data.counter_high) == 0) 
    2510:	e8 e4       	ldi	r30, 0x48	; 72
    2512:	f7 e2       	ldi	r31, 0x27	; 39
    2514:	80 81       	ld	r24, Z
    2516:	91 81       	ldd	r25, Z+1	; 0x01
    2518:	01 96       	adiw	r24, 0x01	; 1
    251a:	80 83       	st	Z, r24
    251c:	91 83       	std	Z+1, r25	; 0x01
    251e:	89 2b       	or	r24, r25
    2520:	49 f4       	brne	.+18     	; 0x2534 <__vector_10+0x42>
		soft_counter++;
    2522:	80 91 64 27 	lds	r24, 0x2764
    2526:	90 91 65 27 	lds	r25, 0x2765
    252a:	01 96       	adiw	r24, 0x01	; 1
    252c:	80 93 64 27 	sts	0x2764, r24
    2530:	90 93 65 27 	sts	0x2765, r25
}
    2534:	ff 91       	pop	r31
    2536:	ef 91       	pop	r30
    2538:	9f 91       	pop	r25
    253a:	8f 91       	pop	r24
    253c:	0f 90       	pop	r0
    253e:	0b be       	out	0x3b, r0	; 59
    2540:	0f 90       	pop	r0
    2542:	08 be       	out	0x38, r0	; 56
    2544:	0f 90       	pop	r0
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	0f 90       	pop	r0
    254a:	1f 90       	pop	r1
    254c:	18 95       	reti

0000254e <__vector_11>:

//Redefined from rtc.c
//Should wake the device at regular intervals RTC_COMP_vect
ISR(RTC_COMP_vect)
{
    254e:	1f 92       	push	r1
    2550:	0f 92       	push	r0
    2552:	0f b6       	in	r0, 0x3f	; 63
    2554:	0f 92       	push	r0
    2556:	11 24       	eor	r1, r1
    2558:	08 b6       	in	r0, 0x38	; 56
    255a:	0f 92       	push	r0
    255c:	18 be       	out	0x38, r1	; 56
    255e:	09 b6       	in	r0, 0x39	; 57
    2560:	0f 92       	push	r0
    2562:	19 be       	out	0x39, r1	; 57
    2564:	0a b6       	in	r0, 0x3a	; 58
    2566:	0f 92       	push	r0
    2568:	1a be       	out	0x3a, r1	; 58
    256a:	0b b6       	in	r0, 0x3b	; 59
    256c:	0f 92       	push	r0
    256e:	1b be       	out	0x3b, r1	; 59
    2570:	cf 92       	push	r12
    2572:	df 92       	push	r13
    2574:	ef 92       	push	r14
    2576:	ff 92       	push	r15
    2578:	0f 93       	push	r16
    257a:	1f 93       	push	r17
    257c:	2f 93       	push	r18
    257e:	3f 93       	push	r19
    2580:	4f 93       	push	r20
    2582:	5f 93       	push	r21
    2584:	6f 93       	push	r22
    2586:	7f 93       	push	r23
    2588:	8f 93       	push	r24
    258a:	9f 93       	push	r25
    258c:	af 93       	push	r26
    258e:	bf 93       	push	r27
    2590:	cf 93       	push	r28
    2592:	df 93       	push	r29
    2594:	ef 93       	push	r30
    2596:	ff 93       	push	r31
	//uint32_t curr_time = (uint32_t)((uint32_t)soft_counter << 16) | (uint32_t)rtc_data.counter_high;
	//convert to epoch time
	uint32_t curr_epoch_time = (uint32_t)(((uint32_t)((uint32_t)soft_counter << 16) | (uint32_t)rtc_data.counter_high));
    2598:	00 91 64 27 	lds	r16, 0x2764
    259c:	10 91 65 27 	lds	r17, 0x2765
    25a0:	80 91 48 27 	lds	r24, 0x2748
    25a4:	90 91 49 27 	lds	r25, 0x2749
    25a8:	a0 e0       	ldi	r26, 0x00	; 0
    25aa:	b0 e0       	ldi	r27, 0x00	; 0
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	98 01       	movw	r18, r16
    25b2:	11 27       	eor	r17, r17
    25b4:	00 27       	eor	r16, r16
    25b6:	08 2b       	or	r16, r24
    25b8:	19 2b       	or	r17, r25
    25ba:	2a 2b       	or	r18, r26
    25bc:	3b 2b       	or	r19, r27
	curr_epoch_time <<= 2;
    25be:	00 0f       	add	r16, r16
    25c0:	11 1f       	adc	r17, r17
    25c2:	22 1f       	adc	r18, r18
    25c4:	33 1f       	adc	r19, r19
    25c6:	00 0f       	add	r16, r16
    25c8:	11 1f       	adc	r17, r17
    25ca:	22 1f       	adc	r18, r18
    25cc:	33 1f       	adc	r19, r19
	curr_epoch_time |= (uint32_t)(RTC.CNT/CLOCK_FREQ);
    25ce:	e0 e0       	ldi	r30, 0x00	; 0
    25d0:	f4 e0       	ldi	r31, 0x04	; 4
    25d2:	40 85       	ldd	r20, Z+8	; 0x08
    25d4:	51 85       	ldd	r21, Z+9	; 0x09
    25d6:	44 27       	eor	r20, r20
    25d8:	55 0f       	add	r21, r21
    25da:	44 1f       	adc	r20, r20
    25dc:	55 27       	eor	r21, r21
    25de:	60 e0       	ldi	r22, 0x00	; 0
    25e0:	70 e0       	ldi	r23, 0x00	; 0
    25e2:	04 2b       	or	r16, r20
    25e4:	15 2b       	or	r17, r21
    25e6:	26 2b       	or	r18, r22
    25e8:	37 2b       	or	r19, r23
	
	uint32_t alarm_time = ((uint32_t)((uint32_t)rtc_data.alarm_high << 16) | (uint32_t)rtc_data.alarm_low);
    25ea:	40 91 4a 27 	lds	r20, 0x274A
    25ee:	50 91 4b 27 	lds	r21, 0x274B
    25f2:	60 e0       	ldi	r22, 0x00	; 0
    25f4:	70 e0       	ldi	r23, 0x00	; 0
    25f6:	ba 01       	movw	r22, r20
    25f8:	55 27       	eor	r21, r21
    25fa:	44 27       	eor	r20, r20
    25fc:	c0 90 4c 27 	lds	r12, 0x274C
    2600:	d0 90 4d 27 	lds	r13, 0x274D
    2604:	e1 2c       	mov	r14, r1
    2606:	f1 2c       	mov	r15, r1
    2608:	4c 29       	or	r20, r12
    260a:	5d 29       	or	r21, r13
    260c:	6e 29       	or	r22, r14
    260e:	7f 29       	or	r23, r15

	if (curr_epoch_time > alarm_time && alarm_curr_ref && !alarm_curr_ref->expired) {
    2610:	40 17       	cp	r20, r16
    2612:	51 07       	cpc	r21, r17
    2614:	62 07       	cpc	r22, r18
    2616:	73 07       	cpc	r23, r19
    2618:	08 f0       	brcs	.+2      	; 0x261c <__vector_11+0xce>
    261a:	4a c0       	rjmp	.+148    	; 0x26b0 <__vector_11+0x162>
    261c:	e0 91 60 27 	lds	r30, 0x2760
    2620:	f0 91 61 27 	lds	r31, 0x2761
    2624:	30 97       	sbiw	r30, 0x00	; 0
    2626:	09 f4       	brne	.+2      	; 0x262a <__vector_11+0xdc>
    2628:	43 c0       	rjmp	.+134    	; 0x26b0 <__vector_11+0x162>
    262a:	20 81       	ld	r18, Z
    262c:	21 11       	cpse	r18, r1
    262e:	40 c0       	rjmp	.+128    	; 0x26b0 <__vector_11+0x162>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
    2630:	21 e0       	ldi	r18, 0x01	; 1
    2632:	e0 e0       	ldi	r30, 0x00	; 0
    2634:	f4 e0       	ldi	r31, 0x04	; 4
    2636:	22 83       	std	Z+2, r18	; 0x02
		if (rtc_data.callback) {
    2638:	e0 91 4e 27 	lds	r30, 0x274E
    263c:	f0 91 4f 27 	lds	r31, 0x274F
    2640:	30 97       	sbiw	r30, 0x00	; 0
    2642:	b1 f1       	breq	.+108    	; 0x26b0 <__vector_11+0x162>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
    2644:	c0 e0       	ldi	r28, 0x00	; 0
    2646:	d4 e0       	ldi	r29, 0x04	; 4
    2648:	68 85       	ldd	r22, Y+8	; 0x08
    264a:	79 85       	ldd	r23, Y+9	; 0x09
	uint32_t alarm_time = ((uint32_t)((uint32_t)rtc_data.alarm_high << 16) | (uint32_t)rtc_data.alarm_low);

	if (curr_epoch_time > alarm_time && alarm_curr_ref && !alarm_curr_ref->expired) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    264c:	9c 01       	movw	r18, r24
    264e:	11 27       	eor	r17, r17
    2650:	00 27       	eor	r16, r16
					| RTC.CNT;
    2652:	cb 01       	movw	r24, r22
    2654:	a0 e0       	ldi	r26, 0x00	; 0
    2656:	b0 e0       	ldi	r27, 0x00	; 0
	uint32_t alarm_time = ((uint32_t)((uint32_t)rtc_data.alarm_high << 16) | (uint32_t)rtc_data.alarm_low);

	if (curr_epoch_time > alarm_time && alarm_curr_ref && !alarm_curr_ref->expired) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
    2658:	bc 01       	movw	r22, r24
    265a:	cd 01       	movw	r24, r26
    265c:	60 2b       	or	r22, r16
    265e:	71 2b       	or	r23, r17
    2660:	82 2b       	or	r24, r18
    2662:	93 2b       	or	r25, r19
					| RTC.CNT;
	
			//previously alarm_low referenced the physical clock cycles
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    2664:	00 91 4a 27 	lds	r16, 0x274A
    2668:	10 91 4b 27 	lds	r17, 0x274B
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	98 01       	movw	r18, r16
    2672:	11 27       	eor	r17, r17
    2674:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
    2676:	c0 90 4c 27 	lds	r12, 0x274C
    267a:	d0 90 4d 27 	lds	r13, 0x274D
    267e:	e1 2c       	mov	r14, r1
    2680:	f1 2c       	mov	r15, r1
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
	
			//previously alarm_low referenced the physical clock cycles
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
    2682:	0c 29       	or	r16, r12
    2684:	1d 29       	or	r17, r13
    2686:	2e 29       	or	r18, r14
    2688:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
    268a:	06 17       	cp	r16, r22
    268c:	17 07       	cpc	r17, r23
    268e:	28 07       	cpc	r18, r24
    2690:	39 07       	cpc	r19, r25
    2692:	30 f0       	brcs	.+12     	; 0x26a0 <__vector_11+0x152>
				count = alarm + 1;
    2694:	c9 01       	movw	r24, r18
    2696:	b8 01       	movw	r22, r16
    2698:	6f 5f       	subi	r22, 0xFF	; 255
    269a:	7f 4f       	sbci	r23, 0xFF	; 255
    269c:	8f 4f       	sbci	r24, 0xFF	; 255
    269e:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
    26a0:	19 95       	eicall
			alarm_curr_ref->expired = 1;
    26a2:	e0 91 60 27 	lds	r30, 0x2760
    26a6:	f0 91 61 27 	lds	r31, 0x2761
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	80 83       	st	Z, r24
			 * if there is another alarm to be set
			 * peak from priority queue (pq) which  will hold
			 * tuples of (time,func*). The key for pq elements
			 * is time.
			 */
			setNextAlarmRoutine();
    26ae:	37 de       	rcall	.-914    	; 0x231e <setNextAlarmRoutine>
		}
	}
}
    26b0:	ff 91       	pop	r31
    26b2:	ef 91       	pop	r30
    26b4:	df 91       	pop	r29
    26b6:	cf 91       	pop	r28
    26b8:	bf 91       	pop	r27
    26ba:	af 91       	pop	r26
    26bc:	9f 91       	pop	r25
    26be:	8f 91       	pop	r24
    26c0:	7f 91       	pop	r23
    26c2:	6f 91       	pop	r22
    26c4:	5f 91       	pop	r21
    26c6:	4f 91       	pop	r20
    26c8:	3f 91       	pop	r19
    26ca:	2f 91       	pop	r18
    26cc:	1f 91       	pop	r17
    26ce:	0f 91       	pop	r16
    26d0:	ff 90       	pop	r15
    26d2:	ef 90       	pop	r14
    26d4:	df 90       	pop	r13
    26d6:	cf 90       	pop	r12
    26d8:	0f 90       	pop	r0
    26da:	0b be       	out	0x3b, r0	; 59
    26dc:	0f 90       	pop	r0
    26de:	0a be       	out	0x3a, r0	; 58
    26e0:	0f 90       	pop	r0
    26e2:	09 be       	out	0x39, r0	; 57
    26e4:	0f 90       	pop	r0
    26e6:	08 be       	out	0x38, r0	; 56
    26e8:	0f 90       	pop	r0
    26ea:	0f be       	out	0x3f, r0	; 63
    26ec:	0f 90       	pop	r0
    26ee:	1f 90       	pop	r1
    26f0:	18 95       	reti

000026f2 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
    26f2:	0f 93       	push	r16
    26f4:	1f 93       	push	r17
    26f6:	cf 93       	push	r28
    26f8:	df 93       	push	r29
    26fa:	1f 92       	push	r1
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    2700:	08 2f       	mov	r16, r24
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
    2702:	11 e0       	ldi	r17, 0x01	; 1
    2704:	19 83       	std	Y+1, r17	; 0x01
	spi_select_device(SSD1306_SPI, &device);
    2706:	be 01       	movw	r22, r28
    2708:	6f 5f       	subi	r22, 0xFF	; 255
    270a:	7f 4f       	sbci	r23, 0xFF	; 255
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	56 d1       	rcall	.+684    	; 0x29be <spi_select_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2712:	e0 e0       	ldi	r30, 0x00	; 0
    2714:	f6 e0       	ldi	r31, 0x06	; 6
    2716:	16 83       	std	Z+6, r17	; 0x06
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
    2718:	03 b9       	out	0x03, r16	; 3
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
	spi_deselect_device(SSD1306_SPI, &device);
    271a:	be 01       	movw	r22, r28
    271c:	6f 5f       	subi	r22, 0xFF	; 255
    271e:	7f 4f       	sbci	r23, 0xFF	; 255
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	62 d1       	rcall	.+708    	; 0x29ea <spi_deselect_device>
#endif
}
    2726:	0f 90       	pop	r0
    2728:	df 91       	pop	r29
    272a:	cf 91       	pop	r28
    272c:	1f 91       	pop	r17
    272e:	0f 91       	pop	r16
    2730:	08 95       	ret

00002732 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
    2732:	cf 92       	push	r12
    2734:	df 92       	push	r13
    2736:	ef 92       	push	r14
    2738:	ff 92       	push	r15
    273a:	0f 93       	push	r16
    273c:	1f 93       	push	r17
    273e:	cf 93       	push	r28
    2740:	df 93       	push	r29
    2742:	1f 92       	push	r1
    2744:	cd b7       	in	r28, 0x3d	; 61
    2746:	de b7       	in	r29, 0x3e	; 62
    2748:	84 e0       	ldi	r24, 0x04	; 4
    274a:	e0 e0       	ldi	r30, 0x00	; 0
    274c:	f6 e0       	ldi	r31, 0x06	; 6
    274e:	86 83       	std	Z+6, r24	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2750:	85 83       	std	Z+5, r24	; 0x05
	};
	usart_spi_init(SSD1306_USART_SPI);
	usart_spi_setup_device(SSD1306_USART_SPI, &device, spi_flags,
			SSD1306_CLOCK_SPEED, spi_select_id);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	89 83       	std	Y+1, r24	; 0x01
		.id = SSD1306_CS_PIN,
	};
	spi_master_init(SSD1306_SPI);
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	e6 d0       	rcall	.+460    	; 0x2928 <spi_master_init>
	spi_master_setup_device(SSD1306_SPI, &device, spi_flags,
    275c:	c1 2c       	mov	r12, r1
    275e:	d1 2c       	mov	r13, r1
    2760:	76 01       	movw	r14, r12
    2762:	00 e0       	ldi	r16, 0x00	; 0
    2764:	1b e1       	ldi	r17, 0x1B	; 27
    2766:	27 eb       	ldi	r18, 0xB7	; 183
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e0       	ldi	r20, 0x00	; 0
    276c:	be 01       	movw	r22, r28
    276e:	6f 5f       	subi	r22, 0xFF	; 255
    2770:	7f 4f       	sbci	r23, 0xFF	; 255
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	04 d1       	rcall	.+520    	; 0x2980 <spi_master_setup_device>
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_enable(SPI_t *spi)
{
	spi->CTRL |= SPI_ENABLE_bm;
    2778:	06 9a       	sbi	0x00, 6	; 0

	// Initialize the interface
	ssd1306_interface_init();

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
    277a:	88 ea       	ldi	r24, 0xA8	; 168
    277c:	ba df       	rcall	.-140    	; 0x26f2 <ssd1306_write_command>
	ssd1306_write_command(0x1F);
    277e:	8f e1       	ldi	r24, 0x1F	; 31
    2780:	b8 df       	rcall	.-144    	; 0x26f2 <ssd1306_write_command>

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
    2782:	83 ed       	ldi	r24, 0xD3	; 211
    2784:	b6 df       	rcall	.-148    	; 0x26f2 <ssd1306_write_command>
	ssd1306_write_command(0x00);
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	b4 df       	rcall	.-152    	; 0x26f2 <ssd1306_write_command>

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
    278a:	80 e4       	ldi	r24, 0x40	; 64
    278c:	b2 df       	rcall	.-156    	; 0x26f2 <ssd1306_write_command>

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
    278e:	81 ea       	ldi	r24, 0xA1	; 161
    2790:	b0 df       	rcall	.-160    	; 0x26f2 <ssd1306_write_command>

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
    2792:	88 ec       	ldi	r24, 0xC8	; 200
    2794:	ae df       	rcall	.-164    	; 0x26f2 <ssd1306_write_command>

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
    2796:	8a ed       	ldi	r24, 0xDA	; 218
    2798:	ac df       	rcall	.-168    	; 0x26f2 <ssd1306_write_command>
	ssd1306_write_command(0x02);
    279a:	82 e0       	ldi	r24, 0x02	; 2
    279c:	aa df       	rcall	.-172    	; 0x26f2 <ssd1306_write_command>
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
    279e:	81 e8       	ldi	r24, 0x81	; 129
    27a0:	a8 df       	rcall	.-176    	; 0x26f2 <ssd1306_write_command>
	ssd1306_write_command(contrast);
    27a2:	8f e8       	ldi	r24, 0x8F	; 143
    27a4:	a6 df       	rcall	.-180    	; 0x26f2 <ssd1306_write_command>

	ssd1306_set_contrast(0x8F);

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
    27a6:	84 ea       	ldi	r24, 0xA4	; 164
    27a8:	a4 df       	rcall	.-184    	; 0x26f2 <ssd1306_write_command>
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
    27aa:	86 ea       	ldi	r24, 0xA6	; 166
    27ac:	a2 df       	rcall	.-188    	; 0x26f2 <ssd1306_write_command>

	ssd1306_display_invert_disable();

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
    27ae:	85 ed       	ldi	r24, 0xD5	; 213
    27b0:	a0 df       	rcall	.-192    	; 0x26f2 <ssd1306_write_command>
	ssd1306_write_command(0x80);
    27b2:	80 e8       	ldi	r24, 0x80	; 128
    27b4:	9e df       	rcall	.-196    	; 0x26f2 <ssd1306_write_command>

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
    27b6:	8d e8       	ldi	r24, 0x8D	; 141
    27b8:	9c df       	rcall	.-200    	; 0x26f2 <ssd1306_write_command>
	ssd1306_write_command(0x14);
    27ba:	84 e1       	ldi	r24, 0x14	; 20
    27bc:	9a df       	rcall	.-204    	; 0x26f2 <ssd1306_write_command>

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
    27be:	8b ed       	ldi	r24, 0xDB	; 219
    27c0:	98 df       	rcall	.-208    	; 0x26f2 <ssd1306_write_command>
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
    27c2:	80 e4       	ldi	r24, 0x40	; 64
    27c4:	96 df       	rcall	.-212    	; 0x26f2 <ssd1306_write_command>

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
    27c6:	89 ed       	ldi	r24, 0xD9	; 217
    27c8:	94 df       	rcall	.-216    	; 0x26f2 <ssd1306_write_command>
	ssd1306_write_command(0xF1);
    27ca:	81 ef       	ldi	r24, 0xF1	; 241
    27cc:	92 df       	rcall	.-220    	; 0x26f2 <ssd1306_write_command>
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
    27ce:	8f ea       	ldi	r24, 0xAF	; 175
    27d0:	90 df       	rcall	.-224    	; 0x26f2 <ssd1306_write_command>

	ssd1306_display_on();
}
    27d2:	0f 90       	pop	r0
    27d4:	df 91       	pop	r29
    27d6:	cf 91       	pop	r28
    27d8:	1f 91       	pop	r17
    27da:	0f 91       	pop	r16
    27dc:	ff 90       	pop	r15
    27de:	ef 90       	pop	r14
    27e0:	df 90       	pop	r13
    27e2:	cf 90       	pop	r12
    27e4:	08 95       	ret

000027e6 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    27e6:	cf 93       	push	r28
    27e8:	df 93       	push	r29
    27ea:	00 d0       	rcall	.+0      	; 0x27ec <sysclk_init+0x6>
    27ec:	1f 92       	push	r1
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    27f2:	8f ef       	ldi	r24, 0xFF	; 255
    27f4:	80 93 70 00 	sts	0x0070, r24
    27f8:	80 93 71 00 	sts	0x0071, r24
    27fc:	80 93 72 00 	sts	0x0072, r24
    2800:	80 93 73 00 	sts	0x0073, r24
    2804:	80 93 74 00 	sts	0x0074, r24
    2808:	80 93 75 00 	sts	0x0075, r24
    280c:	80 93 76 00 	sts	0x0076, r24
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    2810:	6c e1       	ldi	r22, 0x1C	; 28
    2812:	70 e0       	ldi	r23, 0x00	; 0
    2814:	82 e0       	ldi	r24, 0x02	; 2
    2816:	12 d1       	rcall	.+548    	; 0x2a3c <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    2818:	8a 83       	std	Y+2, r24	; 0x02
    281a:	6d e1       	ldi	r22, 0x1D	; 29
    281c:	70 e0       	ldi	r23, 0x00	; 0
    281e:	82 e0       	ldi	r24, 0x02	; 2
    2820:	0d d1       	rcall	.+538    	; 0x2a3c <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    2822:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    2824:	89 81       	ldd	r24, Y+1	; 0x01
    2826:	9a 81       	ldd	r25, Y+2	; 0x02
    2828:	01 96       	adiw	r24, 0x01	; 1
    282a:	21 f4       	brne	.+8      	; 0x2834 <sysclk_init+0x4e>
		cal = 0x2340;
    282c:	80 e4       	ldi	r24, 0x40	; 64
    282e:	93 e2       	ldi	r25, 0x23	; 35
    2830:	89 83       	std	Y+1, r24	; 0x01
    2832:	9a 83       	std	Y+2, r25	; 0x02
    2834:	89 81       	ldd	r24, Y+1	; 0x01
    2836:	9a 81       	ldd	r25, Y+2	; 0x02
    2838:	8b 83       	std	Y+3, r24	; 0x03
    283a:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    283c:	e0 e6       	ldi	r30, 0x60	; 96
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    2842:	8c 81       	ldd	r24, Y+4	; 0x04
    2844:	83 83       	std	Z+3, r24	; 0x03

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
    2846:	82 e0       	ldi	r24, 0x02	; 2
    2848:	e0 e5       	ldi	r30, 0x50	; 80
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	82 83       	std	Z+2, r24	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    284e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    2850:	f8 94       	cli
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    2852:	90 81       	ld	r25, Z
    2854:	98 60       	ori	r25, 0x08	; 8
    2856:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2858:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    285a:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    285c:	83 ff       	sbrs	r24, 3
    285e:	fd cf       	rjmp	.-6      	; 0x285a <sysclk_init+0x74>
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
    2860:	8b e0       	ldi	r24, 0x0B	; 11
    2862:	e0 e4       	ldi	r30, 0x40	; 64
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	83 83       	std	Z+3, r24	; 0x03
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    2868:	24 96       	adiw	r28, 0x04	; 4
    286a:	cd bf       	out	0x3d, r28	; 61
    286c:	de bf       	out	0x3e, r29	; 62
    286e:	df 91       	pop	r29
    2870:	cf 91       	pop	r28
    2872:	08 95       	ret

00002874 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2874:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2876:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    2878:	e8 2f       	mov	r30, r24
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	e0 59       	subi	r30, 0x90	; 144
    287e:	ff 4f       	sbci	r31, 0xFF	; 255
    2880:	60 95       	com	r22
    2882:	80 81       	ld	r24, Z
    2884:	68 23       	and	r22, r24
    2886:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2888:	9f bf       	out	0x3f, r25	; 63
    288a:	08 95       	ret

0000288c <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    288c:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    288e:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    2890:	e8 2f       	mov	r30, r24
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	e0 59       	subi	r30, 0x90	; 144
    2896:	ff 4f       	sbci	r31, 0xFF	; 255
    2898:	80 81       	ld	r24, Z
    289a:	68 2b       	or	r22, r24
    289c:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    289e:	9f bf       	out	0x3f, r25	; 63
    28a0:	08 95       	ret

000028a2 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    28a2:	86 30       	cpi	r24, 0x06	; 6
    28a4:	11 f4       	brne	.+4      	; 0x28aa <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
    28a6:	68 e1       	ldi	r22, 0x18	; 24
    28a8:	01 c0       	rjmp	.+2      	; 0x28ac <sysclk_enable_usb+0xa>
	}
	else {
		prescaler = 0;
    28aa:	60 e0       	ldi	r22, 0x00	; 0
    28ac:	e0 e5       	ldi	r30, 0x50	; 80
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	81 81       	ldd	r24, Z+1	; 0x01
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    28b2:	81 fd       	sbrc	r24, 1
    28b4:	09 c0       	rjmp	.+18     	; 0x28c8 <sysclk_enable_usb+0x26>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    28b6:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    28b8:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    28ba:	90 81       	ld	r25, Z
    28bc:	92 60       	ori	r25, 0x02	; 2
    28be:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    28c0:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    28c2:	81 81       	ldd	r24, Z+1	; 0x01
    28c4:	81 ff       	sbrs	r24, 1
    28c6:	fd cf       	rjmp	.-6      	; 0x28c2 <sysclk_enable_usb+0x20>
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    28c8:	63 60       	ori	r22, 0x03	; 3
    28ca:	84 e4       	ldi	r24, 0x44	; 68
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	b0 d0       	rcall	.+352    	; 0x2a30 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    28d0:	60 e4       	ldi	r22, 0x40	; 64
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	cf cf       	rjmp	.-98     	; 0x2874 <sysclk_enable_module>
    28d6:	08 95       	ret

000028d8 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    28d8:	cf 93       	push	r28
    28da:	df 93       	push	r29
    28dc:	fc 01       	movw	r30, r24
    28de:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    28e4:	c6 2f       	mov	r28, r22
    28e6:	d0 e0       	ldi	r29, 0x00	; 0
    28e8:	de 01       	movw	r26, r28
    28ea:	02 2e       	mov	r0, r18
    28ec:	02 c0       	rjmp	.+4      	; 0x28f2 <ioport_configure_port_pin+0x1a>
    28ee:	b5 95       	asr	r27
    28f0:	a7 95       	ror	r26
    28f2:	0a 94       	dec	r0
    28f4:	e2 f7       	brpl	.-8      	; 0x28ee <ioport_configure_port_pin+0x16>
    28f6:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    28f8:	50 83       	st	Z, r21
    28fa:	2f 5f       	subi	r18, 0xFF	; 255
    28fc:	3f 4f       	sbci	r19, 0xFF	; 255
    28fe:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    2900:	28 30       	cpi	r18, 0x08	; 8
    2902:	31 05       	cpc	r19, r1
    2904:	89 f7       	brne	.-30     	; 0x28e8 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    2906:	40 ff       	sbrs	r20, 0
    2908:	0a c0       	rjmp	.+20     	; 0x291e <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    290a:	41 ff       	sbrs	r20, 1
    290c:	03 c0       	rjmp	.+6      	; 0x2914 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    290e:	fc 01       	movw	r30, r24
    2910:	65 83       	std	Z+5, r22	; 0x05
    2912:	02 c0       	rjmp	.+4      	; 0x2918 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    2914:	fc 01       	movw	r30, r24
    2916:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    2918:	fc 01       	movw	r30, r24
    291a:	61 83       	std	Z+1, r22	; 0x01
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    291e:	fc 01       	movw	r30, r24
    2920:	62 83       	std	Z+2, r22	; 0x02
	}
}
    2922:	df 91       	pop	r29
    2924:	cf 91       	pop	r28
    2926:	08 95       	ret

00002928 <spi_master_init>:
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
}
    2928:	0f 93       	push	r16
    292a:	1f 93       	push	r17
    292c:	cf 93       	push	r28
    292e:	df 93       	push	r29
    2930:	ec 01       	movw	r28, r24
    2932:	8c 01       	movw	r16, r24
    2934:	c0 3c       	cpi	r28, 0xC0	; 192
    2936:	88 e0       	ldi	r24, 0x08	; 8
    2938:	d8 07       	cpc	r29, r24
    293a:	21 f4       	brne	.+8      	; 0x2944 <spi_master_init+0x1c>
    293c:	68 e0       	ldi	r22, 0x08	; 8
    293e:	83 e0       	ldi	r24, 0x03	; 3
    2940:	99 df       	rcall	.-206    	; 0x2874 <sysclk_enable_module>
    2942:	10 c0       	rjmp	.+32     	; 0x2964 <spi_master_init+0x3c>
    2944:	c0 3c       	cpi	r28, 0xC0	; 192
    2946:	89 e0       	ldi	r24, 0x09	; 9
    2948:	d8 07       	cpc	r29, r24
    294a:	21 f4       	brne	.+8      	; 0x2954 <spi_master_init+0x2c>
    294c:	68 e0       	ldi	r22, 0x08	; 8
    294e:	84 e0       	ldi	r24, 0x04	; 4
    2950:	91 df       	rcall	.-222    	; 0x2874 <sysclk_enable_module>
    2952:	0e c0       	rjmp	.+28     	; 0x2970 <spi_master_init+0x48>
    2954:	c0 3c       	cpi	r28, 0xC0	; 192
    2956:	8a e0       	ldi	r24, 0x0A	; 10
    2958:	d8 07       	cpc	r29, r24
    295a:	21 f4       	brne	.+8      	; 0x2964 <spi_master_init+0x3c>
    295c:	68 e0       	ldi	r22, 0x08	; 8
    295e:	85 e0       	ldi	r24, 0x05	; 5
    2960:	89 df       	rcall	.-238    	; 0x2874 <sysclk_enable_module>
    2962:	06 c0       	rjmp	.+12     	; 0x2970 <spi_master_init+0x48>
    2964:	00 3c       	cpi	r16, 0xC0	; 192
    2966:	1b 40       	sbci	r17, 0x0B	; 11
    2968:	19 f4       	brne	.+6      	; 0x2970 <spi_master_init+0x48>
    296a:	68 e0       	ldi	r22, 0x08	; 8
    296c:	86 e0       	ldi	r24, 0x06	; 6
    296e:	82 df       	rcall	.-252    	; 0x2874 <sysclk_enable_module>
    2970:	88 81       	ld	r24, Y
    2972:	80 61       	ori	r24, 0x10	; 16
    2974:	88 83       	st	Y, r24
    2976:	df 91       	pop	r29
    2978:	cf 91       	pop	r28
    297a:	1f 91       	pop	r17
    297c:	0f 91       	pop	r16
    297e:	08 95       	ret

00002980 <spi_master_setup_device>:
    2980:	ff 92       	push	r15
    2982:	0f 93       	push	r16
    2984:	1f 93       	push	r17
    2986:	cf 93       	push	r28
    2988:	df 93       	push	r29
    298a:	ec 01       	movw	r28, r24
    298c:	f4 2e       	mov	r15, r20
    298e:	b9 01       	movw	r22, r18
    2990:	a8 01       	movw	r20, r16
    2992:	00 e8       	ldi	r16, 0x80	; 128
    2994:	14 e8       	ldi	r17, 0x84	; 132
    2996:	2e e1       	ldi	r18, 0x1E	; 30
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	5a d0       	rcall	.+180    	; 0x2a50 <spi_xmega_set_baud_div>
    299c:	88 23       	and	r24, r24
    299e:	4c f0       	brlt	.+18     	; 0x29b2 <spi_master_setup_device+0x32>
    29a0:	88 81       	ld	r24, Y
    29a2:	9f 2d       	mov	r25, r15
    29a4:	99 0f       	add	r25, r25
    29a6:	99 0f       	add	r25, r25
    29a8:	9c 70       	andi	r25, 0x0C	; 12
    29aa:	83 7f       	andi	r24, 0xF3	; 243
    29ac:	f9 2e       	mov	r15, r25
    29ae:	f8 2a       	or	r15, r24
    29b0:	f8 82       	st	Y, r15
    29b2:	df 91       	pop	r29
    29b4:	cf 91       	pop	r28
    29b6:	1f 91       	pop	r17
    29b8:	0f 91       	pop	r16
    29ba:	ff 90       	pop	r15
    29bc:	08 95       	ret

000029be <spi_select_device>:
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_low(device->id);
    29be:	fb 01       	movw	r30, r22
    29c0:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    29c2:	e8 2f       	mov	r30, r24
    29c4:	e6 95       	lsr	r30
    29c6:	e6 95       	lsr	r30
    29c8:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    29ca:	40 e2       	ldi	r20, 0x20	; 32
    29cc:	e4 9f       	mul	r30, r20
    29ce:	f0 01       	movw	r30, r0
    29d0:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    29d2:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    29d4:	87 70       	andi	r24, 0x07	; 7
    29d6:	21 e0       	ldi	r18, 0x01	; 1
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	a9 01       	movw	r20, r18
    29dc:	02 c0       	rjmp	.+4      	; 0x29e2 <spi_select_device+0x24>
    29de:	44 0f       	add	r20, r20
    29e0:	55 1f       	adc	r21, r21
    29e2:	8a 95       	dec	r24
    29e4:	e2 f7       	brpl	.-8      	; 0x29de <spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    29e6:	46 83       	std	Z+6, r20	; 0x06
    29e8:	08 95       	ret

000029ea <spi_deselect_device>:
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_high(device->id);
    29ea:	fb 01       	movw	r30, r22
    29ec:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    29ee:	e8 2f       	mov	r30, r24
    29f0:	e6 95       	lsr	r30
    29f2:	e6 95       	lsr	r30
    29f4:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    29f6:	40 e2       	ldi	r20, 0x20	; 32
    29f8:	e4 9f       	mul	r30, r20
    29fa:	f0 01       	movw	r30, r0
    29fc:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    29fe:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    2a00:	87 70       	andi	r24, 0x07	; 7
    2a02:	21 e0       	ldi	r18, 0x01	; 1
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	a9 01       	movw	r20, r18
    2a08:	02 c0       	rjmp	.+4      	; 0x2a0e <spi_deselect_device+0x24>
    2a0a:	44 0f       	add	r20, r20
    2a0c:	55 1f       	adc	r21, r21
    2a0e:	8a 95       	dec	r24
    2a10:	e2 f7       	brpl	.-8      	; 0x2a0a <spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2a12:	45 83       	std	Z+5, r20	; 0x05
    2a14:	08 95       	ret

00002a16 <board_init>:
    2a16:	43 e0       	ldi	r20, 0x03	; 3
    2a18:	50 e0       	ldi	r21, 0x00	; 0
    2a1a:	68 e0       	ldi	r22, 0x08	; 8
    2a1c:	80 ec       	ldi	r24, 0xC0	; 192
    2a1e:	97 e0       	ldi	r25, 0x07	; 7
    2a20:	5b df       	rcall	.-330    	; 0x28d8 <ioport_configure_port_pin>
    2a22:	40 e0       	ldi	r20, 0x00	; 0
    2a24:	58 e1       	ldi	r21, 0x18	; 24
    2a26:	64 e0       	ldi	r22, 0x04	; 4
    2a28:	80 ec       	ldi	r24, 0xC0	; 192
    2a2a:	97 e0       	ldi	r25, 0x07	; 7
    2a2c:	55 cf       	rjmp	.-342    	; 0x28d8 <ioport_configure_port_pin>
    2a2e:	08 95       	ret

00002a30 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    2a30:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    2a32:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    2a34:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    2a36:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    2a38:	60 83       	st	Z, r22
	ret                             // Return to caller
    2a3a:	08 95       	ret

00002a3c <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    2a3c:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    2a40:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    2a42:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    2a44:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    2a48:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    2a4a:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    2a4e:	08 95       	ret

00002a50 <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
    2a50:	cf 92       	push	r12
    2a52:	df 92       	push	r13
    2a54:	ef 92       	push	r14
    2a56:	ff 92       	push	r15
    2a58:	0f 93       	push	r16
    2a5a:	1f 93       	push	r17
    2a5c:	cf 93       	push	r28
    2a5e:	df 93       	push	r29
    2a60:	ec 01       	movw	r28, r24
    2a62:	6a 01       	movw	r12, r20
    2a64:	7b 01       	movw	r14, r22

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
    2a66:	db 01       	movw	r26, r22
    2a68:	ca 01       	movw	r24, r20
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	a1 09       	sbc	r26, r1
    2a6e:	b1 09       	sbc	r27, r1
    2a70:	bc 01       	movw	r22, r24
    2a72:	cd 01       	movw	r24, r26
    2a74:	60 0f       	add	r22, r16
    2a76:	71 1f       	adc	r23, r17
    2a78:	82 1f       	adc	r24, r18
    2a7a:	93 1f       	adc	r25, r19
    2a7c:	a7 01       	movw	r20, r14
    2a7e:	96 01       	movw	r18, r12
    2a80:	fb d0       	rcall	.+502    	; 0x2c78 <__udivmodsi4>

	if (divisor > 128) {
    2a82:	21 38       	cpi	r18, 0x81	; 129
    2a84:	31 05       	cpc	r19, r1
    2a86:	41 05       	cpc	r20, r1
    2a88:	51 05       	cpc	r21, r1
    2a8a:	f8 f4       	brcc	.+62     	; 0x2aca <spi_xmega_set_baud_div+0x7a>

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
    2a8c:	21 34       	cpi	r18, 0x41	; 65
    2a8e:	60 f4       	brcc	.+24     	; 0x2aa8 <spi_xmega_set_baud_div+0x58>
		ctrl = SPI_PRESCALER_DIV128_gc;
	}
	else if (divisor_8bit > 32) {
    2a90:	21 32       	cpi	r18, 0x21	; 33
    2a92:	60 f4       	brcc	.+24     	; 0x2aac <spi_xmega_set_baud_div+0x5c>
		ctrl = SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 16) {
    2a94:	21 31       	cpi	r18, 0x11	; 17
    2a96:	60 f4       	brcc	.+24     	; 0x2ab0 <spi_xmega_set_baud_div+0x60>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 8) {
    2a98:	29 30       	cpi	r18, 0x09	; 9
    2a9a:	60 f4       	brcc	.+24     	; 0x2ab4 <spi_xmega_set_baud_div+0x64>
		ctrl = SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 4) {
    2a9c:	25 30       	cpi	r18, 0x05	; 5
    2a9e:	60 f4       	brcc	.+24     	; 0x2ab8 <spi_xmega_set_baud_div+0x68>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 2) {
    2aa0:	23 30       	cpi	r18, 0x03	; 3
    2aa2:	60 f0       	brcs	.+24     	; 0x2abc <spi_xmega_set_baud_div+0x6c>
		ctrl = SPI_PRESCALER_DIV4_gc;
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	0b c0       	rjmp	.+22     	; 0x2abe <spi_xmega_set_baud_div+0x6e>
	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
		ctrl = SPI_PRESCALER_DIV128_gc;
    2aa8:	93 e0       	ldi	r25, 0x03	; 3
    2aaa:	09 c0       	rjmp	.+18     	; 0x2abe <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 32) {
		ctrl = SPI_PRESCALER_DIV64_gc;
    2aac:	92 e0       	ldi	r25, 0x02	; 2
    2aae:	07 c0       	rjmp	.+14     	; 0x2abe <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 16) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
    2ab0:	92 e8       	ldi	r25, 0x82	; 130
    2ab2:	05 c0       	rjmp	.+10     	; 0x2abe <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 8) {
		ctrl = SPI_PRESCALER_DIV16_gc;
    2ab4:	91 e0       	ldi	r25, 0x01	; 1
    2ab6:	03 c0       	rjmp	.+6      	; 0x2abe <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 4) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
    2ab8:	91 e8       	ldi	r25, 0x81	; 129
    2aba:	01 c0       	rjmp	.+2      	; 0x2abe <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 2) {
		ctrl = SPI_PRESCALER_DIV4_gc;
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    2abc:	90 e8       	ldi	r25, 0x80	; 128
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
    2abe:	88 81       	ld	r24, Y
    2ac0:	8c 77       	andi	r24, 0x7C	; 124
    2ac2:	89 2b       	or	r24, r25
    2ac4:	88 83       	st	Y, r24

	return 1;
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	01 c0       	rjmp	.+2      	; 0x2acc <spi_xmega_set_baud_div+0x7c>
	if (divisor > 128) {
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
    2aca:	8f ef       	ldi	r24, 0xFF	; 255

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;

	return 1;
}
    2acc:	df 91       	pop	r29
    2ace:	cf 91       	pop	r28
    2ad0:	1f 91       	pop	r17
    2ad2:	0f 91       	pop	r16
    2ad4:	ff 90       	pop	r15
    2ad6:	ef 90       	pop	r14
    2ad8:	df 90       	pop	r13
    2ada:	cf 90       	pop	r12
    2adc:	08 95       	ret

00002ade <alarm1>:
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2ade:	88 e0       	ldi	r24, 0x08	; 8
    2ae0:	e0 ec       	ldi	r30, 0xC0	; 192
    2ae2:	f7 e0       	ldi	r31, 0x07	; 7
    2ae4:	86 83       	std	Z+6, r24	; 0x06
    2ae6:	8a e6       	ldi	r24, 0x6A	; 106
    2ae8:	94 e0       	ldi	r25, 0x04	; 4
    2aea:	a1 e0       	ldi	r26, 0x01	; 1
    2aec:	b0 e0       	ldi	r27, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    2aee:	01 97       	sbiw	r24, 0x01	; 1
    2af0:	a1 09       	sbc	r26, r1
    2af2:	b1 09       	sbc	r27, r1
    2af4:	00 97       	sbiw	r24, 0x00	; 0
    2af6:	a1 05       	cpc	r26, r1
    2af8:	b1 05       	cpc	r27, r1
    2afa:	c9 f7       	brne	.-14     	; 0x2aee <alarm1+0x10>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2afc:	88 e0       	ldi	r24, 0x08	; 8
    2afe:	e0 ec       	ldi	r30, 0xC0	; 192
    2b00:	f7 e0       	ldi	r31, 0x07	; 7
    2b02:	85 83       	std	Z+5, r24	; 0x05
    2b04:	08 95       	ret

00002b06 <alarm2>:
	ioport_set_pin_level(LED_0_PIN,LED_0_INACTIVE);

}

//TODO: Remove, for testing alarm functionality
static void alarm2(uint32_t time) {
    2b06:	2a e0       	ldi	r18, 0x0A	; 10
    2b08:	30 e0       	ldi	r19, 0x00	; 0

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    2b0a:	e0 ec       	ldi	r30, 0xC0	; 192
    2b0c:	f7 e0       	ldi	r31, 0x07	; 7
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2b0e:	48 e0       	ldi	r20, 0x08	; 8

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    2b10:	80 85       	ldd	r24, Z+8	; 0x08
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
    2b12:	83 fd       	sbrc	r24, 3
    2b14:	02 c0       	rjmp	.+4      	; 0x2b1a <alarm2+0x14>
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2b16:	45 83       	std	Z+5, r20	; 0x05
    2b18:	01 c0       	rjmp	.+2      	; 0x2b1c <alarm2+0x16>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2b1a:	46 83       	std	Z+6, r20	; 0x06
    2b1c:	80 e0       	ldi	r24, 0x00	; 0
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	01 96       	adiw	r24, 0x01	; 1
    2b22:	8a 31       	cpi	r24, 0x1A	; 26
    2b24:	51 e4       	ldi	r21, 0x41	; 65
    2b26:	95 07       	cpc	r25, r21
    2b28:	d9 f7       	brne	.-10     	; 0x2b20 <alarm2+0x1a>
    2b2a:	21 50       	subi	r18, 0x01	; 1
    2b2c:	31 09       	sbc	r19, r1
	int i;
	
	// LED FAST BURST
	for (i=0; i<10; i++) {
    2b2e:	21 15       	cp	r18, r1
    2b30:	31 05       	cpc	r19, r1
    2b32:	71 f7       	brne	.-36     	; 0x2b10 <alarm2+0xa>
		ioport_set_pin_level(LED_0_PIN,!ioport_get_pin_level(LED_0_PIN));
		delay_ms(50);
	}
	//ioport_set_pin_level(LED_0_PIN,LED_0_INACTIVE);
}
    2b34:	08 95       	ret

00002b36 <alarm3>:

//TODO: Remove, for testing alarm functionality
static void alarm3(uint32_t time) {
    2b36:	25 e0       	ldi	r18, 0x05	; 5
    2b38:	30 e0       	ldi	r19, 0x00	; 0

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    2b3a:	e0 ec       	ldi	r30, 0xC0	; 192
    2b3c:	f7 e0       	ldi	r31, 0x07	; 7
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2b3e:	48 e0       	ldi	r20, 0x08	; 8

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    2b40:	80 85       	ldd	r24, Z+8	; 0x08
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
    2b42:	83 fd       	sbrc	r24, 3
    2b44:	02 c0       	rjmp	.+4      	; 0x2b4a <alarm3+0x14>
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2b46:	45 83       	std	Z+5, r20	; 0x05
    2b48:	01 c0       	rjmp	.+2      	; 0x2b4c <alarm3+0x16>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2b4a:	46 83       	std	Z+6, r20	; 0x06
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	01 96       	adiw	r24, 0x01	; 1
    2b52:	80 35       	cpi	r24, 0x50	; 80
    2b54:	53 ec       	ldi	r21, 0xC3	; 195
    2b56:	95 07       	cpc	r25, r21
    2b58:	d9 f7       	brne	.-10     	; 0x2b50 <alarm3+0x1a>
    2b5a:	21 50       	subi	r18, 0x01	; 1
    2b5c:	31 09       	sbc	r19, r1
	int i;
	
	// LED SLOW BURST
	for (i=0; i<5; i++) {
    2b5e:	21 15       	cp	r18, r1
    2b60:	31 05       	cpc	r19, r1
    2b62:	71 f7       	brne	.-36     	; 0x2b40 <alarm3+0xa>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2b64:	88 e0       	ldi	r24, 0x08	; 8
    2b66:	e0 ec       	ldi	r30, 0xC0	; 192
    2b68:	f7 e0       	ldi	r31, 0x07	; 7
    2b6a:	85 83       	std	Z+5, r24	; 0x05
    2b6c:	08 95       	ret

00002b6e <main>:
}

int main (void)
{
	//board-specific
	board_init();
    2b6e:	53 df       	rcall	.-346    	; 0x2a16 <board_init>
	ioport_init();
	ssd1306_init();
    2b70:	e0 dd       	rcall	.-1088   	; 0x2732 <ssd1306_init>
	
	//USB cdc
	irq_initialize_vectors();
    2b72:	87 e0       	ldi	r24, 0x07	; 7
    2b74:	e0 ea       	ldi	r30, 0xA0	; 160
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	82 83       	std	Z+2, r24	; 0x02
	// cpu_irq_enable();	/* taken care of in init_vrtc below */
	
	//v2x power sequencing
	init_power_seq();
    2b7a:	0e db       	rcall	.-2532   	; 0x2198 <init_power_seq>
	
	//v2x real time clock
	init_vrtc();
    2b7c:	34 db       	rcall	.-2456   	; 0x21e6 <init_vrtc>
	
#if !SAM0
	sysclk_init();
    2b7e:	33 de       	rcall	.-922    	; 0x27e6 <sysclk_init>
	board_init();
    2b80:	4a df       	rcall	.-364    	; 0x2a16 <board_init>
#else
	system_init();
#endif
	ui_init();
    2b82:	0e 94 2c 01 	call	0x258	; 0x258 <ui_init>
	ui_powerdown();
    2b86:	0e 94 2d 01 	call	0x25a	; 0x25a <ui_powerdown>
	// Start USB stack to authorize VBus monitoring
	udc_start();
    2b8a:	0e 94 a9 05 	call	0xb52	; 0xb52 <udc_start>
	
	*************/
	
	//currently every  high_counter=.5t
	uint32_t test_time = 1448436421;
	setEpochTime(test_time);
    2b8e:	65 ec       	ldi	r22, 0xC5	; 197
    2b90:	72 e6       	ldi	r23, 0x62	; 98
    2b92:	85 e5       	ldi	r24, 0x55	; 85
    2b94:	96 e5       	ldi	r25, 0x56	; 86
    2b96:	45 db       	rcall	.-2422   	; 0x2222 <setEpochTime>
	addAlarm(test_time+2, alarm1);	// blink
    2b98:	4f e6       	ldi	r20, 0x6F	; 111
    2b9a:	55 e1       	ldi	r21, 0x15	; 21
    2b9c:	67 ec       	ldi	r22, 0xC7	; 199
    2b9e:	72 e6       	ldi	r23, 0x62	; 98
    2ba0:	85 e5       	ldi	r24, 0x55	; 85
    2ba2:	96 e5       	ldi	r25, 0x56	; 86
    2ba4:	1c dc       	rcall	.-1992   	; 0x23de <addAlarm>
	addAlarm(test_time+4, alarm2);	// fast burst
    2ba6:	43 e8       	ldi	r20, 0x83	; 131
    2ba8:	55 e1       	ldi	r21, 0x15	; 21
    2baa:	69 ec       	ldi	r22, 0xC9	; 201
    2bac:	72 e6       	ldi	r23, 0x62	; 98
    2bae:	85 e5       	ldi	r24, 0x55	; 85
    2bb0:	96 e5       	ldi	r25, 0x56	; 86
    2bb2:	15 dc       	rcall	.-2006   	; 0x23de <addAlarm>
	addAlarm(test_time+5, alarm3);	// slow burst
    2bb4:	4b e9       	ldi	r20, 0x9B	; 155
    2bb6:	55 e1       	ldi	r21, 0x15	; 21
    2bb8:	6a ec       	ldi	r22, 0xCA	; 202
    2bba:	72 e6       	ldi	r23, 0x62	; 98
    2bbc:	85 e5       	ldi	r24, 0x55	; 85
    2bbe:	96 e5       	ldi	r25, 0x56	; 86
    2bc0:	0e dc       	rcall	.-2020   	; 0x23de <addAlarm>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2bc2:	c2 e4       	ldi	r28, 0x42	; 66
    2bc4:	d7 e2       	ldi	r29, 0x27	; 39
    2bc6:	83 e4       	ldi	r24, 0x43	; 67
    2bc8:	97 e2       	ldi	r25, 0x27	; 39
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    2bca:	a8 e4       	ldi	r26, 0x48	; 72
    2bcc:	b0 e0       	ldi	r27, 0x00	; 0
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    2bce:	f8 94       	cli

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2bd0:	28 81       	ld	r18, Y
    2bd2:	21 11       	cpse	r18, r1
    2bd4:	07 c0       	rjmp	.+14     	; 0x2be4 <main+0x76>
    2bd6:	fc 01       	movw	r30, r24
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    2bd8:	2f 5f       	subi	r18, 0xFF	; 255

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2bda:	31 91       	ld	r19, Z+
    2bdc:	33 23       	and	r19, r19
    2bde:	e1 f3       	breq	.-8      	; 0x2bd8 <main+0x6a>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    2be0:	21 11       	cpse	r18, r1
    2be2:	02 c0       	rjmp	.+4      	; 0x2be8 <main+0x7a>
		cpu_irq_enable();
    2be4:	78 94       	sei
    2be6:	f3 cf       	rjmp	.-26     	; 0x2bce <main+0x60>
    2be8:	3c 91       	ld	r19, X

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    2bea:	e2 2f       	mov	r30, r18
    2bec:	f0 e0       	ldi	r31, 0x00	; 0
    2bee:	eb 5f       	subi	r30, 0xFB	; 251
    2bf0:	ff 4d       	sbci	r31, 0xDF	; 223
    2bf2:	23 2f       	mov	r18, r19
    2bf4:	21 7f       	andi	r18, 0xF1	; 241
    2bf6:	30 81       	ld	r19, Z
    2bf8:	23 2b       	or	r18, r19
    2bfa:	2c 93       	st	X, r18
	sleep_enable();
    2bfc:	2c 91       	ld	r18, X
    2bfe:	21 60       	ori	r18, 0x01	; 1
    2c00:	2c 93       	st	X, r18

	cpu_irq_enable();
    2c02:	78 94       	sei
	sleep_enter();
    2c04:	88 95       	sleep

	sleep_disable();
    2c06:	2c 91       	ld	r18, X
    2c08:	2e 7f       	andi	r18, 0xFE	; 254
    2c0a:	2c 93       	st	X, r18
    2c0c:	e0 cf       	rjmp	.-64     	; 0x2bce <main+0x60>

00002c0e <main_suspend_action>:
	}
}

void main_suspend_action(void)
{
	ui_powerdown();
    2c0e:	0c 94 2d 01 	jmp	0x25a	; 0x25a <ui_powerdown>
    2c12:	08 95       	ret

00002c14 <main_resume_action>:
}

void main_resume_action(void)
{
	ui_wakeup();
    2c14:	0c 94 2e 01 	jmp	0x25c	; 0x25c <ui_wakeup>
    2c18:	08 95       	ret

00002c1a <main_sof_action>:
}

void main_sof_action(void)
{
	if (!main_b_cdc_enable)
    2c1a:	80 91 41 27 	lds	r24, 0x2741
    2c1e:	88 23       	and	r24, r24
    2c20:	21 f0       	breq	.+8      	; 0x2c2a <main_sof_action+0x10>
		return;
	ui_process(udd_get_frame_number());
    2c22:	0e 94 35 0c 	call	0x186a	; 0x186a <udd_get_frame_number>
    2c26:	0c 94 37 01 	jmp	0x26e	; 0x26e <ui_process>
    2c2a:	08 95       	ret

00002c2c <main_cdc_enable>:
}
#endif

bool main_cdc_enable(uint8_t port)
{
	main_b_cdc_enable = true;
    2c2c:	91 e0       	ldi	r25, 0x01	; 1
    2c2e:	90 93 41 27 	sts	0x2741, r25
	// Open communication
	uart_open(port);
    2c32:	01 da       	rcall	.-3070   	; 0x2036 <uart_open>
	return true;
}
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	08 95       	ret

00002c38 <main_cdc_disable>:

void main_cdc_disable(uint8_t port)
{
	main_b_cdc_enable = false;
    2c38:	10 92 41 27 	sts	0x2741, r1
	// Close communication
	uart_close(port);
    2c3c:	0c ca       	rjmp	.-3048   	; 0x2056 <uart_close>
    2c3e:	08 95       	ret

00002c40 <main_cdc_set_dtr>:
}

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
	if (b_enable) {
    2c40:	66 23       	and	r22, r22
    2c42:	19 f0       	breq	.+6      	; 0x2c4a <main_cdc_set_dtr+0xa>
		// Host terminal has open COM
		ui_com_open(port);
    2c44:	0c 94 2f 01 	jmp	0x25e	; 0x25e <ui_com_open>
    2c48:	08 95       	ret
	}else{
		// Host terminal has close COM
		ui_com_close(port);
    2c4a:	0c 94 30 01 	jmp	0x260	; 0x260 <ui_com_close>
    2c4e:	08 95       	ret

00002c50 <__udivmodhi4>:
    2c50:	aa 1b       	sub	r26, r26
    2c52:	bb 1b       	sub	r27, r27
    2c54:	51 e1       	ldi	r21, 0x11	; 17
    2c56:	07 c0       	rjmp	.+14     	; 0x2c66 <__udivmodhi4_ep>

00002c58 <__udivmodhi4_loop>:
    2c58:	aa 1f       	adc	r26, r26
    2c5a:	bb 1f       	adc	r27, r27
    2c5c:	a6 17       	cp	r26, r22
    2c5e:	b7 07       	cpc	r27, r23
    2c60:	10 f0       	brcs	.+4      	; 0x2c66 <__udivmodhi4_ep>
    2c62:	a6 1b       	sub	r26, r22
    2c64:	b7 0b       	sbc	r27, r23

00002c66 <__udivmodhi4_ep>:
    2c66:	88 1f       	adc	r24, r24
    2c68:	99 1f       	adc	r25, r25
    2c6a:	5a 95       	dec	r21
    2c6c:	a9 f7       	brne	.-22     	; 0x2c58 <__udivmodhi4_loop>
    2c6e:	80 95       	com	r24
    2c70:	90 95       	com	r25
    2c72:	bc 01       	movw	r22, r24
    2c74:	cd 01       	movw	r24, r26
    2c76:	08 95       	ret

00002c78 <__udivmodsi4>:
    2c78:	a1 e2       	ldi	r26, 0x21	; 33
    2c7a:	1a 2e       	mov	r1, r26
    2c7c:	aa 1b       	sub	r26, r26
    2c7e:	bb 1b       	sub	r27, r27
    2c80:	fd 01       	movw	r30, r26
    2c82:	0d c0       	rjmp	.+26     	; 0x2c9e <__udivmodsi4_ep>

00002c84 <__udivmodsi4_loop>:
    2c84:	aa 1f       	adc	r26, r26
    2c86:	bb 1f       	adc	r27, r27
    2c88:	ee 1f       	adc	r30, r30
    2c8a:	ff 1f       	adc	r31, r31
    2c8c:	a2 17       	cp	r26, r18
    2c8e:	b3 07       	cpc	r27, r19
    2c90:	e4 07       	cpc	r30, r20
    2c92:	f5 07       	cpc	r31, r21
    2c94:	20 f0       	brcs	.+8      	; 0x2c9e <__udivmodsi4_ep>
    2c96:	a2 1b       	sub	r26, r18
    2c98:	b3 0b       	sbc	r27, r19
    2c9a:	e4 0b       	sbc	r30, r20
    2c9c:	f5 0b       	sbc	r31, r21

00002c9e <__udivmodsi4_ep>:
    2c9e:	66 1f       	adc	r22, r22
    2ca0:	77 1f       	adc	r23, r23
    2ca2:	88 1f       	adc	r24, r24
    2ca4:	99 1f       	adc	r25, r25
    2ca6:	1a 94       	dec	r1
    2ca8:	69 f7       	brne	.-38     	; 0x2c84 <__udivmodsi4_loop>
    2caa:	60 95       	com	r22
    2cac:	70 95       	com	r23
    2cae:	80 95       	com	r24
    2cb0:	90 95       	com	r25
    2cb2:	9b 01       	movw	r18, r22
    2cb4:	ac 01       	movw	r20, r24
    2cb6:	bd 01       	movw	r22, r26
    2cb8:	cf 01       	movw	r24, r30
    2cba:	08 95       	ret

00002cbc <__tablejump2__>:
    2cbc:	ee 0f       	add	r30, r30
    2cbe:	ff 1f       	adc	r31, r31

00002cc0 <__tablejump__>:
    2cc0:	05 90       	lpm	r0, Z+
    2cc2:	f4 91       	lpm	r31, Z
    2cc4:	e0 2d       	mov	r30, r0
    2cc6:	19 94       	eijmp

00002cc8 <malloc>:
    2cc8:	cf 93       	push	r28
    2cca:	df 93       	push	r29
    2ccc:	82 30       	cpi	r24, 0x02	; 2
    2cce:	91 05       	cpc	r25, r1
    2cd0:	10 f4       	brcc	.+4      	; 0x2cd6 <malloc+0xe>
    2cd2:	82 e0       	ldi	r24, 0x02	; 2
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	e0 91 68 27 	lds	r30, 0x2768
    2cda:	f0 91 69 27 	lds	r31, 0x2769
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	a0 e0       	ldi	r26, 0x00	; 0
    2ce4:	b0 e0       	ldi	r27, 0x00	; 0
    2ce6:	30 97       	sbiw	r30, 0x00	; 0
    2ce8:	39 f1       	breq	.+78     	; 0x2d38 <malloc+0x70>
    2cea:	40 81       	ld	r20, Z
    2cec:	51 81       	ldd	r21, Z+1	; 0x01
    2cee:	48 17       	cp	r20, r24
    2cf0:	59 07       	cpc	r21, r25
    2cf2:	b8 f0       	brcs	.+46     	; 0x2d22 <malloc+0x5a>
    2cf4:	48 17       	cp	r20, r24
    2cf6:	59 07       	cpc	r21, r25
    2cf8:	71 f4       	brne	.+28     	; 0x2d16 <malloc+0x4e>
    2cfa:	82 81       	ldd	r24, Z+2	; 0x02
    2cfc:	93 81       	ldd	r25, Z+3	; 0x03
    2cfe:	10 97       	sbiw	r26, 0x00	; 0
    2d00:	29 f0       	breq	.+10     	; 0x2d0c <malloc+0x44>
    2d02:	12 96       	adiw	r26, 0x02	; 2
    2d04:	8d 93       	st	X+, r24
    2d06:	9c 93       	st	X, r25
    2d08:	13 97       	sbiw	r26, 0x03	; 3
    2d0a:	2c c0       	rjmp	.+88     	; 0x2d64 <malloc+0x9c>
    2d0c:	80 93 68 27 	sts	0x2768, r24
    2d10:	90 93 69 27 	sts	0x2769, r25
    2d14:	27 c0       	rjmp	.+78     	; 0x2d64 <malloc+0x9c>
    2d16:	21 15       	cp	r18, r1
    2d18:	31 05       	cpc	r19, r1
    2d1a:	31 f0       	breq	.+12     	; 0x2d28 <malloc+0x60>
    2d1c:	42 17       	cp	r20, r18
    2d1e:	53 07       	cpc	r21, r19
    2d20:	18 f0       	brcs	.+6      	; 0x2d28 <malloc+0x60>
    2d22:	a9 01       	movw	r20, r18
    2d24:	db 01       	movw	r26, r22
    2d26:	01 c0       	rjmp	.+2      	; 0x2d2a <malloc+0x62>
    2d28:	ef 01       	movw	r28, r30
    2d2a:	9a 01       	movw	r18, r20
    2d2c:	bd 01       	movw	r22, r26
    2d2e:	df 01       	movw	r26, r30
    2d30:	02 80       	ldd	r0, Z+2	; 0x02
    2d32:	f3 81       	ldd	r31, Z+3	; 0x03
    2d34:	e0 2d       	mov	r30, r0
    2d36:	d7 cf       	rjmp	.-82     	; 0x2ce6 <malloc+0x1e>
    2d38:	21 15       	cp	r18, r1
    2d3a:	31 05       	cpc	r19, r1
    2d3c:	f9 f0       	breq	.+62     	; 0x2d7c <malloc+0xb4>
    2d3e:	28 1b       	sub	r18, r24
    2d40:	39 0b       	sbc	r19, r25
    2d42:	24 30       	cpi	r18, 0x04	; 4
    2d44:	31 05       	cpc	r19, r1
    2d46:	80 f4       	brcc	.+32     	; 0x2d68 <malloc+0xa0>
    2d48:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d4c:	61 15       	cp	r22, r1
    2d4e:	71 05       	cpc	r23, r1
    2d50:	21 f0       	breq	.+8      	; 0x2d5a <malloc+0x92>
    2d52:	fb 01       	movw	r30, r22
    2d54:	82 83       	std	Z+2, r24	; 0x02
    2d56:	93 83       	std	Z+3, r25	; 0x03
    2d58:	04 c0       	rjmp	.+8      	; 0x2d62 <malloc+0x9a>
    2d5a:	80 93 68 27 	sts	0x2768, r24
    2d5e:	90 93 69 27 	sts	0x2769, r25
    2d62:	fe 01       	movw	r30, r28
    2d64:	32 96       	adiw	r30, 0x02	; 2
    2d66:	44 c0       	rjmp	.+136    	; 0x2df0 <malloc+0x128>
    2d68:	fe 01       	movw	r30, r28
    2d6a:	e2 0f       	add	r30, r18
    2d6c:	f3 1f       	adc	r31, r19
    2d6e:	81 93       	st	Z+, r24
    2d70:	91 93       	st	Z+, r25
    2d72:	22 50       	subi	r18, 0x02	; 2
    2d74:	31 09       	sbc	r19, r1
    2d76:	28 83       	st	Y, r18
    2d78:	39 83       	std	Y+1, r19	; 0x01
    2d7a:	3a c0       	rjmp	.+116    	; 0x2df0 <malloc+0x128>
    2d7c:	20 91 66 27 	lds	r18, 0x2766
    2d80:	30 91 67 27 	lds	r19, 0x2767
    2d84:	23 2b       	or	r18, r19
    2d86:	41 f4       	brne	.+16     	; 0x2d98 <malloc+0xd0>
    2d88:	20 91 02 20 	lds	r18, 0x2002
    2d8c:	30 91 03 20 	lds	r19, 0x2003
    2d90:	20 93 66 27 	sts	0x2766, r18
    2d94:	30 93 67 27 	sts	0x2767, r19
    2d98:	20 91 00 20 	lds	r18, 0x2000
    2d9c:	30 91 01 20 	lds	r19, 0x2001
    2da0:	21 15       	cp	r18, r1
    2da2:	31 05       	cpc	r19, r1
    2da4:	41 f4       	brne	.+16     	; 0x2db6 <malloc+0xee>
    2da6:	2d b7       	in	r18, 0x3d	; 61
    2da8:	3e b7       	in	r19, 0x3e	; 62
    2daa:	40 91 04 20 	lds	r20, 0x2004
    2dae:	50 91 05 20 	lds	r21, 0x2005
    2db2:	24 1b       	sub	r18, r20
    2db4:	35 0b       	sbc	r19, r21
    2db6:	e0 91 66 27 	lds	r30, 0x2766
    2dba:	f0 91 67 27 	lds	r31, 0x2767
    2dbe:	e2 17       	cp	r30, r18
    2dc0:	f3 07       	cpc	r31, r19
    2dc2:	a0 f4       	brcc	.+40     	; 0x2dec <malloc+0x124>
    2dc4:	2e 1b       	sub	r18, r30
    2dc6:	3f 0b       	sbc	r19, r31
    2dc8:	28 17       	cp	r18, r24
    2dca:	39 07       	cpc	r19, r25
    2dcc:	78 f0       	brcs	.+30     	; 0x2dec <malloc+0x124>
    2dce:	ac 01       	movw	r20, r24
    2dd0:	4e 5f       	subi	r20, 0xFE	; 254
    2dd2:	5f 4f       	sbci	r21, 0xFF	; 255
    2dd4:	24 17       	cp	r18, r20
    2dd6:	35 07       	cpc	r19, r21
    2dd8:	48 f0       	brcs	.+18     	; 0x2dec <malloc+0x124>
    2dda:	4e 0f       	add	r20, r30
    2ddc:	5f 1f       	adc	r21, r31
    2dde:	40 93 66 27 	sts	0x2766, r20
    2de2:	50 93 67 27 	sts	0x2767, r21
    2de6:	81 93       	st	Z+, r24
    2de8:	91 93       	st	Z+, r25
    2dea:	02 c0       	rjmp	.+4      	; 0x2df0 <malloc+0x128>
    2dec:	e0 e0       	ldi	r30, 0x00	; 0
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	cf 01       	movw	r24, r30
    2df2:	df 91       	pop	r29
    2df4:	cf 91       	pop	r28
    2df6:	08 95       	ret

00002df8 <free>:
    2df8:	cf 93       	push	r28
    2dfa:	df 93       	push	r29
    2dfc:	00 97       	sbiw	r24, 0x00	; 0
    2dfe:	09 f4       	brne	.+2      	; 0x2e02 <free+0xa>
    2e00:	87 c0       	rjmp	.+270    	; 0x2f10 <free+0x118>
    2e02:	fc 01       	movw	r30, r24
    2e04:	32 97       	sbiw	r30, 0x02	; 2
    2e06:	12 82       	std	Z+2, r1	; 0x02
    2e08:	13 82       	std	Z+3, r1	; 0x03
    2e0a:	c0 91 68 27 	lds	r28, 0x2768
    2e0e:	d0 91 69 27 	lds	r29, 0x2769
    2e12:	20 97       	sbiw	r28, 0x00	; 0
    2e14:	81 f4       	brne	.+32     	; 0x2e36 <free+0x3e>
    2e16:	20 81       	ld	r18, Z
    2e18:	31 81       	ldd	r19, Z+1	; 0x01
    2e1a:	28 0f       	add	r18, r24
    2e1c:	39 1f       	adc	r19, r25
    2e1e:	80 91 66 27 	lds	r24, 0x2766
    2e22:	90 91 67 27 	lds	r25, 0x2767
    2e26:	82 17       	cp	r24, r18
    2e28:	93 07       	cpc	r25, r19
    2e2a:	79 f5       	brne	.+94     	; 0x2e8a <free+0x92>
    2e2c:	e0 93 66 27 	sts	0x2766, r30
    2e30:	f0 93 67 27 	sts	0x2767, r31
    2e34:	6d c0       	rjmp	.+218    	; 0x2f10 <free+0x118>
    2e36:	de 01       	movw	r26, r28
    2e38:	20 e0       	ldi	r18, 0x00	; 0
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	ae 17       	cp	r26, r30
    2e3e:	bf 07       	cpc	r27, r31
    2e40:	50 f4       	brcc	.+20     	; 0x2e56 <free+0x5e>
    2e42:	12 96       	adiw	r26, 0x02	; 2
    2e44:	4d 91       	ld	r20, X+
    2e46:	5c 91       	ld	r21, X
    2e48:	13 97       	sbiw	r26, 0x03	; 3
    2e4a:	9d 01       	movw	r18, r26
    2e4c:	41 15       	cp	r20, r1
    2e4e:	51 05       	cpc	r21, r1
    2e50:	09 f1       	breq	.+66     	; 0x2e94 <free+0x9c>
    2e52:	da 01       	movw	r26, r20
    2e54:	f3 cf       	rjmp	.-26     	; 0x2e3c <free+0x44>
    2e56:	a2 83       	std	Z+2, r26	; 0x02
    2e58:	b3 83       	std	Z+3, r27	; 0x03
    2e5a:	40 81       	ld	r20, Z
    2e5c:	51 81       	ldd	r21, Z+1	; 0x01
    2e5e:	84 0f       	add	r24, r20
    2e60:	95 1f       	adc	r25, r21
    2e62:	8a 17       	cp	r24, r26
    2e64:	9b 07       	cpc	r25, r27
    2e66:	71 f4       	brne	.+28     	; 0x2e84 <free+0x8c>
    2e68:	8d 91       	ld	r24, X+
    2e6a:	9c 91       	ld	r25, X
    2e6c:	11 97       	sbiw	r26, 0x01	; 1
    2e6e:	84 0f       	add	r24, r20
    2e70:	95 1f       	adc	r25, r21
    2e72:	02 96       	adiw	r24, 0x02	; 2
    2e74:	80 83       	st	Z, r24
    2e76:	91 83       	std	Z+1, r25	; 0x01
    2e78:	12 96       	adiw	r26, 0x02	; 2
    2e7a:	8d 91       	ld	r24, X+
    2e7c:	9c 91       	ld	r25, X
    2e7e:	13 97       	sbiw	r26, 0x03	; 3
    2e80:	82 83       	std	Z+2, r24	; 0x02
    2e82:	93 83       	std	Z+3, r25	; 0x03
    2e84:	21 15       	cp	r18, r1
    2e86:	31 05       	cpc	r19, r1
    2e88:	29 f4       	brne	.+10     	; 0x2e94 <free+0x9c>
    2e8a:	e0 93 68 27 	sts	0x2768, r30
    2e8e:	f0 93 69 27 	sts	0x2769, r31
    2e92:	3e c0       	rjmp	.+124    	; 0x2f10 <free+0x118>
    2e94:	d9 01       	movw	r26, r18
    2e96:	12 96       	adiw	r26, 0x02	; 2
    2e98:	ed 93       	st	X+, r30
    2e9a:	fc 93       	st	X, r31
    2e9c:	13 97       	sbiw	r26, 0x03	; 3
    2e9e:	4d 91       	ld	r20, X+
    2ea0:	5d 91       	ld	r21, X+
    2ea2:	a4 0f       	add	r26, r20
    2ea4:	b5 1f       	adc	r27, r21
    2ea6:	ea 17       	cp	r30, r26
    2ea8:	fb 07       	cpc	r31, r27
    2eaa:	79 f4       	brne	.+30     	; 0x2eca <free+0xd2>
    2eac:	80 81       	ld	r24, Z
    2eae:	91 81       	ldd	r25, Z+1	; 0x01
    2eb0:	84 0f       	add	r24, r20
    2eb2:	95 1f       	adc	r25, r21
    2eb4:	02 96       	adiw	r24, 0x02	; 2
    2eb6:	d9 01       	movw	r26, r18
    2eb8:	8d 93       	st	X+, r24
    2eba:	9c 93       	st	X, r25
    2ebc:	11 97       	sbiw	r26, 0x01	; 1
    2ebe:	82 81       	ldd	r24, Z+2	; 0x02
    2ec0:	93 81       	ldd	r25, Z+3	; 0x03
    2ec2:	12 96       	adiw	r26, 0x02	; 2
    2ec4:	8d 93       	st	X+, r24
    2ec6:	9c 93       	st	X, r25
    2ec8:	13 97       	sbiw	r26, 0x03	; 3
    2eca:	e0 e0       	ldi	r30, 0x00	; 0
    2ecc:	f0 e0       	ldi	r31, 0x00	; 0
    2ece:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ed2:	00 97       	sbiw	r24, 0x00	; 0
    2ed4:	19 f0       	breq	.+6      	; 0x2edc <free+0xe4>
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	ec 01       	movw	r28, r24
    2eda:	f9 cf       	rjmp	.-14     	; 0x2ece <free+0xd6>
    2edc:	ce 01       	movw	r24, r28
    2ede:	02 96       	adiw	r24, 0x02	; 2
    2ee0:	28 81       	ld	r18, Y
    2ee2:	39 81       	ldd	r19, Y+1	; 0x01
    2ee4:	82 0f       	add	r24, r18
    2ee6:	93 1f       	adc	r25, r19
    2ee8:	20 91 66 27 	lds	r18, 0x2766
    2eec:	30 91 67 27 	lds	r19, 0x2767
    2ef0:	28 17       	cp	r18, r24
    2ef2:	39 07       	cpc	r19, r25
    2ef4:	69 f4       	brne	.+26     	; 0x2f10 <free+0x118>
    2ef6:	30 97       	sbiw	r30, 0x00	; 0
    2ef8:	29 f4       	brne	.+10     	; 0x2f04 <free+0x10c>
    2efa:	10 92 68 27 	sts	0x2768, r1
    2efe:	10 92 69 27 	sts	0x2769, r1
    2f02:	02 c0       	rjmp	.+4      	; 0x2f08 <free+0x110>
    2f04:	12 82       	std	Z+2, r1	; 0x02
    2f06:	13 82       	std	Z+3, r1	; 0x03
    2f08:	c0 93 66 27 	sts	0x2766, r28
    2f0c:	d0 93 67 27 	sts	0x2767, r29
    2f10:	df 91       	pop	r29
    2f12:	cf 91       	pop	r28
    2f14:	08 95       	ret

00002f16 <memcpy>:
    2f16:	fb 01       	movw	r30, r22
    2f18:	dc 01       	movw	r26, r24
    2f1a:	02 c0       	rjmp	.+4      	; 0x2f20 <memcpy+0xa>
    2f1c:	01 90       	ld	r0, Z+
    2f1e:	0d 92       	st	X+, r0
    2f20:	41 50       	subi	r20, 0x01	; 1
    2f22:	50 40       	sbci	r21, 0x00	; 0
    2f24:	d8 f7       	brcc	.-10     	; 0x2f1c <memcpy+0x6>
    2f26:	08 95       	ret

00002f28 <_exit>:
    2f28:	f8 94       	cli

00002f2a <__stop_program>:
    2f2a:	ff cf       	rjmp	.-2      	; 0x2f2a <__stop_program>
